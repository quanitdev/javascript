/*! For license information please see chunk-d326ba8a.2cd2ddf9.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-d326ba8a"],{"104d":function(t,e,r){"use strict";t.exports=function(t,e,r,i,s){return t.config=e,r&&(t.code=r),t.request=i,t.response=s,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},t}},1345:function(t,e,r){"use strict";var i=r("c4a5");t.exports=function(t,e,r){var s=r.config.validateStatus;r.status&&s&&!s(r.status)?e(i("Request failed with status code "+r.status,r.config,null,r.request,r)):t(r)}},"13f5":function(t,e,r){"use strict";t.exports=function(t){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)}},1452:function(t,e,r){"use strict";var i=r("6c15");function s(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var r=this;this.promise.then((function(t){if(r._listeners){var e,i=r._listeners.length;for(e=0;e<i;e++)r._listeners[e](t);r._listeners=null}})),this.promise.then=function(t){var e,i=new Promise((function(t){r.subscribe(t),e=t})).then(t);return i.cancel=function(){r.unsubscribe(e)},i},t((function(t){r.reason||(r.reason=new i(t),e(r.reason))}))}s.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},s.prototype.subscribe=function(t){this.reason?t(this.reason):this._listeners?this._listeners.push(t):this._listeners=[t]},s.prototype.unsubscribe=function(t){if(this._listeners){var e=this._listeners.indexOf(t);-1!==e&&this._listeners.splice(e,1)}},s.source=function(){var t;return{token:new s((function(e){t=e})),cancel:t}},t.exports=s},"1c04":function(t,e,r){"use strict";var i=r("4894"),s=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,r,a,o={};return t?(i.forEach(t.split("\n"),(function(t){if(a=t.indexOf(":"),e=i.trim(t.substr(0,a)).toLowerCase(),r=i.trim(t.substr(a+1)),e){if(o[e]&&s.indexOf(e)>=0)return;o[e]="set-cookie"===e?(o[e]?o[e]:[]).concat([r]):o[e]?o[e]+", "+r:r}})),o):o}},"2c39":function(t,e,r){"use strict";var i=r("4894");function s(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,r){if(!e)return t;var a;if(r)a=r(e);else if(i.isURLSearchParams(e))a=e.toString();else{var o=[];i.forEach(e,(function(t,e){null!=t&&(i.isArray(t)?e+="[]":t=[t],i.forEach(t,(function(t){i.isDate(t)?t=t.toISOString():i.isObject(t)&&(t=JSON.stringify(t)),o.push(s(e)+"="+s(t))})))})),a=o.join("&")}if(a){var n=t.indexOf("#");-1!==n&&(t=t.slice(0,n)),t+=(-1===t.indexOf("?")?"?":"&")+a}return t}},4894:function(t,e,r){"use strict";var i=r("ffe1"),s=Object.prototype.toString;function a(t){return Array.isArray(t)}function o(t){return void 0===t}function n(t){return"[object ArrayBuffer]"===s.call(t)}function _(t){return null!==t&&"object"==typeof t}function m(t){if("[object Object]"!==s.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function h(t){return"[object Function]"===s.call(t)}function c(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),a(t))for(var r=0,i=t.length;r<i;r++)e.call(null,t[r],r,t);else for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&e.call(null,t[s],s,t)}t.exports={isArray:a,isArrayBuffer:n,isBuffer:function(t){return null!==t&&!o(t)&&null!==t.constructor&&!o(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"[object FormData]"===s.call(t)},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&n(t.buffer)},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:_,isPlainObject:m,isUndefined:o,isDate:function(t){return"[object Date]"===s.call(t)},isFile:function(t){return"[object File]"===s.call(t)},isBlob:function(t){return"[object Blob]"===s.call(t)},isFunction:h,isStream:function(t){return _(t)&&h(t.pipe)},isURLSearchParams:function(t){return"[object URLSearchParams]"===s.call(t)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function t(){var e={};function r(r,i){m(e[i])&&m(r)?e[i]=t(e[i],r):m(r)?e[i]=t({},r):a(r)?e[i]=r.slice():e[i]=r}for(var i=0,s=arguments.length;i<s;i++)c(arguments[i],r);return e},extend:function(t,e,r){return c(e,(function(e,s){t[s]=r&&"function"==typeof e?i(e,r):e})),t},trim:function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},"4df6":function(t,e,r){"use strict";var i=r("4894");t.exports=i.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function s(t){var i=t;return e&&(r.setAttribute("href",i),i=r.href),r.setAttribute("href",i),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return t=s(window.location.href),function(e){var r=i.isString(e)?s(e):e;return r.protocol===t.protocol&&r.host===t.host}}():function(){return!0}},"4f2b8":function(t,e,r){"use strict";var i=r("4894"),s=r("b5ce"),a=r("d1a96"),o=r("5dd8"),n=r("6c15");function _(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new n("canceled")}t.exports=function(t){return _(t),t.headers=t.headers||{},t.data=s.call(t,t.data,t.headers,t.transformRequest),t.headers=i.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),i.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||o.adapter)(t).then((function(e){return _(t),e.data=s.call(t,e.data,e.headers,t.transformResponse),e}),(function(e){return a(e)||(_(t),e&&e.response&&(e.response.data=s.call(t,e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},"510a":function(t,e,r){"use strict";var i=r("ba06").version,s={};["object","boolean","number","function","string","symbol"].forEach((function(t,e){s[t]=function(r){return typeof r===t||"a"+(e<1?"n ":" ")+t}}));var a={};s.transitional=function(t,e,r){function s(t,e){return"[Axios v"+i+"] Transitional option '"+t+"'"+e+(r?". "+r:"")}return function(r,i,o){if(!1===t)throw new Error(s(i," has been removed"+(e?" in "+e:"")));return e&&!a[i]&&(a[i]=!0),!t||t(r,i,o)}},t.exports={assertOptions:function(t,e,r){if("object"!=typeof t)throw new TypeError("options must be an object");for(var i=Object.keys(t),s=i.length;s-- >0;){var a=i[s],o=e[a];if(o){var n=t[a],_=void 0===n||o(n,a,t);if(!0!==_)throw new TypeError("option "+a+" must be "+_)}else if(!0!==r)throw Error("Unknown option "+a)}},validators:s}},5110:function(t,e,r){t.exports=r("7802")},"5dd8":function(t,e,r){"use strict";(function(e){var i=r("4894"),s=r("b72f"),a=r("104d"),o={"Content-Type":"application/x-www-form-urlencoded"};function n(t,e){!i.isUndefined(t)&&i.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var _={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:function(){var t;return("undefined"!=typeof XMLHttpRequest||void 0!==e&&"[object process]"===Object.prototype.toString.call(e))&&(t=r("a1bd")),t}(),transformRequest:[function(t,e){return s(e,"Accept"),s(e,"Content-Type"),i.isFormData(t)||i.isArrayBuffer(t)||i.isBuffer(t)||i.isStream(t)||i.isFile(t)||i.isBlob(t)?t:i.isArrayBufferView(t)?t.buffer:i.isURLSearchParams(t)?(n(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):i.isObject(t)||e&&"application/json"===e["Content-Type"]?(n(e,"application/json"),function(t,e,r){if(i.isString(t))try{return(e||JSON.parse)(t),i.trim(t)}catch(t){if("SyntaxError"!==t.name)throw t}return(r||JSON.stringify)(t)}(t)):t}],transformResponse:[function(t){var e=this.transitional||_.transitional,r=e&&e.silentJSONParsing,s=e&&e.forcedJSONParsing,o=!r&&"json"===this.responseType;if(o||s&&i.isString(t)&&t.length)try{return JSON.parse(t)}catch(t){if(o){if("SyntaxError"===t.name)throw a(t,this,"E_JSON_PARSE");throw t}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};i.forEach(["delete","get","head"],(function(t){_.headers[t]={}})),i.forEach(["post","put","patch"],(function(t){_.headers[t]=i.merge(o)})),t.exports=_}).call(this,r("4362"))},"6c15":function(t,e,r){"use strict";function i(t){this.message=t}i.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},i.prototype.__CANCEL__=!0,t.exports=i},7802:function(t,e,r){"use strict";var i=r("4894"),s=r("ffe1"),a=r("a683"),o=r("c280");var n=function t(e){var r=new a(e),n=s(a.prototype.request,r);return i.extend(n,a.prototype,r),i.extend(n,r),n.create=function(r){return t(o(e,r))},n}(r("5dd8"));n.Axios=a,n.Cancel=r("6c15"),n.CancelToken=r("1452"),n.isCancel=r("d1a96"),n.VERSION=r("ba06").version,n.all=function(t){return Promise.all(t)},n.spread=r("e1df"),n.isAxiosError=r("fcf5"),t.exports=n,t.exports.default=n},"7cf1":function(t,e,r){"use strict";var i=r("13f5"),s=r("e3a9");t.exports=function(t,e){return t&&!i(e)?s(t,e):e}},a19d:function(t,e,r){!function(t,r){r(e)}(0,(function(t){"use strict";var e,i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},i(t,e)};function s(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function a(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],i=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,s,a=r.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(i=a.next()).done;)o.push(i.value)}catch(t){s={error:t}}finally{try{i&&!i.done&&(r=a.return)&&r.call(a)}finally{if(s)throw s.error}}return o}function n(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(o(arguments[e]));return t}!function(t){t.ProcessingSuccess="CRMProcessingSuccess",t.ProcessingFailed="CRMProcessingFailed",t.ScriptSyntaxError="CRMScriptSyntaxError",t.LoadResourceFailed="CRMLoadResourceFailed",t.LoadSourceImageFailed="CRMLoadSourceImageFailed",t.ThreadError="CRMThreadError",t.OpenGLError="CRMOpenGLError",t.OutOfMemmory="CRMOutOfMemmory",t.ParameterError="CRMParameterError",t.ViewInvalidSerial="CRMViewInvalidSerial",t.InnerError="CRMInnerError",t.OtherError="CRMOtherError"}(e||(e={}));var _=[1,1,0,0];function m(t){return"[object String]"!=Object.prototype.toString.call(t)||t==e.ProcessingSuccess}function h(t,e,r){return t.substring(0,e)+r+t.substr(e)}var c=function(t,e){this.m_name=t,this.m_image=e},l=function(){function t(t,e,r,i,s,a){this.m_image_pool=new Array,this.m_temporary=new Array,this.m_stack=new Array,this.m_source_modified=!1,this.m_texture=t,this.m_keep_source=i,this.m_delete_source_when_clear=s,this.m_engine=a,this.m_width=e,this.m_height=r}return t.prototype.get_src=function(){return this.m_texture},t.prototype.unlock=function(){var t=this;this.m_temporary.map((function(e){e&&t.pool_put(e)})),this.m_temporary.length=0},t.prototype.destroy=function(){this.reset(),this.m_delete_source_when_clear&&this.m_engine.context().delete_texture(this.m_texture),this.pool_trim(0)},t.prototype.current=function(){return this.m_dst},t.prototype.new_temporary=function(){var t=this.pool_get();return t||(t=this.new_image()),this.m_temporary[this.m_temporary.length]=t,t},t.prototype.get_temporary=function(t){},t.prototype.push_to_current=function(t){void 0===t&&(t=-1),t=this.map_idx(t),this.pool_put(this.m_dst),this.m_dst=this.m_temporary[t],this.m_temporary[t]=null},t.prototype.load_channel=function(t){var e=this,r=null;return this.find_channel(t,(function(t){r=e.m_stack[t].m_image})),r},t.prototype.load_view=function(t){var r=this.m_engine.get_view_by_number(t);return r?r.processed?this.m_engine.load_view(r):e.OtherError:e.ScriptSyntaxError},t.prototype.get_inner_result=function(){return this.m_dst},t.prototype.get_result=function(){var t=this.m_dst;return this.m_dst=null,this.reset(),t},t.prototype.fetch_tmp_image=function(){var t=this.pool_get();return this.m_keep_source||this.m_delete_source_when_clear||this.m_texture!=t||(t=this.pool_get(),this.pool_put(this.m_texture)),t||(t=this.new_image()),t},t.prototype.put_tmp_image=function(t){this.pool_put(t)},t.prototype.new_channel=function(t){var e=this.pool_get();e||(e=this.new_image()),this.m_stack[this.m_stack.length]=new c(t,e),this.duplicate_image(e,this.m_dst)},t.prototype.swap_channel=function(t){var e=this;this.find_channel(t,(function(t){var r=e.m_dst;e.m_dst=e.m_stack[t].m_image,e.m_stack[t].m_image=r}))},t.prototype.end_channel=function(t){var e=this;this.find_channel(t,(function(t){e.pool_put(e.m_stack[t].m_image),e.m_stack.splice(t,1)}))},t.prototype.prepare=function(){if(this.reset(),!this.m_texture||this.m_source_modified)throw Error("failed load source image");this.m_keep_source?this.m_dst=this.duplicate_image(null,this.m_texture):(this.m_dst=this.m_texture,this.m_source_modified=!0,this.m_delete_source_when_clear&&(this.m_texture=null))},t.prototype.prepare_empty=function(){return this.reset(),this.m_dst=this.pool_get(),this.m_dst||(this.m_dst=this.new_image()),this.m_dst},t.prototype.size=function(){return{width:this.m_width,height:this.m_height}},t.prototype.find_channel=function(t,e){for(var r=this.m_stack.length-1;r>=0;--r)if(this.m_stack[r].m_name==t)return e(r),!0;return!1},t.prototype.pool_trim=function(t){var e=this.m_image_pool.length;if(!(t>=e)){for(var r=t;r<e;++r){var i=this.m_image_pool[r];(this.m_delete_source_when_clear||i!=this.m_texture)&&this.m_engine.context().delete_texture(i)}this.m_image_pool.length=t}},t.prototype.pool_put=function(t){this.m_image_pool[this.m_image_pool.length]=t,this.pool_trim(this.m_engine.get_max_pool_size())},t.prototype.pool_get=function(){return this.m_image_pool.length?this.m_image_pool.pop():null},t.prototype.reset=function(){var t=this;this.unlock();this.m_stack.map((function(e){t.pool_put(e.m_image)})),this.m_stack.length=0,this.m_dst&&(this.pool_put(this.m_dst),this.m_dst=null)},t.prototype.new_image=function(){var t=this.m_engine.context().create_new_texture(this.m_width,this.m_height);if(!t)throw Error("OpenGLError: ProcessData::new_image");return t},t.prototype.duplicate_image=function(t,e){var r=t;if(r||(r=this.pool_get()),r||(r=this.new_image()),!this.m_engine.context().texture_to_texture(r,e,this.m_engine.get_frame_buffer(),this.m_width,this.m_height))throw t||this.pool_put(r),Error("OpenGLError: ProcessData::duplicate_image");return r},t.prototype.map_idx=function(t){return t<0&&(t+=this.m_temporary.length),t},t}(),u=function(){function t(t){this.m_func_lock_image=null,this.m_func_unlock_image=null,this.m_context=t}return t.prototype.destroy=function(){},t.prototype.on_log=function(t){},t.prototype.lock_image=function(t,e){if(this.m_func_lock_image)return this.m_func_lock_image(t,e)},t.prototype.unlock_image=function(t,e,r){if(this.m_func_unlock_image)return this.m_func_unlock_image(t,e,r)},t.prototype.resource_pool_enable=function(){},t.prototype.resource_pool_texture_limite=function(){},t.prototype.resource_pool_texture_flush=function(){},t.prototype.context=function(){return this.m_context},t.prototype.texture_to_texture=function(t,e,r,i,s){if(this.m_context.bindFramebuffer(this.m_context.FRAMEBUFFER,r),this.m_context.framebufferTexture2D(this.m_context.FRAMEBUFFER,this.m_context.COLOR_ATTACHMENT0,this.m_context.TEXTURE_2D,e,0),this.m_context.activeTexture(this.m_context.TEXTURE0),this.m_context.bindTexture(this.m_context.TEXTURE_2D,t),this.m_context.copyTexSubImage2D(this.m_context.TEXTURE_2D,0,0,0,0,0,i,s),this.m_context.getError())throw new Error("texture_to_texture");return!0},t.prototype.get_resource_texture=function(t){var e={texture:null,width:0,height:0},r=this.lock_image(t);return r?"[object WebGLTexture]"==r.toString()?(e.texture=r,e):(e.width=r.width,e.height=r.height,e.texture=this.m_context.createTexture(),this.m_context.activeTexture(this.m_context.TEXTURE0),this.m_context.bindTexture(this.m_context.TEXTURE_2D,e.texture),this.m_context.texImage2D(this.m_context.TEXTURE_2D,0,this.m_context.RGBA,this.m_context.RGBA,this.m_context.UNSIGNED_BYTE,r),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MIN_FILTER,this.m_context.NEAREST),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MAG_FILTER,this.m_context.NEAREST),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_WRAP_S,this.m_context.CLAMP_TO_EDGE),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_WRAP_T,this.m_context.CLAMP_TO_EDGE),this.m_context.finish(),this.unlock_image(t,r),e):null},t.prototype.get_partial_resource_texture=function(t,e,r,i,s){var a={texture:null,width:0,height:0},o=this.lock_image(t);return o?"[object WebGLTexture]"==o.toString()?(a.texture=o,a):(a.width=o.width,a.height=o.height,a.texture=this.m_context.createTexture(),this.m_context.activeTexture(this.m_context.TEXTURE0),this.m_context.bindTexture(this.m_context.TEXTURE_2D,a.texture),this.m_context.texImage2D(this.m_context.TEXTURE_2D,0,this.m_context.RGBA,this.m_context.RGBA,this.m_context.UNSIGNED_BYTE,o),this.m_context.finish(),this.unlock_image(t,o),a):null},t.prototype.release_resource_texture=function(t){this.m_context.deleteTexture(t.texture)},t.prototype.delete_textures=function(t,e){if(1==t)this.m_context.deleteTexture(e);else for(var r=0;r<e.length&&r<t;++r)this.m_context.deleteTexture(e[r])},t.prototype.create_new_texture=function(t,e,r){void 0===r&&(r=!0);var i;return i=this.m_context.createTexture(),this.m_context.activeTexture(this.m_context.TEXTURE1),this.m_context.bindTexture(this.m_context.TEXTURE_2D,i),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MIN_FILTER,r?this.m_context.LINEAR:this.m_context.NEAREST),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MAG_FILTER,r?this.m_context.LINEAR:this.m_context.NEAREST),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_WRAP_S,this.m_context.CLAMP_TO_EDGE),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_WRAP_T,this.m_context.CLAMP_TO_EDGE),this.m_context.texImage2D(this.m_context.TEXTURE_2D,0,this.m_context.RGBA,t,e,0,this.m_context.RGBA,this.m_context.UNSIGNED_BYTE,null),this.m_context.getError()?(this.m_context.deleteTexture(i),0):i},t.prototype.create_new_texture_for_lut=function(t,e){var r;return r=this.m_context.createTexture(),this.m_context.activeTexture(this.m_context.TEXTURE1),this.m_context.bindTexture(this.m_context.TEXTURE_2D,r),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MIN_FILTER,this.m_context.NEAREST),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MAG_FILTER,this.m_context.NEAREST),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_WRAP_S,this.m_context.CLAMP_TO_EDGE),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_WRAP_T,this.m_context.CLAMP_TO_EDGE),this.m_context.texImage2D(this.m_context.TEXTURE_2D,0,this.m_context.RGBA,t,e,0,this.m_context.RGBA,this.m_context.UNSIGNED_BYTE,null),this.m_context.getError()?(this.m_context.deleteTexture(r),0):r},t.prototype.copy_texture=function(t,e,r,i,s){if(this.m_context.bindFramebuffer(this.m_context.FRAMEBUFFER,s),this.m_context.framebufferTexture2D(this.m_context.FRAMEBUFFER,this.m_context.COLOR_ATTACHMENT0,this.m_context.TEXTURE_2D,e,0),this.m_context.activeTexture(this.m_context.TEXTURE0),this.m_context.bindTexture(this.m_context.TEXTURE_2D,t),this.m_context.copyTexSubImage2D(this.m_context.TEXTURE_2D,0,0,0,0,0,r,i),this.m_context.getError())throw"error in copy_texture"},t.prototype.delete_texture=function(t){this.m_context.deleteTexture(t)},t.prototype.texture_enable_linear=function(t,e){this.m_context.bindTexture(this.m_context.TEXTURE_2D,t),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MIN_FILTER,e?this.m_context.LINEAR:this.m_context.NEAREST),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MAG_FILTER,e?this.m_context.LINEAR:this.m_context.NEAREST)},t}(),f=function(){function t(){this.m_macros=new Map,this.m_script=""}return t.prototype.read_macro=function(t,e){},t.prototype.findAngleBracket=function(t){return t.split("<"),t.indexOf("<"),""},t}(),p=function(){function t(){this.m_data=new f}return t.prototype.set_macro=function(t,e){e?this.m_data.m_macros.set(t,e):this.m_data.m_macros.delete(t)},t.prototype.clear=function(){this.m_data.m_macros.clear()},t.prototype.parce=function(t){return t},t}(),d=function(t,e,r){this.m_frameBuffer=t,this.m_width=e,this.m_height=r};var g,v,x,y=function(){function t(e,r,i){if(this.m_gl=i,this.m_vertexAttribute=null,this.m_texCoordAttribute=null,this.m_program=this.m_gl.createProgram(),e=e||t.defaultVertexSource,r="precision highp float;"+(r=r||t.defaultFragmentSource),this.m_gl.attachShader(this.m_program,this.compileSource(this.m_gl,this.m_gl.VERTEX_SHADER,e)),this.m_gl.attachShader(this.m_program,this.compileSource(this.m_gl,this.m_gl.FRAGMENT_SHADER,r)),this.m_gl.linkProgram(this.m_program),!this.m_gl.getProgramParameter(this.m_program,this.m_gl.LINK_STATUS))throw"link error: "+this.m_gl.getProgramInfoLog(this.m_program)}return t.isArray=function(t){return"[object Array]"==Object.prototype.toString.call(t)},t.isNumber=function(t){return"[object Number]"==Object.prototype.toString.call(t)},t.prototype.compileSource=function(t,e,r){var i=t.createShader(e);if(t.shaderSource(i,r),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS))throw"compile error: "+t.getShaderInfoLog(i);return i},t.prototype.getDefaultShader=function(){return this.m_gl.defaultShader=this.m_gl.defaultShader||new t(null,null,null),this.m_gl.defaultShader},t.prototype.destroy=function(){this.m_gl.deleteProgram(this.m_program),this.m_program=null},t.prototype.uniformMat4=function(e){for(var r in this.m_gl.useProgram(this.m_program),e)if(e.hasOwnProperty(r)){var i=this.m_gl.getUniformLocation(this.m_program,r);if(null!=i){var s=e[r];if(!t.isArray(s)||4!=s.length)throw r+" length valid";this.m_gl.uniformMatrix2fv(i,!1,new Float32Array(s))}}},t.prototype.uniforms=function(e){for(var r in this.m_gl.useProgram(this.m_program),e)if(e.hasOwnProperty(r)){var i=this.m_gl.getUniformLocation(this.m_program,r);if(null!==i){var s=e[r];if(t.isArray(s))switch(s.length){case 1:this.m_gl.uniform1fv(i,new Float32Array(s));break;case 2:this.m_gl.uniform2fv(i,new Float32Array(s));break;case 3:this.m_gl.uniform3fv(i,new Float32Array(s));break;case 4:this.m_gl.uniform4fv(i,new Float32Array(s));break;case 9:this.m_gl.uniformMatrix3fv(i,!1,new Float32Array(s));break;case 16:this.m_gl.uniformMatrix4fv(i,!1,new Float32Array(s));break;default:throw"dont't know how to load uniform \""+r+'" of length '+s.length}else{if(!t.isNumber(s))throw'attempted to set uniform "'+r+'" to invalid value '+(s||"undefined").toString();this.m_gl.uniform1f(i,s)}}}return this},t.prototype.textures=function(t){for(var e in this.m_gl.useProgram(this.m_program),t)t.hasOwnProperty(e)&&this.m_gl.uniform1i(this.m_gl.getUniformLocation(this.m_program,e),t[e]);return this},t.prototype.drawRect=function(t,e){null==this.m_vertexBuffer&&(this.m_vertexBuffer=this.m_gl.createBuffer()),this.m_gl.bindBuffer(this.m_gl.ARRAY_BUFFER,this.m_vertexBuffer),this.m_gl.bufferData(this.m_gl.ARRAY_BUFFER,t,this.m_gl.STATIC_DRAW),null==this.m_texCoordBuffer&&(this.m_texCoordBuffer=this.m_gl.createBuffer()),this.m_gl.bindBuffer(this.m_gl.ARRAY_BUFFER,this.m_texCoordBuffer),this.m_gl.bufferData(this.m_gl.ARRAY_BUFFER,e,this.m_gl.STATIC_DRAW),null==this.m_vertexAttribute&&(this.m_vertexAttribute=this.m_gl.getAttribLocation(this.m_program,"vertex"),this.m_gl.enableVertexAttribArray(this.m_vertexAttribute)),null==this.m_texCoordAttribute&&(this.m_texCoordAttribute=this.m_gl.getAttribLocation(this.m_program,"_texCoord"),this.m_gl.enableVertexAttribArray(this.m_texCoordAttribute)),this.m_gl.useProgram(this.m_program),this.m_vertexAttribute=this.m_gl.getAttribLocation(this.m_program,"vertex"),this.m_gl.enableVertexAttribArray(this.m_vertexAttribute),this.m_gl.bindBuffer(this.m_gl.ARRAY_BUFFER,this.m_vertexBuffer),this.m_gl.vertexAttribPointer(this.m_vertexAttribute,2,this.m_gl.FLOAT,!1,0,0),this.m_texCoordAttribute=this.m_gl.getAttribLocation(this.m_program,"_texCoord"),this.m_gl.enableVertexAttribArray(this.m_texCoordAttribute),this.m_gl.bindBuffer(this.m_gl.ARRAY_BUFFER,this.m_texCoordBuffer),this.m_gl.vertexAttribPointer(this.m_texCoordAttribute,2,this.m_gl.FLOAT,!1,0,0),this.m_gl.drawArrays(this.m_gl.TRIANGLE_STRIP,0,4)},t.defaultVertexSource="        attribute vec2 vPosition;        varying vec2 textureCoordinate;        void main(){            textureCoordinate= (vPosition.xy + 1.0) / 2.0;            gl_Position=vec4(vPosition, 0.0, 1.0);        }",t.defaultFragmentSource="",t}(),w=function(){function t(t,e,r,i,s,a){this.m_gl=t,this.m_shader=r,this.m_cnt=0,this.m_width=0,this.m_height=0,this.m_framebuffer=null,null!=e?(this.m_width=e.m_width,this.m_height=e.m_height,this.m_framebuffer=e.m_frameBuffer):(i&&(this.m_width=i),s&&(this.m_height=s),a&&(this.m_framebuffer=a)),this.m_gl.useProgram(this.m_shader.m_program),null==this.m_gl.engineVertexBuffer&&(this.m_gl.engineVertexBuffer=this.m_gl.createBuffer()),this.m_gl.bindBuffer(this.m_gl.ARRAY_BUFFER,this.m_gl.engineVertexBuffer),this.m_gl.bufferData(this.m_gl.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,1,1,-1,1]),this.m_gl.STATIC_DRAW),this.m_shader.m_vertexAttribute=this.m_gl.getAttribLocation(this.m_shader.m_program,"vPosition"),this.m_gl.enableVertexAttribArray(this.m_shader.m_vertexAttribute),this.m_gl.vertexAttribPointer(this.m_shader.m_vertexAttribute,2,this.m_gl.FLOAT,!1,0,new Float32Array([-1,-1,1,-1,1,1,-1,1]));var o=this.m_gl.getError();if(o)throw Error("GPUProcess constructor: "+o)}return t.prototype.shader_texture=function(t,e){this.m_gl.activeTexture(this.m_gl.TEXTURE2+this.m_cnt),this.m_gl.bindTexture(this.m_gl.TEXTURE_2D,e);var r={};r[t]=2+this.m_cnt,this.m_shader.textures(r);var i=this.m_gl.getError();if(i)throw Error("GPUProcess shader texture: "+i);++this.m_cnt},t.prototype.draw_to=function(t){if(this.m_gl.bindFramebuffer(this.m_gl.FRAMEBUFFER,this.m_framebuffer),this.m_gl.framebufferTexture2D(this.m_gl.FRAMEBUFFER,this.m_gl.COLOR_ATTACHMENT0,this.m_gl.TEXTURE_2D,t,0),this.m_gl.checkFramebufferStatus(this.m_gl.FRAMEBUFFER)!=this.m_gl.FRAMEBUFFER_COMPLETE)throw Error("GPUProcess draw to check fb uncomplete");this.m_gl.viewport(0,0,this.m_width,this.m_height),this.m_gl.drawArrays(this.m_gl.TRIANGLE_FAN,0,4);var e=this.m_gl.getError();if(e)throw Error("GPUProcess draw to: "+e)},t}(),b=function(){function t(t){this.m_name=t}return t.prototype.init=function(t){throw new Error("Method not implemented.")},t.prototype.run=function(t){throw new Error("Method not implemented.")},t.prototype.shader_step=function(){throw new Error("Method not implemented.")},t.prototype.sendUniform=function(t,e){throw new Error("Method not implemented.")},t}(),z=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_amount=0,r}return s(e,t),e.create=function(){return new e},e.prototype.init=function(t){this.m_amount=t.fetch_float()},e.prototype.run=function(t){for(var e=0;e<256;++e){var r=t[e];if(0!=this.m_amount){var i;i=1.41421/this.m_amount,r=this.m_amount>0?1-r-i/1.41421+Math.sqrt(1-1.4121*i+2.82842*r*i+.5*i*i):1-r-i/1.41421-Math.sqrt(1-1.41421*i+2.82842*r*i+.5*i*i)}t[e]=Math.min(r,1)}},e.formluaName="brightness",e}(b),T=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_amount=0,r}return s(e,t),e.create=function(){return new e},e.prototype.init=function(t){this.m_amount=t.fetch_float()},e.prototype.run=function(t){for(var e=0;e<256;++e){var r=t[e];r=(r-.5)*this.m_amount+.5,t[e]=r,t[e]=Math.max(0,Math.min(r,1))}},e.formluaName="contrast",e}(b),E=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_amount=0,r}return s(e,t),e.create=function(){return new e},e.prototype.init=function(t){this.m_amount=t.fetch_float()},e.prototype.run=function(t){for(var e=0;e<256;++e){var r=t[e];r*=Math.pow(2,this.m_amount),t[e]=r,t[e]=Math.max(0,Math.min(r,1))}},e.formluaName="exposure",e}(b),C=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_amount=0,r}return s(e,t),e.create=function(){return new e},e.prototype.init=function(t){this.m_amount=t.fetch_float(),this.m_amount=50*this.m_amount+50},e.prototype.run=function(t){var e,r,i,s,a;i=.6,s=.96,this.m_amount<25?(e=.24*(a=this.m_amount/25)+.39,r=(.52-.235)*a+.235):this.m_amount<50?(e=.37*(a=(this.m_amount-25)/25)+.63,r=.48*a+.52):this.m_amount<75?(e=(1.6-1)*(a=(this.m_amount-50)/25)+1,r=1*a+1,i=-.25*a+.6,s=(.85-.96)*a+.96):(e=1*(a=(this.m_amount-75)/25)+1.6,r=2.3*a+2,i=(.2-.35)*a+.35,s=(.65-.85)*a+.85);for(var o=(1-e*i)/Math.pow(1-i,r),n=1-Math.pow(1-s,r)*(1-e*i)/Math.pow(1-i,r),_=0;_<256;++_){var m=t[_],h=e*m,c=1-Math.pow(1-m,r)*o,l=(m-s)/(.997-s),u=n*(1-l)+l;m=e>1?Math.min(Math.min(h,c),u):Math.max(Math.max(h,c),u),t[_]=m,t[_]=Math.min(Math.max(m,0),1)}},e.formluaName="brightnessPS",e}(b),S=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_amount=0,r}return s(e,t),e.create=function(){return new e},e.prototype.init=function(t){this.m_amount=t.fetch_float()},e.prototype.run=function(t){for(var e,r,i=16*(e=.4+.012*this.m_amount)+8*(r=1.6-.012*this.m_amount)-24,s=10-2*r-8*e,a=0;a<256;++a){var o=t[a];o=((i*(o-=.5)*o+s)*o*o+e)*o+.5,t[a]=Math.max(0,Math.min(o,1))}},e.formluaName="contrastPS",e}(b),M=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_amount=0,r}return s(e,t),e.create=function(){return new e},e.prototype.init=function(t){this.m_amount=t.fetch_float(),this.m_amount=25*(this.m_amount+2)},e.prototype.run=function(t){var e,r;e=Math.pow(1.775415,(this.m_amount-50)/10),r=Math.pow(1.643751,(this.m_amount-50)/10);for(var i=0;i<256;++i){var s=t[i],a=1-Math.pow(1.01-s,e),o=1-.55*Math.pow(1.01-s,r);s=Math.min(a,o),t[i]=s,t[i]=Math.max(0,Math.min(s,1))}},e.formluaName="exposurePS",e}(b),D=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_dark=0,r.m_light=0,r.m_gamma=0,r}return s(e,t),e.create=function(){return new e},e.prototype.init=function(t){this.m_dark=Math.max(t.fetch_float(),0),this.m_light=Math.min(t.fetch_float(),1),this.m_gamma=t.fetch_float()},e.prototype.run=function(t){for(var e=1/(this.m_light-this.m_dark+1e-4),r=0;r<256;++r){var i=t[r];i=(i-this.m_dark)*e,i=Math.max(0,i),i=Math.pow(i,this.m_gamma),i=Math.min(1,i),t[r]=i,t[r]=Math.min(i,1)}},e.formluaName="level",e}(b),R=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_shadow=0,r.m_highlight=0,r.m_l=0,r.m_d=0,r}return s(e,t),e.create=function(){return new e},e.prototype.init=function(t){this.m_shadow=t.fetch_float(),this.m_highlight=t.fetch_float(),this.m_shadow>0&&(this.m_shadow*=.68),this.m_shadow=Math.tan(.007853975*(this.m_shadow+100)),this.m_highlight=-this.m_highlight,this.m_highlight>0&&(this.m_highlight*=.68),this.m_highlight=Math.tan(.007853975*(this.m_highlight+100)),this.m_l=this.m_highlight,this.m_d=this.m_shadow},e.prototype.run=function(t){for(var e=0;e<256;e++){var r=t[e];r=r<.5?4*(this.m_d-1)*r*r*r+4*(1-this.m_d)*r*r+this.m_d*r:4*(this.m_l-1)*r*r*r+8*(1-this.m_l)*r*r+(5*this.m_l-4)*r+1-this.m_l,t[e]=r,t[e]=Math.max(0,Math.min(r,1))}},e.formluaName="shadowHighlight",e}(b),A=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_amount=0,r}return s(e,t),e.create=function(){return new e},e.prototype.shader_step=function(){return"varying vec2 textureCoordinate;        uniform sampler2D inputChromeMap;        uniform float is;                float get_sat(float red,float blue)        {            float sr = red/(-0.299);            float sb = blue/(-0.114);            float sg = (red+blue)/(0.587);            return max(sr,max(sb,sg));            return sr;                    }                void main()        {\t\t            vec4 src = texture2D(inputChromeMap, textureCoordinate);            float red = src.r-0.299;            float blue = src.b-0.114;            float sat = get_sat(red,blue);            float mul = is;            if(mul>2.0)            {                float p1 = (sat-3.0)*sat+3.0;                mul = p1*(mul-2.0) + (2.0-sat)*(3.0-mul);            }            else if(mul>1.0)            {                mul = (2.0-sat)*(mul-1.0) + (2.0-mul);            }            vec4 dst = vec4(red*mul+0.299,0.0,blue*mul+0.114,1.0);                        gl_FragColor = dst;        }"},e.prototype.sendUniform=function(t,e){var r=e.fetch_float(),i={};i.is=r,t.m_shader.uniforms(i)},e.formluaName="saturate",e}(b),I=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_amount=0,r}return s(e,t),e.create=function(){return new e},e.prototype.shader_step=function(){return"varying vec2 textureCoordinate;        uniform sampler2D inputChromeMap;        uniform float rr;        uniform float bb;                float get_sat(float red,float blue)        {            float sr = red/(-0.299);            float sb = blue/(-0.114);            float sg = (red+blue)/(0.587);            return max(sr,max(sb,sg));            return sr;                    }                        void main()        {\t\t            vec4 src = texture2D(inputChromeMap, textureCoordinate);            float red = src.r-0.299;            float blue = src.b-0.114;            red = red +rr;            blue = blue +bb;            blue = max(min(0.91137695,blue),-0.91137695);            float sat = get_sat(red,blue);            if(sat >1.0)            {                red = red/sat;                blue = blue/sat;            }            vec4 dst = vec4(red+0.299,0.0,blue+0.114,1.0);                        gl_FragColor = dst;        }"},e.prototype.sendUniform=function(t,e){var r=3*e.fetch_float()/1e3,i=3*e.fetch_float()/1e3,s={};s.rr=r,s.bb=i,t.m_shader.uniforms(s)},e.formluaName="RGB",e}(b),k=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_amount=0,r}return s(e,t),e.create=function(){return new e},e.prototype.shader_step=function(){return"varying vec2 textureCoordinate;        uniform sampler2D inputChromeMap;        uniform vec4 m;        uniform float psv;                float get_sat(float red,float blue)        {            float sr = red/(-0.299);            float sb = blue/(-0.114);            float sg = (red+blue)/(0.587);            return max(sr,max(sb,sg));            return sr;                    }                        void main()        {\t\t            vec4 src = texture2D(inputChromeMap, textureCoordinate);            float red = src.r-0.299;            float blue = src.b-0.114;            float sat = get_sat(red,blue);            sat = min(sat,1.0);            float tr = red*m.x+blue*m.y;            float tb = red*m.z+blue*m.w;            red = tr;            blue = tb;            blue = max(min(0.91137,blue),-0.91137);            float nsat = get_sat(red,blue);            sat = nsat*psv + sat*(1.0 -psv);            if(nsat/2.0 >sat){                sat = nsat/2.0;            }            sat = min(sat,1.0);            float mul = sat/nsat;            mul = min(mul,2.0);            vec4 dst = vec4(red*mul+0.299,0.0,blue*mul+0.114,1.0);            gl_FragColor = dst;        }"},e.prototype.sendUniform=function(t,e){var r=e.fetch_float()/180*3.1415926535,i=[];i[0]=Math.cos(r),i[1]=Math.sin(r),i[2]=-Math.sin(r),i[3]=Math.cos(r);var s=.25;e.check_symbol("factor")&&(s=e.fetch_float());var a={};a.m=i,a.psv=s,t.m_shader.uniforms(a)},e.formluaName="hue",e}(b),F=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_amount=0,r}return s(e,t),e.create=function(){return new e},e.prototype.shader_step=function(){return"varying vec2 textureCoordinate;        uniform sampler2D inputChromeMap;        uniform float r;        uniform float b;        uniform float w;                float get_sat(float red,float blue)        {            float sr = red/(-0.299);            float sb = blue/(-0.114);            float sg = (red+blue)/(0.587);            return max(sr,max(sb,sg));            return sr;                    }                        void main()        {\t\t            vec4 src = texture2D(inputChromeMap, textureCoordinate);            float red = src.r-0.299;            float blue = src.b-0.114;            float cr = red;            float cb = blue;            float n = 1.0/sqrt(cr*cr+cb*cb);            cr *=n;            cb *=n;            float vp = cr * r + cb * b;                        float fac;            if(vp>0.0)            {                float vs = (cr * b - cb * r) * w;                fac = vp / (vp * vp + vs * vs);            }            else            {                fac = 0.0;            }                        vec4 dst = vec4(red*fac+0.299,0.0,blue*fac+0.114,1.0);            gl_FragColor = dst;        }"},e.prototype.sendUniform=function(t,e){var r=e.fetch_float(0,1);r=Math.pow(20,1-r);var i=0,s=0;if(0==e.lookup_symbol(["hue","color",0],!0)){var a=e.fetch_float();a=a/180*3.1415,i=Math.sin(a),s=Math.cos(a)}else{var o=.299*e.fetch_float(0,256);o=this.encode(o),o*=.299;var n=.587*e.fetch_float(0,256);n=this.encode(n),n*=.587;var _=.114*e.fetch_float(0,256);_=this.encode(_);var m=1/(o+n+(_*=.114)+.00256);n*=m,i=(o*=m)-.299,s=(_*=m)-.114,i*=m=1/Math.sqrt(i*i+s*s),s*=m}var h={};h.w=r,h.r=i,h.b=s,t.m_shader.uniforms(h)},e.prototype.encode=function(t){var e=(t+.5)*(1/256);return 256*(e=e<.04045?e/12.92:Math.pow((e+.055)/1.055,2.4))+.5},e.formluaName="singleColor",e}(b),P=function(t){function e(){var r=t.call(this,e.formluaName)||this;return r.m_dark=0,r.m_light=0,r}return s(e,t),e.create=function(){return new e},e.prototype.init=function(t){this.m_dark=t.fetch_float(),this.m_light=t.fetch_float()},e.prototype.run=function(t){if(!(this.m_dark>=0&&this.m_light<=1))for(var e=Math.max(0,-this.m_dark),r=Math.max(0,this.m_light-1),i=0;i<256;++i){var s=t[i];s=(s=s*(1-r)+(s<221/256?-.1605*s*s+1.0345*s:9.2648*s*s-15.6057*s+7.341)*r)*(1-e)+(s<.5?-.84*s*s+1.558*s:.86*s+.14)*e,s=Math.max(0,s),t[i]=Math.min(s,1)}},e.formluaName="levelH",e}(b),N=function(){function t(){}return t.prototype.fmix=function(t,e,r){return Math.min(Math.max(t*(1-r)+e*r,0),255)},t}(),q=function(t){function e(){return t.call(this)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, src2, alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,e,r)},e}(N),B=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, min(src1,src2), alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,t<e?t:e,r)},e}(N),U=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, max(src1,src2), alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,t<e?e:t,r)},e}(N),L=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, src1 * src2, alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,t*e,r)},e}(N),O=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, src1 + src2 - src1 * src2, alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,t+e-t*e,r)},e}(N),G=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, min(src1 + (src1 * src2) / (1.0 - src2), 1.0), alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,Math.min(1,t+t*e/(1-e)),r)},e}(N),j=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, 1.0 - min((1.0 - src1) / (src2 + 0.00003), 1.0), alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,1-Math.min((1-t)/(e+3e-5),1),r)},e}(N),X=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, min(src1 + src2, 1.0), alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,Math.min(t+e,1),r)},e}(N),H=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, max(src1 + src2 - 1.0, 0.0), alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,Math.max(t+e-1,0),r)},e}(N),V=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    if(src1.r < 0.5)                        src2.r = (src1.r * src2.r) * 2.0;                    else src2.r = (src1.r + src2.r) * 2.0 - (src1.r * src2.r) * 2.0 - 1.0;                    if(src1.g < 0.5)                        src2.g = (src1.g * src2.g) * 2.0;                    else src2.g = (src1.g + src2.g) * 2.0 - (src1.g * src2.g) * 2.0 - 1.0;                    if(src1.b < 0.5)                        src2.b = (src1.b * src2.b) * 2.0;                    else src2.b = (src1.b + src2.b) * 2.0 - (src1.b * src2.b) * 2.0 - 1.0;                    return mix(src1, src2, alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,t<.5?t*e*2:2*(t+e-t*e)-1,r)},e}(N),W=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    if(src2.r < 0.5)                        src2.r = (src1.r * src2.r) * 2.0;                    else src2.r = (src1.r + src2.r) * 2.0 - (src1.r * src2.r) * 2.0 - 1.0;                    if(src2.g < 0.5)                        src2.g = (src1.g * src2.g) * 2.0;                    else src2.g = (src1.g + src2.g) * 2.0 - (src1.g * src2.g) * 2.0 - 1.0;                    if(src2.b < 0.5)                        src2.b = (src1.b * src2.b) * 2.0;                    else src2.b = (src1.b + src2.b) * 2.0 - (src1.b * src2.b) * 2.0 - 1.0;                    return mix(src1, src2, alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,e<.5?t*e*2:2*(t+e-t*e)-1,r)},e}(N),Y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    if(src2.r < 0.5)                        src2.r = (src2.r * 2.0 - 1.0) * (src1.r - (src1.r * src1.r)) + src1.r;                    else src2.r = ((src2.r * 2.0 - 1.0) * (sqrt(src1.r) - src1.r)) + src1.r;                    if(src2.g < 0.5)                        src2.g = (src2.g * 2.0 - 1.0) * (src1.g - (src1.g * src1.g)) + src1.g;                    else src2.g = ((src2.g * 2.0 - 1.0) * (sqrt(src1.g) - src1.g)) + src1.g;                    if(src2.b < 0.5)                        src2.b = (src2.b * 2.0 - 1.0) * (src1.b - (src1.b * src1.b)) + src1.b;                    else src2.b = ((src2.b * 2.0 - 1.0) * (sqrt(src1.b) - src1.b)) + src1.b;                    return mix(src1, src2, alpha);                }"},e.prototype.run_float=function(t,e,r){var i;return i=e<.5?(2*e-1)*(t-t*t)+t:(2*e-1)*(Math.sqrt(t)-t)+t,this.fmix(t,i,r)},e}(N),J=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    src2.r = src2.r < 0.5 ? 1.0 - (1.0 - src1.r) / (src2.r * 2.0) : src1.r / (1.0 - src2.r) * 0.5;                    src2.g = src2.g < 0.5 ? 1.0 - (1.0 - src1.g) / (src2.g * 2.0) : src1.g / (1.0 - src2.g) * 0.5;                    src2.b = src2.b < 0.5 ? 1.0 - (1.0 - src1.b) / (src2.b * 2.0) : src1.b / (1.0 - src2.b) * 0.5;                    return mix(src1, clamp(src2, 0.0, 1.0) , alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,e<.5?1-(1-t)/(2*e):t/(1-e)*.5,r)},e}(N),Q=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, clamp(src1 + src2 * 2.0 - 1.0, 0.0, 1.0), alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,t+2*e-1,r)},e}(N),K=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    src2 *= 2.0;                    if(src2.r > src1.r)                    {                        src2.r = src2.r - 1.0;                        if(src2.r < src1.r)                            src2.r = src1.r;                    }                    if(src2.g > src1.g)                    {                        src2.g = src2.g - 1.0;                        if(src2.g < src1.g)                            src2.g = src1.g;                    }                    if(src2.b > src1.b)                    {                        src2.b = src2.b - 1.0;                        if(src2.b < src1.b)                            src2.b = src1.b;                    }                    return mix(src1, src2, alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,this.pf(t,e),r)},e.prototype.pf=function(t,e){return(e*=2)>t&&((e-=1)<t&&(e=t)),e},e}(N),Z=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, step(1.0 - src1, src2), alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,e<1-t?0:1,r)},e}(N),$=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, abs(src1 - src2), alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,Math.abs(t-e),r)},e}(N),tt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, src1 + src2 - src1 * src2 * 2.0, alpha);                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,t+e-2*t*e,r)},e}(N),et=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return src1 + src2 * alpha;                }"},e.prototype.run_float=function(t,e,r){return this.fmix(t,t+e,r)},e}(N),rt=function(){function t(t){this.m_curve=t}return t.prototype.runself=function(t,e,r,i){for(var s=i*=.01,a=0;a<256;++a){var o=t[a],n=e[a],_=r[a];o=this.m_curve.run_float(o,o,s),n=this.m_curve.run_float(n,n,s),_=this.m_curve.run_float(_,_,s),t[a]=o,e[a]=n,r[a]=_}},t.prototype.run=function(t,e,r,i,s,a,o,n,_){i=(i+.5)*(1/256),s=(s+.5)*(1/256),a=(a+.5)*(1/256),o*=1/255,o*=n*=.01;for(var m=0;m<256;++m){var h=t[m],c=e[m],l=r[m];_?(h=this.m_curve.run_float(i,h,o),c=this.m_curve.run_float(s,c,o),l=this.m_curve.run_float(a,l,o)):(h=this.m_curve.run_float(h,i,o),c=this.m_curve.run_float(c,s,o),l=this.m_curve.run_float(l,a,o)),t[m]=h,e[m]=c,r[m]=l}},t.mixModeMap=new Map([["opacity",new t(new q)],["darken",new t(new B)],["lighten",new t(new U)],["multiply",new t(new L)],["screen",new t(new O)],["colorDodge",new t(new G)],["colorBurn",new t(new j)],["linearDodge",new t(new X)],["linearBurn",new t(new H)],["hardLight",new t(new W)],["softLight",new t(new Y)],["vividLight",new t(new J)],["linearLight",new t(new Q)],["pinLight",new t(new K)],["hardMix",new t(new Z)],["difference",new t(new $)],["exclude",new t(new tt)],["add",new t(new et)],["overlay",new t(new V)]]),t}(),it=function(){function t(t){this.m_shader=new Array(5),this.m_shader_list=new Array,this.m_curve=t;this.m_shader_list=["varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;            uniform sampler2D blendTexture;            uniform float opacity;            uniform vec4 trans;            uniform float flag;                        %s                        void main()            {                vec4 src = texture2D(inputImageTexture, textureCoordinate);                                vec2 cod = textureCoordinate*trans.xy + trans.zw;                                                cod = clamp(cod - floor(cod)*flag, 0.0, 1.0);                vec4 dst = texture2D(blendTexture, cod);                gl_FragColor = vec4(blend(src.rgb, dst.rgb, dst.a * opacity), src.a);            }","varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;            uniform sampler2D blendTexture;            uniform sampler2D alphaTexture;            uniform vec4 trans;            uniform float flag;                        %s                        void main()            {                vec4 src = texture2D(inputImageTexture, textureCoordinate);                                vec2 cod = textureCoordinate*trans.xy + trans.zw;                                cod = clamp(cod - floor(cod)*flag, 0.0, 1.0);                                float a = texture2D(alphaTexture, cod).g;                vec4 dst = texture2D(blendTexture, textureCoordinate);                gl_FragColor = vec4(blend(src.rgb, dst.rgb, a), src.a);            }","varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;            uniform sampler2D blendTexture;            uniform float opacity;            uniform float reOpacity;                        %s                        void main()            {                vec4 src = texture2D(inputImageTexture, textureCoordinate);                vec4 dst = texture2D(blendTexture, textureCoordinate);                vec3 dst2 = src.rgb*(1.0-dst.a*opacity)+dst.rgb*opacity;                if(reOpacity>1.0)                    gl_FragColor =vec4(dst2,src.a);                else                    gl_FragColor = vec4(blend(src.rgb, dst.rgb, dst.a* opacity), src.a);            }","varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;            uniform sampler2D blendTexture;            uniform float opacity;                        %s                        void main()            {                vec4 src = texture2D(inputImageTexture, textureCoordinate);                vec4 dst = texture2D(blendTexture, textureCoordinate);                gl_FragColor = vec4(blend(src.rgb, dst.rgb, opacity), src.a);            }","varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;            uniform sampler2D blendTexture;            uniform sampler2D alphaTexture;            uniform vec4 trans;            uniform float flag;                        %s                        void main()            {                vec4 src = texture2D(inputImageTexture, textureCoordinate);                                vec4 dst = texture2D(blendTexture, textureCoordinate);                                float a = texture2D(alphaTexture, textureCoordinate).w;                                                gl_FragColor = vec4(blend(src.rgb, dst.rgb, a), src.a);            }","varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;            uniform sampler2D blendTexture;            uniform sampler2D alphaTexture;            uniform vec4 trans;            uniform float opacity;                        %s                        void main()            {                vec2 coord = textureCoordinate*trans.xy+trans.zw;                                vec4 src = texture2D(inputImageTexture, coord);                                vec4 dst = texture2D(blendTexture, coord);                                float a = texture2D(alphaTexture, coord).w*opacity;                                                gl_FragColor =vec4(mix(src.rgb,dst.rgb,1.0-a),src.a);            }"]}return t.prototype.check_shader=function(t,e){if(!this.m_shader[t]){var r=this.m_shader_list[t].replace(/%s/g,this.m_curve.shader_string());this.m_shader[t]=new y(null,r,e)}return this.m_shader[t]},t.prototype.destroy=function(){this.m_shader.forEach((function(t){t&&t.destroy()}))},t}(),st=function(){function t(){}return t.CreateBlendMap=function(){return new Map([["opacity",new it(new q)],["darken",new it(new B)],["lighten",new it(new U)],["multiply",new it(new L)],["screen",new it(new O)],["colorDodge",new it(new G)],["colorBurn",new it(new j)],["linearDodge",new it(new X)],["linearBurn",new it(new H)],["hardLight",new it(new W)],["softLight",new it(new Y)],["vividLight",new it(new J)],["linearLight",new it(new Q)],["pinLight",new it(new K)],["hardMix",new it(new Z)],["difference",new it(new $)],["exclude",new it(new tt)],["add",new it(new et)],["overlay",new it(new V)]])},t}(),at=function(){function t(t){this.m_name=t}return t.prototype.luminance=function(t,e){},t.prototype.color=function(t,e,r,i){},t.prototype.shader_process=function(t,e,r,i,s){return!1},t.prototype.destroy=function(){},t}(),ot=function(t){function e(e){var r=t.call(this,e.m_name)||this;return r.m_curve=e,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.luminance=function(t,e){this.m_curve.init(t),this.m_curve.run(e)},e.prototype.color=function(t,e,r,i){this.m_curve.init(t),this.m_curve.run(e),this.m_curve.run(r),this.m_curve.run(i)},e}(at),nt=function(t){function e(){var r=t.call(this,e.pairName)||this;return r.m_temp=0,r.m_tint=0,r.m_color=new Array(3),r}return s(e,t),e.create=function(){return new e},e.prototype.luminance=function(t,e){t.error("invalid curve operation",["mixSelf"])},e.prototype.color=function(t,e,r,i){this.m_temp=0,this.m_tint=0,this.m_color=new Array(3),this.init(t),this.run(e,r,i)},e.prototype.init=function(t){var e;this.m_temp=5400*t.fetch_float()+6500,this.m_tint=t.fetch_float(),this.m_temp<1200?this.m_temp=1200:this.m_temp>12e3&&(this.m_temp=12e3),this.m_tint<.02?this.m_tint=.02:this.m_tint>5&&(this.m_tint=5),this.m_temp/=1e3;var r=-3*(e=this.m_temp<4?.27475/(this.m_temp*this.m_temp*this.m_temp)-.98598/(this.m_temp*this.m_temp)+1.17444/this.m_temp+.145986:this.m_temp<7?-4.607/(this.m_temp*this.m_temp*this.m_temp)+2.9678/(this.m_temp*this.m_temp)+.09911/this.m_temp+.244063:-2.0064/(this.m_temp*this.m_temp*this.m_temp)+1.9018/(this.m_temp*this.m_temp)+.24748/this.m_temp+.23704)*e+2.87*e-.275,i=e/r,s=(1-e-r)/r;this.m_color[0]=3.24074*i-1.53726-.498571*s,this.m_color[1]=.969258*-i+1.87599+.0415557*s,this.m_color[2]=.0556352*i-.203996+1.05707*s,this.m_color[1]/=this.m_tint;for(var a=Math.max(Math.max(this.m_color[0],this.m_color[1]),this.m_color[2]),o=0;o<3;++o)this.m_color[o]/=a,this.m_color[o]=1/this.m_color[o];for(var n=.299*this.m_color[0]+.587*this.m_color[1]+.114*this.m_color[2],_=0;_<3;++_)this.m_color[_]/=n},e.prototype.run=function(t,e,r){for(var i=0;i<256;++i)t[i]=t[i]*this.m_color[0],e[i]=e[i]*this.m_color[1],r[i]=r[i]*this.m_color[2]},e.pairName="whiteBalance",e}(at),_t=function(t){function e(){var r=t.call(this,e.pairName)||this;return r.m_xs=new Array,r.m_ys=new Array,r}return s(e,t),e.create=function(){return new e},e.prototype.luminance=function(t,e){this.init(t),this.run(e)},e.prototype.color=function(t,e,r,i){for(var s=["red","green","blue","rgb"],a=-1;-1!=(a=t.lookup_symbol(s));)switch(this.m_xs=[],this.m_ys=[],this.init(t),a){case 0:this.run(e);break;case 1:this.run(r);break;case 2:this.run(i);break;case 3:this.run(e),this.run(r),this.run(i)}},e.prototype.run=function(t){var e=this.m_xs.length,r=new Array(e-1),i=new Array(e);i[0]=r[0]=0;for(var s=1;s!=e-1;++s){var a=(this.m_xs[s]-this.m_xs[s-1])/(this.m_xs[s+1]-this.m_xs[s-1]),o=a*i[s-1]+2;i[s]=(a-1)/o,r[s]=(this.m_ys[s+1]-this.m_ys[s])/(this.m_xs[s+1]-this.m_xs[s])-(this.m_ys[s]-this.m_ys[s-1])/(this.m_xs[s]-this.m_xs[s-1]),r[s]=(6*r[s]/(this.m_xs[s+1]-this.m_xs[s-1])-a*r[s-1])/o}for(i[e-1]=0,s=e-2;s>=0;--s)i[s]=i[s]*i[s+1]+r[s];var n=-1,_=0;for(s=0;s<256;++s){for(var m=t[s];_<e&&m>this.m_xs[_];)n=_,++_;if(_!=e)if(-1!=n){var h=this.m_xs[_]-this.m_xs[n],c=(this.m_xs[_]-m)/h,l=(m-this.m_xs[n])/h,u=c*this.m_ys[n]+l*this.m_ys[_]+((c*c*c-c)*i[n]+(l*l*l-l)*i[_])*(h*h)/6;t[s]=Math.max(0,Math.min(u,1))}else t[s]=Math.max(0,Math.min(this.m_ys[0],1));else t[s]=Math.max(0,Math.min(this.m_ys[e-1],1))}},e.prototype.sort_points=function(){for(var t=0;t<this.m_xs.length;++t)for(var e=t+1;e<this.m_xs.length;++e)if(this.m_xs[t]>this.m_xs[e]){var r=void 0;r=this.m_xs[t],this.m_xs[t]=this.m_xs[e],this.m_xs[e]=r,r=this.m_ys[t],this.m_ys[t]=this.m_ys[e],this.m_ys[e]=r}},e.prototype.init=function(t){for(this.m_xs=[],this.m_ys=[];t.test_symbol("point");){var e=t.fetch_float()*(1/255);this.m_xs.push(e);var r=t.fetch_float()*(1/255);this.m_ys.push(r)}this.sort_points(),this.m_xs.length<2&&t.error("more than 2 points needed")},e.pairName="graph",e}(at),mt=function(t){function e(){var r=t.call(this,e.pairName)||this;return r.m_mode="",r.m_opacity=0,r}return s(e,t),e.create=function(){return new e},e.prototype.luminance=function(t,e){t.error("invalid curve operation",["mixSelf"])},e.prototype.color=function(t,e,r,i){this.init(t);var s=rt.mixModeMap.get(this.m_mode);if(!s)throw new Error("can't find mix mode "+this.m_mode);s.runself(e,r,i,this.m_opacity)},e.prototype.init=function(t){this.m_mode=t.fetch_symbol(),this.m_opacity=t.fetch_float()},e.pairName="mixSelf",e}(at),ht=function(t){function e(){var r=t.call(this,e.pairName)||this;return r.m_mode="",r.m_red=r.m_green=r.m_bule=r.m_alpha=r.m_opacity=0,r.m_swap=!1,r}return s(e,t),e.create=function(){return new e},e.prototype.luminance=function(t,e){t.error("invalid curve operation",["mixSelf"])},e.prototype.color=function(t,e,r,i){this.init(t);var s=rt.mixModeMap.get(this.m_mode);if(!s)throw new Error("can't find mix mode "+this.m_mode);s.run(e,r,i,this.m_red,this.m_green,this.m_bule,this.m_alpha,this.m_opacity,this.m_swap)},e.prototype.init=function(t){this.m_mode=t.fetch_symbol(),this.m_red=t.fetch_float(),this.m_green=t.fetch_float(),this.m_bule=t.fetch_float(),this.m_alpha=t.fetch_float(),this.m_opacity=t.fetch_float(),t.test_symbol("swap")?this.m_swap=!0:this.m_swap=!1},e.pairName="mixColor",e}(at),ct=function(t){function e(e){var r=t.call(this,e.m_name)||this;return r.m_chrome=e,r.m_shader=null,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_chrome.shader_step(),e));var a=new w(e,null,this.m_shader,256,256,s);if(a.shader_texture("inputChromeMap",r),this.m_chrome.sendUniform(a,t),a.draw_to(i),e.getError())throw"curveFormula";return!0},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(at),lt=function(){function t(){var e,r,i,s;this.m_map=new Map;try{for(var o=a(t.formulaPairList.keys()),n=o.next();!n.done;n=o.next()){var _=n.value;this.m_map.set(_,null)}}catch(t){e={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}try{for(var m=a(t.formulaPairListNoArg.keys()),h=m.next();!h.done;h=m.next())_=h.value,this.m_map.set(_,null)}catch(t){i={error:t}}finally{try{h&&!h.done&&(s=m.return)&&s.call(m)}finally{if(i)throw i.error}}}return t.prototype.get_formula_Item_with_symbol=function(e){if(!this.m_map.has(e))throw new Error("get_formula_Item_with_symbol "+e);var r=this.m_map.get(e);if(r)return r;var i=t.formulaPairList.get(e);if(i){var s=t.formulaList.get(e);if(!s)throw new Error("can't find formula of arg "+e);return r=i(s()),this.m_map.set(e,r),r}var a=t.formulaPairListNoArg.get(e);if(a)return r=a(),this.m_map.set(e,r),r;throw new Error("can't find formula of symbol "+e)},t.prototype.destroy=function(){var t=this.m_map.get(A.formluaName);t&&t.destroy(),(t=this.m_map.get(I.formluaName))&&t.destroy(),(t=this.m_map.get(k.formluaName))&&t.destroy(),(t=this.m_map.get(F.formluaName))&&t.destroy()},t.formulaPairListNoArg=new Map([[nt.pairName,nt.create],[_t.pairName,_t.create],[mt.pairName,mt.create],[ht.pairName,ht.create]]),t.formulaPairList=new Map([[z.formluaName,ot.create],[T.formluaName,ot.create],[E.formluaName,ot.create],[C.formluaName,ot.create],[S.formluaName,ot.create],[M.formluaName,ot.create],[D.formluaName,ot.create],[R.formluaName,ot.create],[A.formluaName,ct.create],[I.formluaName,ct.create],[k.formluaName,ct.create],[F.formluaName,ct.create],[P.formluaName,ot.create]]),t.formulaList=new Map([[z.formluaName,z.create],[T.formluaName,T.create],[E.formluaName,E.create],[C.formluaName,C.create],[S.formluaName,S.create],[M.formluaName,M.create],[D.formluaName,D.create],[R.formluaName,R.create],[A.formluaName,A.create],[I.formluaName,I.create],[k.formluaName,k.create],[F.formluaName,F.create],[P.formluaName,P.create]]),t}(),ut=function(){function t(t){this.m_context=t,this.m_chrome=null,this.m_curve=new Array(256),this.m_data=new Array(1024),this.m_tex_num=0,this.m_curve_tex=0,this.m_formula_list=null,this.m_shader=null,this.m_init_shader=null,this.m_chrome_shader=0,this.m_initChromeTemplate="\t            varying vec2 textureCoordinate;                                    void main()            {                gl_FragColor = vec4(textureCoordinate.x,0.0,textureCoordinate.y,1.0);            }",this.m_fshToneCurveTemplate="\t            varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;                        uniform sampler2D curve;            uniform sampler2D chrome;                        vec3 color_limite(vec3 src,float lum)            {                vec3 vl = vec3(lum);                                vec3 vc = src - vl;                                vec3 fac = min((vec3(1.0) - vl) / max(vc,vec3(0.00001)),vec3(1.0));                                vc = vc * vec3(min(fac.r,min(fac.g,fac.b)));                                return vl + vc;            }                        void main()            {                vec4 src = texture2D(inputImageTexture, textureCoordinate);                vec4 dst;                {                                        vec3 lsrc = max(src.rgb * vec3(1.0 / 12.82),pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055),vec3(2.4)));                                        vec3 csrc = lsrc * vec3(0.299,0.587,0.114);                                        float lum = csrc.r + csrc.g + csrc.b;                                        csrc /= vec3(lum+0.00001);                                        {                        float lv  = min(lum * 12.82,pow(lum,(1.0 / 2.4)) * 1.055 - 0.055);                        float lvn = texture2D(curve, vec2(lv,0.5)).g;                        lum = max(lvn * (1.0 / 12.82),pow((lvn + 0.055) * (1.0 / 1.055),2.4));                    }                                        {                        csrc.rb = texture2D(chrome, vec2(csrc.r,csrc.b)).rb;                                                csrc.g = 1.0 - csrc.r - csrc.b;                    }                                        csrc *= vec3(lum +0.00001);                                        lsrc = csrc * vec3(1.0/0.299,1.0/0.587,1.0/0.114);                                        lsrc = color_limite(lsrc,lum);                    src.rgb = min(lsrc * 12.82,pow(lsrc,vec3(1.0 / 2.4)) * vec3(1.055) - vec3(0.055));                                        dst = src;                }                                gl_FragColor = dst;            }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.init(t,r.m_frameBuffer),this.m_shader||(this.m_shader=new y(null,this.m_fshToneCurveTemplate,this.m_context.context()));var i=new w(this.m_context.context(),r,this.m_shader);i.shader_texture("inputImageTexture",e.current()),this.shader_setup(i),i.draw_to(e.new_temporary());var s=this.m_context.context().getError();if(s)throw"toneCurve "+s;e.push_to_current()}catch(t){throw"toneCurve process: "+t}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null),this.m_init_shader&&(this.m_init_shader.destroy(),this.m_init_shader=null),this.m_chrome&&(this.m_context.context().deleteTexture(this.m_chrome[0]),this.m_context.context().deleteTexture(this.m_chrome[1]),this.m_chrome[0]=null,this.m_chrome[1]=null),this.m_curve_tex&&this.m_context.context().deleteTexture(this.m_curve_tex),this.m_formula_list&&this.m_formula_list.destroy()},t.prototype.init=function(t,e){for(var r=0;r<256;++r)this.m_curve[r]=(r+.5)*(1/256);this.m_chrome||(this.m_chrome=new Array(2),this.m_chrome[0]=this.m_context.create_new_texture(256,256),this.m_chrome[1]=this.m_context.create_new_texture(256,256)),this.m_init_shader||(this.m_init_shader=new y(null,this.m_initChromeTemplate,this.m_context.context())),new w(this.m_context.context(),null,this.m_init_shader,256,256,e).draw_to(this.m_chrome[0]),this.m_tex_num=0;do{var i=t.fetch_symbol();this.m_formula_list||(this.m_formula_list=new lt);var s=this.m_formula_list.get_formula_Item_with_symbol(i);if(s&&s.color!={}||t.error("invalid curve process name",[i]),null!=s.luminance&&s.luminance(t,this.m_curve),null!=s.shader_process){var a=s.shader_process(t,this.m_context.context(),this.m_chrome[this.m_tex_num],this.m_chrome[0==this.m_tex_num?1:0],e);this.m_tex_num=a?1:0}}while(t.pre_test_symbol("toneCurve"))},t.prototype.shader_setup=function(t){if(!this.m_curve_tex&&(this.m_curve_tex=function(t,e,r,i,s,a,o,n,_,m){m=m||t.CLAMP_TO_EDGE,o=o?4:o,null==n&&(n=0),_=_?t.LINEAR:_,m=m?t.CLAMP_TO_EDGE:m;var h,c=t,l=(c.LUMINANCE,c.LUMINANCE_ALPHA,c.RGB,c.RGBA,[1,2,1,4]);if(o<=0||o>4)return 0;var u=l[o-1];return c.activeTexture(c.TEXTURE1+n),h=c.createTexture(),e=null!=e?new Uint8Array(e):null,c.bindTexture(c.TEXTURE_2D,h),c.pixelStorei(c.UNPACK_ALIGNMENT,u),c.texImage2D(c.TEXTURE_2D,0,c.RGBA,r,i,0,c.RGBA,c.UNSIGNED_BYTE,e),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MIN_FILTER,_),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MAG_FILTER,_),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_S,m),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_T,m),h}(this.m_context.context(),null,256,1,this.m_context.context().RGBA,this.m_context.context().UNSIGNED_BYTE,4,0,this.m_context.context().LINEAR),!this.m_curve_tex))throw"out of memmory in toneMapParcer";t.shader_texture("curve",this.m_curve_tex);for(var e=0;e<256;++e)this.m_data[4*e]=Math.min(256*this.m_curve[e],256),this.m_data[4*e+1]=Math.min(256*this.m_curve[e],256),this.m_data[4*e+2]=Math.min(256*this.m_curve[e],256),this.m_data[4*e+3]=255;this.m_context.context().texSubImage2D(this.m_context.context().TEXTURE_2D,0,0,0,256,1,this.m_context.context().RGBA,this.m_context.context().UNSIGNED_BYTE,new Uint8Array(this.m_data)),t.shader_texture("chrome",this.m_chrome[this.m_tex_num])},t.parcerName="toneCurve",t}(),ft=function(){function t(t){this.m_context=t,this.m_shader=null,this.m_formula_list=null,this.m_fshPTPTemplate="\t            varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;                        %p                        void main()            {                vec4 src = texture2D(inputImageTexture, textureCoordinate);                vec4 dst;                %s                                gl_FragColor = dst;            }"}return t.prototype.get_name=function(){throw new Error("Method not implemented.")},t.prototype.process=function(t,e,r){try{if(!this.m_shader){var i=this.m_fshPTPTemplate.replace(/%p/g,this.shader_uniform());i=i.replace(/%s/g,this.shader_procession()),this.m_shader=new y(null,i,this.m_context.context())}var s=new w(this.m_context.context(),r,this.m_shader);this.init(t,r.m_width,r.m_height),s.shader_texture("inputImageTexture",e.current()),this.shader_setup(s),s.draw_to(e.new_temporary());var a=this.m_context.context().getError();if(a)throw new Error("CGEPTPTemplate::gpu_process"+a);e.push_to_current()}catch(t){throw new Error("CGEPTPTemplate::gpu_process"+t)}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null),this.m_curve_tex&&(this.m_context.context().deleteTexture(this.m_curve_tex),this.m_curve_tex=null),this.m_formula_list&&(this.m_formula_list.destroy(),this.m_formula_list=null)},t}(),pt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_data=new Array(1024),r.m_red=new Array(256),r.m_green=new Array(256),r.m_blue=new Array(256),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D curve;"},e.prototype.shader_procession=function(){return"dst.r = texture2D(curve, vec2(src.r,0.5)).x;            dst.g = texture2D(curve, vec2(src.g,0.5)).y;            dst.b = texture2D(curve, vec2(src.b,0.5)).z;            dst.a = src.a;"},e.prototype.shader_setup=function(t){this.m_curve_tex||(this.m_curve_tex=this.m_context.create_new_texture(256,1,!0)),t.shader_texture("curve",this.m_curve_tex),this.m_context.context().texSubImage2D(this.m_context.context().TEXTURE_2D,0,0,0,256,1,this.m_context.context().RGBA,this.m_context.context().UNSIGNED_BYTE,new Uint8Array(this.m_data))},e.prototype.init=function(t,e,r){this.init_curve(this.m_red),this.init_curve(this.m_green),this.init_curve(this.m_blue);do{var i=t.fetch_symbol();this.m_formula_list||(this.m_formula_list=new lt);var s=this.m_formula_list.get_formula_Item_with_symbol(i);s||t.error("invalid curve process name",[i]),s.color(t,this.m_red,this.m_green,this.m_blue)}while(t.pre_test_symbol("curve"));for(var a=0;a<256;++a)this.m_data[4*a]=Math.min(256*this.m_red[a],255),this.m_data[4*a+1]=Math.min(256*this.m_green[a],255),this.m_data[4*a+2]=Math.min(256*this.m_blue[a],255),this.m_data[4*a+3]=255},e.prototype.init_curve=function(t){for(var e=0;e<256;++e)t[e]=(e+.5)*(1/256)},e.parcerName="curve",e}(ft);(function(t){t[t.Symbol=0]="Symbol",t[t.Number=1]="Number",t[t.String=2]="String",t[t.Semicolon=3]="Semicolon",t[t.Unknow=4]="Unknow",t[t.EOF=5]="EOF"})(g||(g={})),function(t){t[t.BLANK=1]="BLANK",t[t.SYMBOL=2]="SYMBOL",t[t.NUMBER=3]="NUMBER",t[t.STRING=4]="STRING",t[t.SEMICOLON=5]="SEMICOLON",t[t.COMMENT=6]="COMMENT",t[t.QUOTE_COMMENT=7]="QUOTE_COMMENT",t[t.END=8]="END"}(v||(v={})),function(t){t[t.BLANK=32]="BLANK",t[t.CHARACTOR=64]="CHARACTOR",t[t.CAP_CHARACTOR=128]="CAP_CHARACTOR",t[t.NUMBER=256]="NUMBER",t[t.QUOTE=512]="QUOTE",t[t.NEGATIVE=1024]="NEGATIVE",t[t.DOT=2048]="DOT",t[t.SEMICOLON=4096]="SEMICOLON",t[t.COMMENT=8192]="COMMENT",t[t.QUOTE_COMMENT=16384]="QUOTE_COMMENT",t[t.QC_END=16384]="QC_END",t[t.END=32768]="END",t[t.END_LINE=65536]="END_LINE"}(x||(x={}));var dt,gt=function(){function t(t){this.m_status=g.Unknow,this.m_script="",this.m_start="",this.m_end="",this.m_status_backup=g.Unknow,this.m_start_backup="",this.m_end_backup="",this.m_lut=this.get_lut(),this.set_script(t)}return t.prototype.next=function(){this.m_start=this.m_end;for(var t=this.m_lut[this.m_start.charCodeAt(0)];t&(x.BLANK|x.COMMENT|x.QUOTE_COMMENT);)if(this.m_start=this.m_start.substring(1),t&(x.COMMENT|x.QUOTE_COMMENT))if(t&x.COMMENT)for(;!(t&(x.END_LINE|x.END));)this.m_start=this.m_start.substring(1),t=this.m_start.charCodeAt(0);else{for(;!(t&(x.QC_END|x.END));)this.m_start=this.m_start.substring(1),t=this.m_start.charCodeAt(0);t&x.QC_END&&(this.m_start=this.m_start.substring(1),t=this.m_start.charCodeAt(0))}else t=this.m_lut[this.m_start.charCodeAt(0)];var e=this.m_start.charAt(0);this.m_end=this.m_start.substring(1);if(0==this.m_start.length)return this.m_status=g.EOF,true;switch(31&t){case v.SYMBOL:for(var r=0;this.m_lut[this.m_end.charCodeAt(r)]&(x.CHARACTOR|x.CAP_CHARACTOR);)++r;this.m_end=this.m_end.substring(r),this.m_status=r+1>32?g.Unknow:g.Symbol;break;case v.NUMBER:r=0;var i=!1;for("-"==e&&++r;;){if(i){if(!(this.m_lut[this.m_end.charCodeAt(r)]&x.NUMBER))break}else if("."==this.m_end.charAt(r))i=!0;else if(!(this.m_lut[this.m_end.charCodeAt(r)]&x.NUMBER))break;++r}this.m_end=this.m_end.substring(r),this.m_status=g.Number;break;case v.STRING:r=0;for(var s=!1;this.m_end.charCodeAt(r);){if(e==this.m_end.charAt(r)){s=!0,++r;break}++r}this.m_end=this.m_end.substring(r),this.m_status=s?g.String:g.Unknow;break;case v.SEMICOLON:this.m_status=g.Semicolon;break;case v.END:this.m_end=this.m_start,this.m_status=g.EOF;break;default:for(r=0;!(31&this.m_lut[this.m_end.charCodeAt(r)])&&r<this.m_end.length;)++r;this.m_end=this.m_end.substring(r),this.m_status=g.Unknow}return true},t.prototype.set_script=function(t){this.m_script=this.m_start=this.m_end=t,this.next()},t.prototype.renew=function(){this.m_end=this.m_start=this.m_script,this.next()},t.prototype.dump=function(t){t.script=this.m_script,t.current=this.m_start},t.prototype.get_current_status=function(){return this.m_status},t.prototype.ended=function(){return g.EOF==this.get_current_status()},t.prototype.get_symbol=function(t){return g.Symbol==this.get_current_status()&&(t.str=this.m_start.substring(0,this.m_start.length-this.m_end.length),!0)},t.prototype.cmp_symbol=function(t){var e={str:""};return!!this.get_symbol(e)&&t==e.str},t.prototype.get_string=function(t){g.String==this.m_status?(t.start=this.m_start.substring(1),t.end=this.m_start.substring(this.m_start.length-this.m_end.length-1)):(t.start=this.m_start,t.end=this.m_end)},t.prototype.get_float=function(){if(g.Number!=this.m_status)return 0;var t=this.m_start,e=1;"-"==t.charAt(0)&&(e=-1,t=t.substring(1));for(var r=0,i=!1,s=1;t!=this.m_end;)"."==t.charAt(0)?i=!0:i?r+=(s*=.1)*(t.charCodeAt(0)-48):r=10*r+(t.charCodeAt(0)-48),t=t.substring(1);return r*e},t.prototype.backup=function(){this.m_start_backup=this.m_start,this.m_end_backup=this.m_end,this.m_status_backup=this.m_status},t.prototype.restore=function(){this.m_start=this.m_start_backup,this.m_end=this.m_end_backup,this.m_status=this.m_status_backup},t.prototype.get_lut=function(){var t=new Array(128).fill(0);t[0]=x.BLANK|v.END,t[" ".charCodeAt(0)]=x.BLANK|v.BLANK,t["\n".charCodeAt(0)]=x.BLANK|v.BLANK|x.END_LINE,t["\r".charCodeAt(0)]=x.BLANK|v.BLANK,t["   ".charCodeAt(0)]=x.BLANK|v.BLANK;for(var e="a".charCodeAt(0);e<="z".charCodeAt(0);++e)t[e]=x.CHARACTOR|v.SYMBOL;for(e="A".charCodeAt(0);e<="Z".charCodeAt(0);++e)t[e]=x.CAP_CHARACTOR|v.SYMBOL;for(e="0".charCodeAt(0);e<="9".charCodeAt(0);++e)t[e]=x.NUMBER|v.NUMBER;return t['"'.charCodeAt(0)]=x.QUOTE|v.STRING,t["'".charCodeAt(0)]=x.QUOTE|v.STRING,t["-".charCodeAt(0)]=x.NEGATIVE|v.NUMBER,t[".".charCodeAt(0)]=x.DOT|v.NUMBER,t[";".charCodeAt(0)]=x.SEMICOLON|v.SEMICOLON,t["%".charCodeAt(0)]=x.COMMENT|v.COMMENT,t["[".charCodeAt(0)]=x.QUOTE_COMMENT|v.QUOTE_COMMENT,t["]".charCodeAt(0)]=x.QC_END,t},t}();!function(t){t[t.SRGB=0]="SRGB",t[t.LUV_MIX_LOG=1]="LUV_MIX_LOG"}(dt||(dt={}));var vt=function(){this.m_buf="",this.m_process_log="",this.m_tmp=""},xt=function(){function t(t,e){this.m_mode=dt.SRGB,this.m_serial_num=e,this.m_parcer=t,this.m_data=new vt,this.m_key=0,this.m_parcer.renew()}return t.prototype.assume_semicolon=function(t){void 0===t&&(t=!0),g.Semicolon!=this.m_parcer.get_current_status()&&this.error("expect ';'"),t&&this.log(";"),this.log_return(),this.m_parcer.next()},t.prototype.pre_test_symbol=function(t){if(g.Semicolon!=this.m_parcer.get_current_status())return!1;if(this.m_parcer.backup(),this.m_parcer.next(),g.Symbol!=this.m_parcer.get_current_status())return this.m_parcer.restore(),!1;var e={str:""};return this.m_parcer.get_symbol(e),this.m_data.m_buf=e.str,t!=this.m_data.m_buf?(this.m_parcer.restore(),!1):(this.m_parcer.restore(),this.m_parcer.next(),this.m_parcer.next(),!0)},t.prototype.test_symbol=function(t,e){return void 0===e&&(e=!0),!!this.m_parcer.cmp_symbol(t)&&(this.m_parcer.next(),e&&this.log(t),!0)},t.prototype.fetch_symbol=function(t){void 0===t&&(t=!0),g.Symbol!=this.m_parcer.get_current_status()&&this.error("expect symbol");var e={str:""};return this.m_parcer.get_symbol(e),this.m_data.m_buf=e.str,this.m_parcer.next(),t&&this.log(this.m_data.m_buf),this.m_data.m_buf},t.prototype.fetch_float=function(t,e,r){void 0===r&&(r=!0),g.Number!=this.m_parcer.get_current_status()&&this.error("expect number");var i=this.m_parcer.get_float();return t&&e&&(i<t||i>e)&&this.error("number out of range, should between "+t+" and "+e),this.m_parcer.next(),r&&this.log(i.toString()),i},t.prototype.assume_symbol=function(t,e){void 0===e&&(e=!1),this.m_parcer.cmp_symbol(t)||this.error("expect",[t]),this.m_parcer.next(),e&&this.log(t)},t.prototype.check_symbol=function(t,e){return!this.lookup_symbol([t,""],!1,e)},t.prototype.lookup_symbol=function(t,e,r){if(void 0===e&&(e=!1),void 0===r&&(r=!0),g.Symbol!=this.m_parcer.get_current_status()){if(e){for(var i=0;t[i];)++i;this.error("expect symbols",t,i)}return-1}var s={str:""};this.m_parcer.get_symbol(s),this.m_data.m_buf=s.str;for(var a=0;a<t.length;++a)if(t[a]==this.m_data.m_buf)return r&&this.log(this.m_data.m_buf),this.m_parcer.next(),a;return e&&this.error("expect symbols",t,a),-1},t.prototype.fetch_string=function(t){void 0===t&&(t=!0),g.String!=this.m_parcer.get_current_status()&&this.error("expect string");var e={start:"",end:""};this.m_parcer.get_string(e),this.m_parcer.next();var r=e.start.substring(0,e.start.length-e.end.length);return t&&(this.m_data.m_process_log='"'+r+'"'),r},t.prototype.get_parcer_status=function(){return this.m_parcer.get_current_status()},t.prototype.ended=function(){return this.m_parcer.ended()},t.prototype.get_log=function(){return this.m_data.m_tmp=this.m_data.m_process_log,this.m_data.m_tmp},t.prototype.log=function(t){"number"==typeof t&&(t=t.toString()),this.m_data.m_process_log+=t+" "},t.prototype.log_return=function(){this.log("\n")},t.prototype.error=function(t,e,r){if(void 0===r&&(r=0),r%1!=0){var i=t+r.toString();return this.error(i),0}var s={script:"",current:""};this.m_parcer.dump(s);for(var a=s.script,o=1,n=s.script,_=0;(_=n.indexOf("\n"))>=0;)++o,a=n.substring(_+1),n=n.substring(_+1);if(o.toString(),(s.current.length-a.length).toString(),t.toString(),e&&0!=r)for(var m=0;m<r;++m)e[m]},t.prototype.set_configure=function(){},t.prototype.set_configure_float=function(){},t.prototype.get_configure=function(){},t.prototype.get_configure_float=function(){},t}(),yt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_key=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float key;                uniform float key_base;"},e.prototype.shader_procession=function(){return"vec3 lsrc = max(src.rgb * vec3(1.0 / 12.82),pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055),vec3(2.4)));                vec3 csrc = lsrc * vec3(0.299,0.587,0.114);                float lum = csrc.r + csrc.g + csrc.b;                csrc /= vec3(lum+0.00001);                lum = log(1.0 + key * lum) * key_base;                lum = lum * 255.0 + 0.5;                float flum = floor(lum);                dst.x = csrc.r;                dst.y = csrc.b;                dst.z = lum - flum;                dst.w = flum * (1.0/255.0);"},e.prototype.init=function(t,e,r){t.assume_symbol("key"),this.m_key=t.fetch_float(-100,100),t.m_key=this.m_key,t.m_mode=dt.LUV_MIX_LOG},e.prototype.shader_setup=function(t){var e={key:0,key_base:0};this.cal_fac(e);var r={};r.key=e.key,r.key_base=e.key_base,t.m_shader.uniforms(r)},e.prototype.cal_fac=function(t){t.key=Math.pow(2,5-this.m_key/20),t.key_base=1/Math.log(t.key+1)},e.parcerName="toneMapStart",e}(ft),wt=function(){function t(){}return t.create=function(t){return new wi(t,wi.basic_adjust_list)},t.parcerName="basicAdjust",t}(),bt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_redshift=0,r.m_greenshift=0,r.m_blueshift=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float redShift;                uniform float greenShift;                uniform float blueShift;                float RGBToL(vec3 color)                {                    float fmin = min(min(color.r, color.g), color.b);                    float fmax = max(max(color.r, color.g), color.b);                    return (fmax + fmin) / 2.0;                 }                vec3 RGBToHSL(vec3 color)                {                    vec3 hsl;                     float fmin = min(min(color.r, color.g), color.b);                    float fmax = max(max(color.r, color.g), color.b);                    float delta = fmax - fmin;                    hsl.z = (fmax + fmin) / 2.0;                    if (delta == 0.0)                    {                        hsl.x = 0.0;                        hsl.y = 0.0;                    }                    else                    {                        if (hsl.z < 0.5)                            hsl.y = delta / (fmax + fmin);                         else                            hsl.y = delta / (2.0 - fmax - fmin);                         float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;                        float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;                        float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;                        if (color.r == fmax )                            hsl.x = deltaB - deltaG;                        else if (color.g == fmax)                            hsl.x = (1.0 / 3.0) + deltaR - deltaB;                        else if (color.b == fmax)                            hsl.x = (2.0 / 3.0) + deltaG - deltaR;                        if (hsl.x < 0.0)                            hsl.x += 1.0;                        else if (hsl.x > 1.0)                            hsl.x -= 1.0;                     }                    return hsl;                }                float HueToRGB(float f1, float f2, float hue)                {                    if (hue < 0.0)                        hue += 1.0;                    else if (hue > 1.0)                        hue -= 1.0;                    float res;                    if ((6.0 * hue) < 1.0)                        res = f1 + (f2 - f1) * 6.0 * hue;                    else if ((2.0 * hue) < 1.0)                        res = f2;                    else if ((3.0 * hue) < 2.0)                        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;                    else                        res = f1;                    return res;                }                vec3 HSLToRGB(vec3 hsl)                {                    vec3 rgb;                    if (hsl.y == 0.0)                        rgb = vec3(hsl.z);                    else                    {                        float f2;                        if (hsl.z < 0.5)                            f2 = hsl.z * (1.0 + hsl.y);                        else                            f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);                        float f1 = 2.0 * hsl.z - f2;                        rgb.r = HueToRGB(f1, f2, hsl.x + (1.0/3.0));                        rgb.g = HueToRGB(f1, f2, hsl.x);                        rgb.b= HueToRGB(f1, f2, hsl.x - (1.0/3.0));                    }                    return rgb;                }"},e.prototype.shader_procession=function(){return"float lightness = RGBToL(src.rgb);                vec3 shift = vec3(redShift, greenShift, blueShift);                const float a = 0.25;                const float b = 0.333;                const float scale = 0.7;                vec3 midtones = (clamp((lightness - b) /  a + 0.5, 0.0, 1.0) * clamp ((lightness + b - 1.0) / -a + 0.5, 0.0, 1.0) * scale) * shift;                vec3 newColor = src.rgb + midtones;                newColor = clamp(newColor, 0.0, 1.0);                vec3 newHSL = RGBToHSL(newColor);                float oldLum = RGBToL(src.rgb);                src.rgb = HSLToRGB(vec3(newHSL.x, newHSL.y, oldLum));                dst = src;"},e.prototype.init=function(t,e,r){this.m_redshift=t.fetch_float(),this.m_greenshift=t.fetch_float(),this.m_blueshift=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.redShift=this.m_redshift,e.greenShift=this.m_greenshift,e.blueShift=this.m_blueshift,t.m_shader.uniforms(e)},e.parcerName="colorBalance",e}(ft),zt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_hue=0,r.m_saturation=0,r.m_luminace=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float saturation;                uniform float hue;                uniform float luminance;                vec3 RGB2HSL(vec3 src)                {                    float maxc = max(max(src.r, src.g), src.b);                    float minc = min(min(src.r, src.g), src.b);                    float L = (maxc + minc) / 2.0;                    if(maxc == minc)                        return vec3(0.0, 0.0, L);                    float H, S;                    float temp0 = maxc + minc, temp1 = maxc - minc;                    S = mix(temp1 / (2.0 - temp0), temp1 / temp0, step(L, 0.5));                    vec3 comp;                    comp.xy = vec2(equal(src.xy, vec2(maxc)));                    float comp_neg = 1.0 - comp.x;                    comp.y *= comp_neg;                    comp.z = (1.0 - comp.y) * comp_neg;                    float dif = maxc - minc;                    vec3 result = comp * vec3((src.g - src.b) / dif,                        2.0 + (src.b - src.r) / dif,                        4.0 + (src.r - src.g) / dif);                    H = result.x + result.y + result.z;                    H *= 60.0;                    H += step(H, 0.0) * 360.0;                    return vec3(H / 360.0, S, L);                }                vec3 HSL2RGB(vec3 src)                {                    float q = (src.z < 0.5) ? src.z * (1.0 + src.y) : (src.z + src.y - (src.y * src.z));                    float p = 2.0 * src.z - q;                    vec3 dst = vec3(src.x + 0.333, src.x, src.x - 0.333);                    dst = fract(dst);                    vec3 weight = step(dst, vec3(1.0 / 6.0));                    vec3 weight_neg = 1.0 - weight;                    vec3 weight2 = weight_neg * step(dst, vec3(0.5));                    vec3 weight2_neg = weight_neg * (1.0 - weight2);                    vec3 weight3 = weight2_neg * step(dst, vec3(2.0 / 3.0));                    vec3 weight4 = (1.0 - weight3) * weight2_neg;                    float q_p = q - p;                    dst = mix(dst, p + q_p * 6.0 * dst, weight);                    dst = mix(dst, vec3(q), weight2);                    dst = mix(dst, p + q_p * ((2.0 / 3.0) - dst) * 6.0, weight3);                    dst = mix(dst, vec3(p), weight4);                    return dst;                }                vec3 adjustColor(vec3 src, float h, float s, float l)                {                    src = RGB2HSL(src);                    src.x += h;                    src.y *= 1.0 + s;                    src.z *= 1.0 + l;                    return HSL2RGB(src);                }"},e.prototype.shader_procession=function(){return"src.rgb = adjustColor(src.rgb, hue, saturation, luminance);                dst = src;"},e.prototype.init=function(t,e,r){this.m_hue=t.fetch_float(),this.m_saturation=t.fetch_float(),this.m_luminace=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.saturation=this.m_saturation,e.hue=this.m_hue,e.luminance=this.m_luminace,t.m_shader.uniforms(e)},e.parcerName="hsl",e}(ft),Tt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_red=0,r.m_green=0,r.m_blue=0,r.m_magenta=0,r.m_yellow=0,r.m_cyan=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec3 vColor1;                uniform vec3 vColor2;                uniform vec2 special;                vec3 hsvAdjust(vec3 src, vec3 color1, vec3 color2)                {                    float fmax = max(src.r,max(src.g,src.b));                    float fmin = min(src.r,min(src.g,src.b));                    float fdelta = fmax - fmin;                    float fs_off;                    vec3 hsv;                    hsv.z = fmax;                    if(0.0 == fdelta)                    {                        return src;                    }                    hsv.y = fdelta/fmax;                    if(fmax == src.r)                    {                        if(src.g >= src.b)                        {                            hsv.x = (src.g - src.b)/fdelta;                            fs_off = (color2.g - color1.r)*hsv.x + color1.r;                            hsv.y = hsv.y*(1.0 + fs_off);                            clamp(hsv.y, 0.0, 1.0);                            src.r = hsv.z;                            src.b = hsv.z*(1.0 - hsv.y);                            src.g = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                        }                        else                        {                            hsv.x = (src.r - src.b)/fdelta;                            fs_off = (color1.r - color2.r)*hsv.x + color2.r;                            hsv.y = hsv.y*(1.0 + fs_off);                            clamp(hsv.y, 0.0, 1.0);                            src.r = hsv.z;                            src.g = hsv.z*(1.0 - hsv.y);                            src.b = hsv.z*(1.0 - hsv.y*hsv.x);                        }                    }                    else if(fmax == src.g)                    {                        if(src.r > src.b)                        {                            hsv.x = (src.g - src.r)/fdelta;                            fs_off = (color1.g - color2.g)*hsv.x + color2.g;                            hsv.y = hsv.y*(1.0 + fs_off);                            clamp(hsv.y, 0.0, 1.0);                            src.g = hsv.z;                            src.r = hsv.z*(1.0 - hsv.y*hsv.x);                            src.b = hsv.z*(1.0 - hsv.y);                        }                        else                        {                            hsv.x = (src.b - src.r)/fdelta;                            fs_off = (color2.b - color1.g)*hsv.x + color1.g;                            hsv.y = hsv.y*(1.0 + fs_off);                            clamp(hsv.y, 0.0, 1.0);                            src.g = hsv.z;                            src.r = hsv.z*(1.0 - hsv.y);                            src.b = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                        }                    }                    else                    {                        if(src.g > src.r)                        {                            hsv.x = (src.b - src.g)/fdelta;                            fs_off = (color1.b - color2.b)*hsv.x + color2.b;                            hsv.y = hsv.y*(1.0 + fs_off);                            clamp(hsv.y, 0.0, 1.0);                            src.b = hsv.z;                            src.r = hsv.z*(1.0 - hsv.y);                            src.g = hsv.z*(1.0 - hsv.y*hsv.x);                        }                        else                        {                            hsv.x = (src.r - src.g)/fdelta;                            fs_off = (color2.r - color1.b)*hsv.x + color1.b;                            hsv.y = hsv.y*(1.0 + fs_off);                            clamp(hsv.y, 0.0, 1.0);                            src.b = hsv.z;                            src.r = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                            src.g = hsv.z*(1.0 - hsv.y);                        }                    }                    return src;                }"},e.prototype.shader_procession=function(){return"src.rgb = hsvAdjust(src.rgb, vColor1, vColor2);                dst = src;"},e.prototype.init=function(t,e,r){this.m_red=t.fetch_float(),this.m_green=t.fetch_float(),this.m_blue=t.fetch_float(),this.m_magenta=t.fetch_float(),this.m_yellow=t.fetch_float(),this.m_cyan=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.vColor1=[this.m_red,this.m_green,this.m_blue],e.vColor2=[this.m_magenta,this.m_yellow,this.m_cyan],t.m_shader.uniforms(e)},e.parcerName="hsv",e}(ft),Et=function(t){function e(e){var r=t.call(this,e)||this;return r.m_intensity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float intensity;"},e.prototype.shader_procession=function(){return"                dst = vec4(1.0,1.0,1.0,1.0);                dst.a = intensity;                "},e.prototype.init=function(t,e,r){this.m_intensity=1,t.test_symbol("intensity")&&(this.m_intensity=t.fetch_float())},e.prototype.shader_setup=function(t){var e={};e.intensity=this.m_intensity,t.m_shader.uniforms(e)},e.parcerName="alphaInit",e}(ft),Ct=function(t){function e(e){var r=t.call(this,e)||this;return r.m_pos=new Array(2),r.m_size=new Array(2),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec4 trans;"},e.prototype.shader_procession=function(){return"                dst = texture2D(inputImageTexture, textureCoordinate*trans.xy+trans.zw);                "},e.prototype.init=function(t,e,r){if(!e||!r)throw new Error("areaSelective init lack arg");var i=t.lookup_symbol(["pixel","relative",0],!0);t.assume_symbol("position"),i?(this.m_pos[0]=t.fetch_float()*e,this.m_pos[1]=t.fetch_float()*r):(this.m_pos[0]=t.fetch_float(),this.m_pos[1]=t.fetch_float()),t.assume_symbol("size"),i?(this.m_size[0]=t.fetch_float()*e,this.m_size[1]=t.fetch_float()*r):(this.m_size[0]=t.fetch_float(),this.m_size[1]=t.fetch_float())},e.prototype.shader_setup=function(t){var e=[this.m_size[0]/t.m_width,this.m_size[1]/t.m_height,this.m_pos[0]/t.m_width,this.m_pos[1]/t.m_height],r={};r.trans=e,t.m_shader.uniforms(r)},e.parcerName="areaSelective",e}(ft),St=function(){function t(t){this.m_shader_h=null,this.m_shader_v=null,this.m_shader_b=null,this.m_extrusion_shader=null,this.m_width=0,this.m_height=0,this.m_pos=[],this.m_context=t,this.m_blemishFixShader_h="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D blemishTexture;        uniform vec2 pos;        uniform float radius;        uniform vec2 size;        uniform vec4 trans;        vec4 fuckingBlur(vec3 sCol,vec2 uv){            float sigma_i = 0.5/5.0/5.0;            float res_w = 1.0;            for(float i = -7.0; i <= 7.0; i++){                vec2 coord_sample;                if ((abs(uv.y*size.y + i - pos.y))>(radius))                    continue;                coord_sample = uv + vec2(0.0, (float(i))) / size;                vec3 tmp_g = texture2D(blemishTexture, coord_sample).rgb;                float tmp_w = exp(-(i*i)*sigma_i);                sCol += tmp_w*tmp_g;                res_w += tmp_w;            }            vec4 res = vec4(sCol / res_w,res_w/7.0);            return res;        }        void main()        {            vec4 col;            vec2 coord = textureCoordinate*trans.xy+trans.zw;            float dis = distance(coord*size, pos);            if (dis< radius)            {                col = fuckingBlur(texture2D(blemishTexture, coord).rgb, coord);            }            else                col = texture2D(blemishTexture, coord);            gl_FragColor = col;        }",this.m_blemishFixShader_v="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D blemishTexture;        uniform vec2 pos;        uniform float radius;        uniform vec2 size;        uniform vec4 trans;        vec3 lightenMix(vec3 src, vec3 dst, float alpha){            return mix(src, max(src, dst), alpha);        }        vec3 fuckingBlur(vec3 sCol, vec2 uv){            float sigma_i = 0.5 / 5.0 / 5.0;            float res_w = 1.0;            for (float i = -7.0; i <= 7.0; i++){                vec2 coord_sample;                if ((abs(uv.x*size.x + i - pos.x)) > (radius))                    continue;                coord_sample = uv + vec2((float(i)),0.0) / size;                vec3 tmp_g = texture2D(blemishTexture, coord_sample).rgb;                float tmp_h = texture2D(blemishTexture, coord_sample).a;                float tmp_w = exp(-(i*i)*sigma_i)*tmp_h;                sCol += tmp_w*tmp_g;                res_w += tmp_w;            }            vec3 res = sCol / res_w;            return res;        }        void main()        {            vec3 col;            vec2 coord = textureCoordinate*trans.xy+trans.zw;            float dis = distance(coord*size, pos);            if (dis < radius)            {                col = texture2D(blemishTexture, coord).rgb;                col = fuckingBlur(col, coord);                col = lightenMix(texture2D(inputImageTexture, coord).rgb, col, (1.0 -dis/radius)*0.65);            }            else                col = texture2D(inputImageTexture, coord).rgb;            gl_FragColor = vec4(col, 1.0);        }",this.m_str_extrusionShader="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D blemishTexture;        uniform float center_x;        uniform float radius_x;        uniform vec4 trans;        void main()        {            vec4 dst;            vec2 coord = textureCoordinate*trans.xy+trans.zw;            if (coord.x <center_x)            {                dst = texture2D(inputImageTexture, coord - vec2(radius_x, 0.0));            }            else            {                dst = texture2D(inputImageTexture, coord + vec2(radius_x, 0.0));            }            gl_FragColor = dst;        }",this.m_blendShader="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D blemishTexture;        void main()        {            vec4 blemish = texture2D(blemishTexture, textureCoordinate);            vec4 src = texture2D(inputImageTexture, textureCoordinate);            gl_FragColor = vec4(mix(src.xyz,blemish.xyz,blemish.w),src.w);        }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.size_change(r.m_width,r.m_height),this.init(t),this.m_extrusion_shader||(this.m_extrusion_shader=new y(null,this.m_str_extrusionShader,this.m_context.context())),this.m_shader_h||(this.m_shader_h=new y(null,this.m_blemishFixShader_h,this.m_context.context())),this.m_shader_v||(this.m_shader_v=new y(null,this.m_blemishFixShader_v,this.m_context.context())),this.m_shader_b||(this.m_shader_b=new y(null,this.m_blendShader,this.m_context.context()));for(var i=0;i<this.m_pos.length;++i){var s=[Math.floor(this.m_pos[i].pos[0]-this.m_pos[i].radius),Math.floor(this.m_pos[i].pos[1]-this.m_pos[i].radius)],a=[Math.ceil(this.m_pos[i].pos[0]+this.m_pos[i].radius),Math.ceil(this.m_pos[i].pos[1]+this.m_pos[i].radius)];s[0]=Math.min(Math.max(0,s[0]),r.m_width),s[1]=Math.min(Math.max(0,s[1]),r.m_height),a[0]=Math.min(Math.max(0,a[0]),r.m_width),a[1]=Math.min(Math.max(0,a[1]),r.m_height);var o=[Math.floor(s[0]/4),Math.floor(s[1]/4)],n=[Math.ceil(a[0]/4),Math.ceil(a[1]/4)],_=new w(this.m_context.context(),null,this.m_extrusion_shader,r.m_width/4,r.m_height/4,r.m_frameBuffer);_.shader_texture("inputImageTexture",e.current());var m={};m.center_x=this.m_pos[i].pos[0]/r.m_width,m.radius_x=this.m_pos[i].radius/r.m_width,m.trans=[(n[0]-o[0])/(r.m_width/4),(n[1]-o[1])/(r.m_height/4),o[0]/(r.m_width/4),o[1]/(r.m_height/4)],_.m_shader.uniforms(m),this.drawRect(o,n,this.m_blemishTex[0],r.m_frameBuffer);var h=new w(this.m_context.context(),null,this.m_shader_h,r.m_width/4,r.m_height/4,r.m_frameBuffer);h.shader_texture("inputImageTexture",e.current()),h.shader_texture("blemishTexture",this.m_blemishTex[0]),(m={}).size=[r.m_width,r.m_height],m.pos=this.m_pos[i].pos,m.radius=this.m_pos[i].radius,m.trans=[(n[0]-o[0])/(r.m_width/4),(n[1]-o[1])/(r.m_height/4),o[0]/(r.m_width/4),o[1]/(r.m_height/4)],h.m_shader.uniforms(m),this.drawRect(o,n,this.m_blemishTex[1],r.m_frameBuffer);var c=new w(this.m_context.context(),r,this.m_shader_v);c.shader_texture("inputImageTexture",e.current()),c.shader_texture("blemishTexture",this.m_blemishTex[1]),(m={}).size=[c.m_width,c.m_height],m.pos=this.m_pos[i].pos,m.radius=this.m_pos[i].radius,m.trans=[(a[0]-s[0])/r.m_width,(a[1]-s[1])/r.m_height,s[0]/r.m_width,s[1]/r.m_height],c.m_shader.uniforms(m),this.drawRect(s,a,this.m_rectTex,r.m_frameBuffer),this.m_context.context().bindFramebuffer(this.m_context.context().FRAMEBUFFER,r.m_frameBuffer),this.m_context.context().framebufferTexture2D(this.m_context.context().FRAMEBUFFER,this.m_context.context().COLOR_ATTACHMENT0,this.m_context.context().TEXTURE_2D,this.m_rectTex,0),this.m_context.context().activeTexture(this.m_context.context().TEXTURE0),this.m_context.context().bindTexture(this.m_context.context().TEXTURE_2D,e.current()),this.m_context.context().copyTexSubImage2D(this.m_context.context().TEXTURE_2D,0,s[0],s[1],s[0],s[1],a[0]-s[0],a[1]-s[1]);var l=this.m_context.context().getError();if(l)throw new Error("blemishFix: "+l)}}catch(t){throw new Error("blemishFix: "+t)}},t.prototype.destroy=function(){if(this.m_shader_h&&(this.m_shader_h.destroy(),this.m_shader_h=null),this.m_shader_v&&(this.m_shader_v.destroy(),this.m_shader_v=null),this.m_shader_b&&(this.m_shader_b.destroy(),this.m_shader_b=null),this.m_extrusion_shader&&(this.m_extrusion_shader.destroy(),this.m_extrusion_shader=null),this.size_change(0,0),this.m_blemishTex){for(var t=0;t<this.m_blemishTex.length;++t)this.m_context.context().deleteTexture(this.m_blemishTex[t]);this.m_blemishTex=0}this.m_rectTex&&(this.m_context.context().deleteTexture(this.m_rectTex),this.m_blemishTex=0)},t.prototype.init=function(t){for(this.m_pos=[];t.test_symbol("point");){var e=[0,0];e[0]=t.fetch_float(),e[1]=t.fetch_float(),t.assume_symbol("radius");var r=t.fetch_float();this.m_pos.push({pos:e,radius:r})}},t.prototype.drawRect=function(t,e,r,i){var s=this.m_context.context();s.bindFramebuffer(s.FRAMEBUFFER,i),s.framebufferTexture2D(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.TEXTURE_2D,r,0),s.viewport(t[0],t[1],e[0]-t[0],e[1]-t[1]),s.drawArrays(s.TRIANGLE_FAN,0,4)},t.prototype.size_change=function(t,e){if(!this.m_blemishTex||0!=t&&0!=e){if(t!=this.m_width||e!=this.m_height){if(this.m_blemishTex)for(r=0;r<this.m_blemishTex.length;++r)this.m_context.context().deleteTexture(this.m_blemishTex[r]);this.m_rectTex&&this.m_context.context().deleteTexture(this.m_rectTex),this.m_blemishTex=new Array(2),this.m_blemishTex[0]=this.m_context.create_new_texture(t/4,e/4,!0),this.m_blemishTex[1]=this.m_context.create_new_texture(t/4,e/4,!0),this.m_rectTex=this.m_context.create_new_texture(t,e,!0),this.m_width=t,this.m_height=t}}else{for(var r=0;r<this.m_blemishTex.length;++r)this.m_context.context().deleteTexture(this.m_blemishTex[r]);this.m_context.context().deleteTexture(this.m_rectTex),this.m_blemishTex=null,this.m_rectTex=null}},t.parcerName="blemishFix",t}(),Mt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_dstPos=new Array(2),r.m_srcPos=new Array(2),r.m_opacity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec2 offset;"},e.prototype.shader_procession=function(){return"vec2 cod = textureCoordinate - offset;                src = texture2D(inputImageTexture, textureCoordinate);                if (cod.x<1.0&&cod.x>0.0&&cod.y > 0.0&&cod.y < 1.0)                    dst = texture2D(inputImageTexture, cod);                else                    dst = src;"},e.prototype.init=function(t,e,r){this.m_srcPos[0]=t.fetch_float(),this.m_srcPos[1]=t.fetch_float(),this.m_dstPos[0]=t.fetch_float(),this.m_dstPos[1]=t.fetch_float(),this.m_opacity=t.fetch_float()/100},e.prototype.shader_setup=function(t){var e={};e.offset=[(this.m_dstPos[0]-this.m_srcPos[0])/t.m_width,(this.m_dstPos[1]-this.m_srcPos[1])/t.m_height],t.m_shader.uniforms(e)},e.parcerName="clone",e}(ft),Dt=function(){function t(t){this.m_shader=null,this.m_model="",this.m_view_num=0,this.m_opacity=0,this.m_context=t,this.m_str_cloneBlendShader="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D blendMaskTexture;        uniform sampler2D baseTexture;        uniform sampler2D srcTexture;        uniform float model;        uniform float opacity;                void main()        {                        vec4 src = texture2D(srcTexture,textureCoordinate);                                            vec4 top = texture2D(inputImageTexture, textureCoordinate);                        vec4 dst = texture2D(baseTexture,textureCoordinate);                        float a = texture2D(blendMaskTexture, textureCoordinate).w;                                    vec4 blendResult;             if(model>0.0)blendResult=vec4(mix(dst.rgb,top.rgb,a),src.a);            else blendResult =vec4(mix(src.rgb,top.rgb,a),src.a);                        gl_FragColor = vec4(mix(src.rgb,blendResult.rgb,opacity),src.a);        }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.init(t);var i=void 0;this.m_view_num&&(i=e.load_view(this.m_view_num));var s=this.m_context.lock_image("","painter");if(!s)throw new Error("no painter cache");this.m_shader||(this.m_shader=new y(null,this.m_str_cloneBlendShader,this.m_context.context()));var a=new w(this.m_context.context(),r,this.m_shader);a.shader_texture("srcTexture",e.get_src()),a.shader_texture("inputImageTexture",e.current()),a.shader_texture("blendMaskTexture",s),a.shader_texture("baseTexture",i),this.shader_setup(a),a.draw_to(e.new_temporary());var o=this.m_context.context().getError();if(o)throw new Error("cloneBlend: "+o);e.push_to_current(),this.m_context.unlock_image(null,null,"painter")}catch(t){throw new Error("cloneBlend process: "+t)}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},t.prototype.init=function(t){t.assume_symbol("view"),this.m_view_num=t.fetch_float(),t.assume_symbol("cache"),this.m_model=t.fetch_string(),t.assume_symbol("opacity"),this.m_opacity=t.fetch_float()},t.prototype.shader_setup=function(t){var e={};e.opacity=this.m_opacity/100,"painter"==this.m_model?e.model=1:e.model=0,t.m_shader.uniforms(e)},t.parcerName="cloneBlend",t}(),Rt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_intensity=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform mat4 cmul;"},e.prototype.shader_procession=function(){return"src *= cmul;                dst = src;"},e.prototype.init=function(t,e,r){for(var i=0;16!=i;++i)this.m_intensity[i]=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.cmul=this.m_intensity,t.m_shader.uniforms(e)},e.parcerName="colorMatf",e}(ft),At=function(t){function e(e){var r=t.call(this,e)||this;return r.m_intensity=[0,0,0,0,0,0,0,0,0],r.m_ms=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform mat3 cmul;"},e.prototype.shader_procession=function(){return"src.rgb *= cmul;                dst = vec4(src.rgb, src.a);"},e.prototype.init=function(t,e,r){this.m_intensity=[0,0,0,0,0,0,0,0,0];switch(g.Symbol==t.get_parcer_status()?this.m_ms=t.lookup_symbol(["float","vector","mat",0],!0):this.m_ms=2,this.m_ms){case 0:this.m_intensity[0]=t.fetch_float(),this.m_intensity[4]=this.m_intensity[0],this.m_intensity[8]=this.m_intensity[0];break;case 1:this.m_intensity[0]=t.fetch_float(),this.m_intensity[4]=t.fetch_float(),this.m_intensity[8]=t.fetch_float();break;case 2:for(var i=0;9!=i;++i)this.m_intensity[i]=t.fetch_float()}},e.prototype.shader_setup=function(t){var e={};e.cmul=this.m_intensity,t.m_shader.uniforms(e)},e.parcerName="colorMul",e}(ft),It=function(t){function e(e){var r=t.call(this,e)||this;return r.m_pos=new Array(2),r.m_src_size=new Array(2),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec4 trans;                uniform sampler2D srcImage;"},e.prototype.shader_procession=function(){return"                dst = texture2D(srcImage, textureCoordinate*trans.xy+trans.zw);                "},e.prototype.init=function(t,e,r){t.assume_symbol("position"),this.m_pos[0]=t.fetch_float(),this.m_pos[1]=t.fetch_float(),t.assume_symbol("srcSize"),this.m_src_size[0]=t.fetch_float(),this.m_src_size[1]=t.fetch_float()},e.prototype.shader_setup=function(t){var e=this.getSrcTexture(this.m_context),r=[t.m_width/this.m_src_size[0],t.m_height/this.m_src_size[1],this.m_pos[0]/this.m_src_size[0],this.m_pos[1]/this.m_src_size[1]],i={};i.trans=r,t.m_shader.uniforms(i),t.shader_texture("srcImage",e)},e.prototype.getSrcTexture=function(t){return t.lock_image()||!1},e.parcerName="crop",e}(ft),kt=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"   "},e.prototype.shader_procession=function(){return"        dst= vec4(127.0/255.0,127.0/255.0,0.0,0.0);"},e.prototype.init=function(t,e,r){},e.prototype.shader_setup=function(t){},e.parcerName="dark",e}(ft),Ft=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"   "},e.prototype.shader_procession=function(){return"        dst= vec4(0.0, 0.0, 0.0, 0.0);"},e.prototype.init=function(t,e,r){},e.prototype.shader_setup=function(t){},e.parcerName="darkClear",e}(ft),Pt=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec2 vSteps;                const float intensity = 0.45;                float getLum(vec3 src)                {                    return dot(src, vec3(0.299, 0.587, 0.114));                }"},e.prototype.shader_procession=function(){return"mat3 m;                m[0][0] = getLum(texture2D(inputImageTexture, textureCoordinate - vSteps).rgb);                m[0][1] = getLum(texture2D(inputImageTexture, textureCoordinate - vec2(0.0, vSteps.y)).rgb);                m[0][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(vSteps.x, -vSteps.y)).rgb);                m[1][0] = getLum(texture2D(inputImageTexture, textureCoordinate - vec2(vSteps.x, 0.0)).rgb);                m[1][1] = getLum(src.rgb);                m[1][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(vSteps.x, 0.0)).rgb);                m[2][0] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(-vSteps.x, vSteps.y)).rgb);                m[2][1] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(0.0, vSteps.y)).rgb);                m[2][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vSteps).rgb);                float nx = m[0][0] + m[0][1] + m[0][2] - m[2][0] - m[2][1] - m[2][2];                float ny = m[0][0] + m[1][0] + m[2][0] - m[0][2] - m[1][2] - m[2][2];                float ndl = abs(nx + ny + intensity);                float shade = 0.0;                float norm = (nx * nx + ny * ny + intensity * intensity);                shade = (ndl * 0.577) / sqrt(norm);                dst = vec4(src.rgb * shade, src.a);"},e.prototype.init=function(t,e,r){},e.prototype.shader_setup=function(t){var e=[0,0];e[0]=1/t.m_width,e[1]=1/t.m_height;var r={};r.vSteps=e,t.m_shader.uniforms(r)},e.parcerName="darkEngraving",e}(ft),Nt=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec2 vSteps;                const float intensity = 0.45;                float getLum(vec3 src)                {                    return dot(src, vec3(0.299, 0.587, 0.114));                }"},e.prototype.shader_procession=function(){return"mat3 m;                m[0][0] = getLum(texture2D(inputImageTexture, textureCoordinate - vSteps).rgb);                m[0][1] = getLum(texture2D(inputImageTexture, textureCoordinate - vec2(0.0, vSteps.y)).rgb);                m[0][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(vSteps.x, -vSteps.y)).rgb);                m[1][0] = getLum(texture2D(inputImageTexture, textureCoordinate - vec2(vSteps.x, 0.0)).rgb);                m[1][1] = getLum(src.rgb);                m[1][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(vSteps.x, 0.0)).rgb);                m[2][0] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(-vSteps.x, vSteps.y)).rgb);                m[2][1] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(0.0, vSteps.y)).rgb);                m[2][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vSteps).rgb);                float nx = m[0][0] + m[0][1] + m[0][2] - m[2][0] - m[2][1] - m[2][2];                float ny = m[0][0] + m[1][0] + m[2][0] - m[0][2] - m[1][2] - m[2][2];                float ndl = abs(nx + ny + intensity);                float shade = 0.0;                float norm = (nx * nx + ny * ny + intensity * intensity);                shade = (ndl * 0.577) / sqrt(norm);                dst = vec4(vec3(shade), src.a);"},e.prototype.init=function(t,e,r){},e.prototype.shader_setup=function(t){var e=[0,0];e[0]=1/t.m_width,e[1]=1/t.m_height;var r={};r.vSteps=e,t.m_shader.uniforms(r)},e.parcerName="embossed",e}(ft),qt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_intensity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec2 samplerSteps;                uniform float intensity;                const int samplerLimit = 5;                const float weight = float(samplerLimit) * 4.0 + 1.0;                "},e.prototype.shader_procession=function(){return"vec3 sum = src.rgb;                vec2 len = 2.0 * samplerSteps;                for (int i = 1; i <= samplerLimit; ++i)                {                    sum += texture2D(inputImageTexture, textureCoordinate - len).rgb;                    sum += texture2D(inputImageTexture, vec2(textureCoordinate.x - len.x, textureCoordinate.y + len.y)).rgb;                    sum += texture2D(inputImageTexture, vec2(textureCoordinate.x + len.x, textureCoordinate.y - len.y)).rgb;                    sum += texture2D(inputImageTexture, textureCoordinate + len).rgb;                    len *= 2.0;                }                vec3 _dst = max(src.rgb - sum / weight,0.0);                vec3 bmp2 = max(sum / weight - src.rgb, 0.0);                dst = vec4(mix(src.rgb, max(max(src.rgb - bmp2,0.0)+_dst,0.0), intensity),src.a);"},e.prototype.init=function(t,e,r){this.m_intensity=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.samplerSteps=[1/t.m_width,1/t.m_height],e.intensity=this.m_intensity/100,t.m_shader.uniforms(e)},e.parcerName="eyeBrighten",e}(ft),Bt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_intensity=0,r.m_tintColor=new Array(3),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec3 tintColor;                uniform float intensity;                "},e.prototype.shader_procession=function(){return"float lsrc = dot(src.rgb, vec3(0.299, 0.587, 0.114));                float tintLum = dot(tintColor, vec3(0.299, 0.587, 0.114));                float srcLum = dot(vec3(lsrc), vec3(0.299, 0.587, 0.114));                vec3 tint = tintColor + srcLum - tintLum;                float mn = min(tint.r, min(tint.g, tint.b));                float mx = max(tint.r, max(tint.g, tint.b));                if (mn < 0.0)                {                    tint = srcLum + (tint - srcLum) * srcLum / (srcLum - mn);                }                if (mx > 1.0)                {                    tint = srcLum + (tint - srcLum) * (1.0 - srcLum) / (mx - srcLum);                }                dst = vec4(mix(src.rgb,tint,intensity), src.a);"},e.prototype.init=function(t,e,r){this.m_tintColor[0]=t.fetch_float(),this.m_tintColor[1]=t.fetch_float(),this.m_tintColor[2]=t.fetch_float(),this.m_intensity=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.tintColor=[this.m_tintColor[0]/255,this.m_tintColor[1]/255,this.m_tintColor[2]/255],e.intensity=this.m_intensity/100,t.m_shader.uniforms(e)},e.parcerName="eyeTint",e}(ft),Ut=function(){function t(t){this.m_shader_h=null,this.m_shader_v=null,this.m_radius=0,this.m_sigma=0,this.m_context=t,this.m_GaussianBlurShader_h="varying vec2 textureCoordinate;                uniform sampler2D inputImageTexture;                uniform vec2 samplerSteps;                uniform float radius;                uniform float sigma;                        float random(vec3 scale, float seed) {                    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);                }                        float sigma_s = 3.0;                vec4 guidedFilter(vec2 uv)                {                    float res_w = 1.0;                    vec3 center_g = texture2D(inputImageTexture, uv).rgb;                    float sigma_i = 0.5 / sigma / sigma;                    float offset2 = random(vec3(12.9898, 78.233, 151.7182), 0.0);                    float offset = random(vec3(151.7182, 12.9898, 78.233), 0.0);                    for (float i = -16.0; i <= 16.0; i++) {                    vec2 coord_sample = uv + vec2(float(i) + offset - 0.5, offset2 - 0.5)*samplerSteps*radius / 16.0;                            vec3 tmp_g = texture2D(inputImageTexture, coord_sample).rgb;                    vec3 diff_g = (tmp_g - center_g);                            float tmp_w = exp(-(i*i)*sigma_i);                    center_g += tmp_w*tmp_g;                    res_w += tmp_w;                }                    vec4 res = vec4(center_g / res_w,res_w/16.0);                    return res;                }                void main() {                            vec4 res_t = guidedFilter(textureCoordinate);                    gl_FragColor = res_t;                }",this.m_GaussianBlurShader_v="varying vec2 textureCoordinate;                uniform sampler2D inputImageTexture;                uniform vec2 samplerSteps;                uniform float radius;                uniform float sigma;                        float random(vec3 scale, float seed) {                    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);                }                        float sigma_s = 3.0;                vec4 guidedFilter(vec2 uv)                {                    float res_w = 1.0;                    vec3 center_g = texture2D(inputImageTexture, uv).rgb;                    float sigma_i = 0.5 / sigma / sigma;                    float offset2 = random(vec3(12.9898, 78.233, 151.7182), 0.0);                    float offset = random(vec3(151.7182, 12.9898, 78.233), 0.0);                    for (float i = -16.0; i <= 16.0; i++) {                    vec2 coord_sample = uv + vec2(offset - 0.5, float(i) + offset2 - 0.5)*samplerSteps*radius/16.0;                    float tmp_h = texture2D(inputImageTexture, coord_sample).a;                            vec3 tmp_g = texture2D(inputImageTexture, coord_sample).rgb;                    vec3 diff_g = (tmp_g - center_g);                            float tmp_w = exp(-(i*i)*sigma_i)*tmp_h;                    center_g += tmp_w*tmp_g;                    res_w += tmp_w;                }                    vec4 res = vec4(center_g / res_w, 1.0);                    return res;                }                        void main() {                            vec4 res_t = guidedFilter(textureCoordinate);                    gl_FragColor = res_t;                }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.init(t),this.m_shader_h||(this.m_shader_h=new y(null,this.m_GaussianBlurShader_h,this.m_context.context())),this.m_shader_v||(this.m_shader_v=new y(null,this.m_GaussianBlurShader_v,this.m_context.context()));var i=new w(this.m_context.context(),r,this.m_shader_h);i.shader_texture("inputImageTexture",e.current()),this.shader_setup(i,i.m_width,i.m_height),i.draw_to(e.new_temporary());var s=this.m_context.context().getError();if(s)throw new Error("gaussianBlur shader h: "+s);e.push_to_current();var a=new w(this.m_context.context(),r,this.m_shader_v);if(a.shader_texture("inputImageTexture",e.current()),this.shader_setup(a,a.m_width,a.m_height),a.draw_to(e.new_temporary()),s=this.m_context.context().getError())throw new Error("gaussianBlur shader h: "+s);e.push_to_current()}catch(s){throw new Error("gaussianBlur: "+s)}},t.prototype.destroy=function(){this.m_shader_h&&(this.m_shader_h.destroy(),this.m_shader_h=null),this.m_shader_v&&(this.m_shader_v.destroy(),this.m_shader_v=null)},t.prototype.init=function(t){this.m_radius=t.fetch_float(),this.m_sigma=t.fetch_float()},t.prototype.shader_setup=function(t,e,r){var i={};i.samplerSteps=[1/e,1/r],i.radius=this.m_radius,i.sigma=this.m_sigma,t.m_shader.uniforms(i)},t.parcerName="gaussianBlur",t}(),Lt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_angle=0,r.m_scale=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec4 trans;                uniform float meshWidth;                uniform vec2 size;                uniform float lineWidth;"},e.prototype.shader_procession=function(){return"                vec2 coord = textureCoordinate - vec2(0.5, 0.5);                                coord = vec2(coord.x*trans.x + coord.y*trans.y,                coord.x*trans.z + coord.y*trans.w);                                coord = coord + vec2(0.5, 0.5);                                vec2 realPixel = vec2(abs(textureCoordinate.x-0.5),abs(textureCoordinate.y-0.5))*size;                if(realPixel.x<2.0*lineWidth||realPixel.y<2.0*lineWidth){                    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);                    return;                }                                vec2 dis = vec2(realPixel.x - floor(realPixel.x/meshWidth)*meshWidth,realPixel.y - floor(realPixel.y/meshWidth)*meshWidth);                vec4 rotationResult = texture2D(inputImageTexture, coord);                if(dis.x<lineWidth||dis.x>(meshWidth-lineWidth)||dis.y<lineWidth||dis.y>(meshWidth-lineWidth))                {                    dis =  min(max(dis/lineWidth,dis/(meshWidth-lineWidth)),1.0);                    float alpha = max(dis.x,dis.y);                    dst = mix(rotationResult,vec4(1.0, 1.0, 1.0,1.0),alpha);                }                else                    dst = rotationResult;                "},e.prototype.init=function(t,e,r){this.m_angle=t.fetch_float(),this.m_scale=t.fetch_float()},e.prototype.shader_setup=function(t){var e=Math.abs(10*this.m_angle)%1800;(e/=10)>90&&(e=180-e),e=e/180*3.14159265358;var r=Math.sqrt(t.m_width/2*(t.m_width/2)+t.m_height/2*(t.m_height/2)),i=Math.min(t.m_width,t.m_height),s=Math.acos(i/2/r)-e,a=i/2/Math.cos(s)/r,o=Math.floor(50/this.m_scale/a+.5),n=1/this.m_scale;e=this.m_angle/180*3.14159265358;var _=[Math.cos(e)*a,-Math.sin(e)*a*t.m_height/t.m_width,Math.sin(e)*a*t.m_width/t.m_height,Math.cos(e)*a],m={};m.trans=_,m.meshWidth=o,m.size=[t.m_width,t.m_height],m.lineWidth=n,t.m_shader.uniforms(m)},e.parcerName="gribRotation",e}(ft),Ot=function(){function t(t){this.m_shader=null,this.m_context=t,this.m_hafToneShader="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec2 halfToneVars;        uniform vec2 vSteps;        uniform float scale;        uniform float al;        void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate);            vec2 gradient = textureCoordinate / vSteps;            float lum = dot(src.rgb, vec3(0.299, 0.587, 0.114));            float alfx = sin(gradient.x*scale)*al;            float alfy = sin(gradient.y*scale)*al;            float fa = alfx *alfy*0.1668 + 0.8333;            lum = lum*fa;            lum = (lum - halfToneVars.x)*halfToneVars.y;            src.rgb = mix(vec3(0.3137, 0.1569, 0.6275), vec3(1.0, 1.0, 0.0), lum);            src.a = 1.0;            gl_FragColor = src;        }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.m_shader||(this.m_shader=new y(null,this.m_hafToneShader,this.m_context.context()));var i=new w(this.m_context.context(),r,this.m_shader);i.shader_texture("inputImageTexture",e.current());var s=this.getHalfToneLowFac(i.m_width,i.m_height);this.shader_setup(i,s.low,s.range);var a=this.m_context.context().getError();if(a)throw new Error("halfTone: "+a);e.push_to_current()}catch(t){throw new Error("halfTone process: "+t)}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},t.prototype.shader_setup=function(t,e,r){var i=t.m_height,s=t.m_width,a=i>s?502.65/i:502.65/s,o=2*Math.sin(a/2);o/=a;var n=[];n[0]=1/t.m_width,n[1]=1/t.m_height;var _={};_.al=o,_.scale=a,_.halfToneVars=[e,r],_.vSteps=n,t.m_shader.uniforms(_)},t.prototype.getHalfToneLowFac=function(t,e){var r=new Uint8Array(t*e*4);if(!r)return{low:.2,range:1.4};this.m_context.context().readPixels(0,0,t,e,this.m_context.context().RGBA,this.m_context.context().UNSIGNED_BYTE,r);for(var i=new Array(256),s=0;s<256;++s)i[s]=0;var a=t*e;for(s=0;s!=a;++s){var o=.299*r[4*s]+.587*r[4*s+1]+.114*r[4*s+2];++i[Math.floor(o)]}for(s=1;256!=s;++s)i[s]+=i[s-1];var n=0;for(s=0;256!=s;++s)if(i[s]/i[255]>.1){n=s;break}var _=255;for(s=255;s>0;--s)if((i[255]-i[s])/i[255]>.1){_=s;break}var m=255/Math.max(_-n,.01);return{low:n/=255,range:m}},t.parcerName="halfTone",t}(),Gt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_hueAdjust=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float hueAdjust;                vec3 rgb2yiq(vec3 src)                {                    return src * mat3(0.299, 0.587, 0.114,                            0.595716, -0.274453, -0.321263,                            0.211456, -0.522591, 0.31135);                }                vec3 yiq2rgb(vec3 src)                {                    return src * mat3(1.0, 0.9563, 0.6210,                            1.0, -0.2721, -0.6474,                            1.0, -1.1070, 1.7046);                }"},e.prototype.shader_procession=function(){return"vec4 color =src;                vec3 yiq = rgb2yiq(color.rgb);                float hue = atan(yiq.z, yiq.y);                float chroma = length(yiq.yz);                hue -= hueAdjust;                yiq.yz = vec2(cos(hue), sin(hue)) * chroma;                dst = vec4(yiq2rgb(yiq), color.a);                "},e.prototype.init=function(t,e,r){this.m_hueAdjust=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.hueAdjust=this.m_hueAdjust,t.m_shader.uniforms(e)},e.parcerName="hue",e}(ft),jt=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"                vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, src2, alpha);                }"},e.prototype.shader_procession=function(){return"dst.xyz = blend(vec3(1.0, 1.0, 1.0), src.xyz, src.w);                dst.w = 1.0;"},e.prototype.init=function(t,e,r){},e.prototype.shader_setup=function(t){},e.parcerName="initialized",e}(ft),Xt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_intensity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D srcImage; "},e.prototype.shader_procession=function(){return"                dst = texture2D(srcImage, textureCoordinate);                "},e.prototype.init=function(t,e,r){},e.prototype.shader_setup=function(t){var e=this.getSrcTexture(this.m_context);t.shader_texture("srcImage",e)},e.prototype.getSrcTexture=function(t){return t.lock_image()||!1},e.parcerName="justDraw",e}(ft),Ht=function(t){function e(e){var r=t.call(this,e)||this;return r.m_radius=0,r.m_pos=new Array(2),r.m_data=new Array(1024),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D color;                uniform float radius;                uniform vec2 position;                uniform vec2 size; "},e.prototype.shader_procession=function(){return"        float dis = (textureCoordinate.x - position.x)*(textureCoordinate.x - position.x)*size.x*size.x + (textureCoordinate.y - position.y)*(textureCoordinate.y - position.y)*size.y*size.y;        dis = sqrt(dis);        float index = dis / (radius);        vec4 lens;        if (index < 1.0){            lens = texture2D(color, vec2(index, 0.5));            dst = vec4(mix(src.xyz, lens.xyz, lens.a), src.a);        }        else dst = src; "},e.prototype.init=function(t,e,r){t.assume_symbol("radius"),this.m_radius=t.fetch_float(),t.assume_symbol("pos"),this.m_pos[0]=t.fetch_float(),this.m_pos[1]=t.fetch_float();var i=0,s=0,a=0,o=0,n=0;for(t.assume_symbol("ratio"),n=t.fetch_float(),t.assume_symbol("color"),i=t.fetch_float(),s=t.fetch_float(),a=t.fetch_float(),o=t.fetch_float();t.test_symbol("ratio");){var _=t.fetch_float();t.assume_symbol("color");for(var m=t.fetch_float(),h=t.fetch_float(),c=t.fetch_float(),l=t.fetch_float(),u=Math.floor(256*n);u<256*_;++u){var f=(u-256*n)/(256*_-256*n);this.m_data[4*u]=Math.floor((1-f)*i+f*m+.5),this.m_data[4*u+1]=Math.floor((1-f)*s+f*h+.5),this.m_data[4*u+2]=Math.floor((1-f)*a+f*c+.5),this.m_data[4*u+3]=Math.floor((1-f)*o+f*l+.5)}n=_,i=m,s=h,a=c,o=l}},e.prototype.shader_setup=function(t){this.m_color_tex||(this.m_color_tex=this.m_context.create_new_texture(256,1,!0)),t.shader_texture("color",this.m_color_tex),this.m_context.context().texSubImage2D(this.m_context.context().TEXTURE_2D,0,0,0,256,1,this.m_context.context().RGBA,this.m_context.context().UNSIGNED_BYTE,new Uint8Array(this.m_data));var e={};e.radius=this.m_radius*Math.max(t.m_width,t.m_height),e.position=this.m_pos,e.size=[t.m_width,t.m_height],t.m_shader.uniforms(e)},e.parcerName="lensFlare",e}(ft),Vt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_intensity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D smallTex;"},e.prototype.shader_procession=function(){return"vec4 texColor = texture2D(smallTex,textureCoordinate);                dst = (texColor-vec4(126.0/255.0))*255.0;                dst.a = 1.0;"},e.prototype.init=function(t,e,r){},e.prototype.shader_setup=function(t){var e=this.m_context.create_new_texture(2,2,!0);this.m_context.context().texSubImage2D(this.m_context.context().TEXTURE_2D,0,0,0,2,2,this.m_context.context().RGBA,this.m_context.context().UNSIGNED_BYTE,new Uint8Array([32512/255,32512/255,32512/255,256,32256/255,32256/255,32256/255,256,32256/255,32256/255,32256/255,256,32512/255,32512/255,32512/255,256])),t.shader_texture("smallTex",e)},e.parcerName="linearTest",e}(ft),Wt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_samplerScale=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec2 samplerSteps;                const int samplerRadius = 5;                uniform float samplerScale;"},e.prototype.shader_procession=function(){return"vec3 sum = src.rgb;                float cnt = 1.0;                for (int i = 1; i <= samplerRadius; ++i)                {                    float scale = float(i) * samplerScale;                    sum += texture2D(inputImageTexture, textureCoordinate + scale * vec2(samplerSteps.x, 0.0)).rgb;                    sum += texture2D(inputImageTexture, textureCoordinate + scale * vec2(-samplerSteps.x, 0.0)).rgb;                    sum += texture2D(inputImageTexture, textureCoordinate + scale * vec2(0.0, samplerSteps.y)).rgb;                    sum += texture2D(inputImageTexture, textureCoordinate + scale * vec2(0.0, -samplerSteps.y)).rgb;                    cnt += 4.0;                }                dst = vec4(src.rgb - max(sum / cnt - src.rgb, 0.0), src.a);"},e.prototype.init=function(t,e,r){this.m_samplerScale=t.fetch_float()/5},e.prototype.shader_setup=function(t){var e={};e.samplerSteps=[1/t.m_width,1/t.m_height],e.samplerScale=this.m_samplerScale,t.m_shader.uniforms(e)},e.parcerName="marscara",e}(ft),Yt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_red=0,r.m_green=0,r.m_blue=0,r.m_cyan=0,r.m_magenta=0,r.m_yellow=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float red;                uniform float green;                uniform float blue;                uniform float cyan;                uniform float magenta;                uniform float yellow;"},e.prototype.shader_procession=function(){return"float maxc = max(max(src.r, src.g), src.b);                float minc = min(min(src.r, src.g), src.b);                float midc = src.r + src.g + src.b - maxc - minc;                if(maxc == minc)                    gl_FragColor = src;                vec3 ratioMax, ratioMin;                ratioMax.xy = vec2(equal(src.rg, vec2(maxc)));                float max_neg = 1.0 - ratioMax.x;                ratioMax.y *= max_neg;                ratioMax.z = (1.0 - ratioMax.y) * max_neg;                vec3 compMax = vec3(red, green, blue) * ratioMax;                ratioMin.xy = vec2(equal(src.rg, vec2(minc)));                float min_neg = 1.0 - ratioMin.x;                ratioMin.y *= min_neg;                ratioMin.z = (1.0 - ratioMin.y) * min_neg;                vec3 compMaxMid = vec3(cyan, magenta, yellow) * ratioMin;                float total = (compMax.x + compMax.y + compMax.z) * (maxc - midc) + (compMaxMid.x + compMaxMid.y + compMaxMid.z) * (midc - minc) + minc;                dst = vec4(total, total, total, 1.0);                "},e.prototype.init=function(t,e,r){this.m_red=t.fetch_float(),this.m_green=t.fetch_float(),this.m_blue=t.fetch_float(),this.m_cyan=t.fetch_float(),this.m_magenta=t.fetch_float(),this.m_yellow=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.red=this.m_red,e.green=this.m_green,e.blue=this.m_blue,e.cyan=this.m_cyan,e.magenta=this.m_magenta,e.yellow=this.m_yellow,t.m_shader.uniforms(e)},e.parcerName="monoChrome",e}(ft),Jt=function(){this.m_m=_},Qt=function(t){function e(e){var r=t.call(this)||this;return r.m_m=[1,1,0,0],r.m_context=e,r.m_shader=null,r.m_fshFragLinearResizeProc="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;            void main()        {            gl_FragColor = texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw);        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_fshFragLinearResizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e);var o={};o.m=this.m_m,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragLinearResizeProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Kt=function(){function t(t){this.m_resize=null,this.m_min=0,this.m_swidth=0,this.m_sheight=0,this.m_context=t}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.m_resize||(this.m_resize=new Qt(this.m_context));var i=this.init(t);this.m_min&&(r.m_width>r.m_height?(i.height=this.m_min,i.width=this.m_min*r.m_width/r.m_height):(i.width=this.m_min,i.height=this.m_min*r.m_height/r.m_width)),this.m_swidth==i.width&&this.m_sheight==i.height||(this.m_swidth=i.width,this.m_sheight=i.height,this.m_tex&&(this.m_context.context().deleteTexture(this.m_tex),this.m_tex=null)),this.m_tex||(this.m_tex=this.m_context.create_new_texture(this.m_swidth,this.m_sheight,!1));var s=e.current();this.m_context.context().bindTexture(this.m_context.context().TEXTURE_2D,s),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MIN_FILTER,this.m_context.context().NEAREST),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MAG_FILTER,this.m_context.context().NEAREST),this.m_resize.process(this.m_tex,s,this.m_swidth,this.m_sheight,r.m_frameBuffer),this.m_context.context().bindTexture(this.m_context.context().TEXTURE_2D,s),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MIN_FILTER,this.m_context.context().LINEAR),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MAG_FILTER,this.m_context.context().LINEAR),this.m_resize.process(s,this.m_tex,r.m_width,r.m_height,r.m_frameBuffer);var a=this.m_context.context().getError();if(a)throw new Error("Mosaic: "+a)}catch(t){throw new Error("Mosaic process: "+t)}},t.prototype.destroy=function(){this.m_resize&&this.m_resize.destroy(),this.size_change()},t.prototype.init=function(t){this.m_min=0;var e={width:0,height:0};return t.lookup_symbol(["edge","widthHeight",0],!0)?(e.width=Math.floor(t.fetch_float()+.5),e.height=Math.floor(t.fetch_float()+.5)):(this.m_min=Math.floor(t.fetch_float()+.5),e.width=e.height=this.m_min),e},t.prototype.size_change=function(){this.m_tex&&(this.m_context.context().deleteTexture(this.m_tex),this.m_tex=null)},t.parcerName="mosaic",t}(),Zt=function(t){function e(e){var r=t.call(this,e)||this;return r.m_grain_amount=0,r.m_grain_size=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec2 imgSize;                uniform float scale;                uniform float grain_amount;                uniform float grain_size;                const float timer = 1.0;                const float intensity = 0.5;                const float permTexUnit = 1.0 / 256.0;                const float permTexUnitHalf = 0.5 / 256.0;                const vec3 lumcoeff = vec3(0.299, 0.587, 0.114);                vec4 rnm(in vec2 tc) {                    float noise = sin(dot(tc + vec2(timer), vec2(12.9898, 78.233))) * 43758.5453;                    return fract(vec4(1.0, 1.2154, 1.3453, 1.3647) * noise) * 2.0 - 1.0;                }                float fade(in float t) {                    return t*t*t*(t*(t*6.0 - 15.0) + 10.0);                }                float pnoise3D(in vec3 p) {                    vec3 pi = permTexUnit*floor(p) + permTexUnitHalf;                    vec3 pf = fract(p);                    float perm00 = rnm(pi.xy).a;                    vec3  grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0 - 1.0;                    float n000 = dot(grad000, pf);                    vec3  grad001 = rnm(vec2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;                    float n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));                    float perm01 = rnm(pi.xy + vec2(0.0, permTexUnit)).a;                    vec3  grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0 - 1.0;                    float n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));                    vec3  grad011 = rnm(vec2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;                    float n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));                    float perm10 = rnm(pi.xy + vec2(permTexUnit, 0.0)).a;                    vec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0 - 1.0;                    float n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));                    vec3  grad101 = rnm(vec2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;                    float n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));                    float perm11 = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a;                    vec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0 - 1.0;                    float n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));                    vec3  grad111 = rnm(vec2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;                    float n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));                    vec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));                    vec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));                    return mix(n_xy.x, n_xy.y, fade(pf.z));                }                vec2 coordRot(in vec2 tc, in float angle) {                    float aspect = imgSize.x / imgSize.y;                    float rotX = ((tc.x*2.0 - 1.0)*aspect*cos(angle)) - ((tc.y*2.0 - 1.0)*sin(angle));                    float rotY = ((tc.y*2.0 - 1.0)*cos(angle)) + ((tc.x*2.0 - 1.0)*aspect*sin(angle));                    return vec2((rotX / aspect)*0.5 + 0.5, rotY*0.5 + 0.5);                }"},e.prototype.shader_procession=function(){return"float size = grain_size;                float grain = grain_amount;                vec3 rotOffset = vec3(1.425, 3.892, 5.835);                vec2 rotCoordsR = coordRot(textureCoordinate.xy, timer + rotOffset.x);                vec3 noise = vec3(pnoise3D(vec3(imgSize / size * rotCoordsR, 0.0)));                                float luminance = mix(0.0, dot(src.rgb, lumcoeff), intensity);                luminance = clamp(1.0-luminance / 0.2, 0.0, 1.0) + luminance;                noise = mix(noise, vec3(0.0), pow(luminance, 4.0));                dst = vec4(src.rgb + noise * grain,src.a);"},e.prototype.init=function(t,e,r){this.m_grain_amount=t.fetch_float(),this.m_grain_size=t.fetch_float()+.2},e.prototype.shader_setup=function(t){var e=Math.sqrt(t.m_width*t.m_width+t.m_height*t.m_height),r=Math.sqrt(e/2828.42712);r=Math.max(r,1)*this.m_grain_size*2;var i=Math.sqrt(e/2828.42712)*this.m_grain_amount*.2,s={};s.imgSize=[t.m_width,t.m_height],s.grain_amount=i,s.grain_size=r,t.m_shader.uniforms(s)},e.parcerName="noise",e}(ft),$t=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec2 samplerSize;"},e.prototype.shader_procession=function(){return"vec2 coord = textureCoordinate/samplerSize;                if(coord.x<4.0||coord.x>1.0/samplerSize.x-4.0||coord.y<4.0||coord.y>1.0/samplerSize.y-4.0)                dst = vec4(mix(src.xyz,vec3(0.0,1.0,132.0/255.0),0.5),src.a);                else                dst = src;"},e.prototype.init=function(t,e,r){},e.prototype.shader_setup=function(t){var e={};e.samplerSize=[1/t.m_width,1/t.m_height],t.m_shader.uniforms(e)},e.parcerName="rectangle",e}(ft),te=function(t){function e(e){var r=t.call(this,e)||this;return r.m_ms=0,r.m_position=[0,0],r.m_radius=0,r.m_alpha=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec2 samplerSteps;                uniform vec2 eyePosition;                uniform float radius;                uniform float alpha;"},e.prototype.shader_procession=function(){return"vec2 realPosition = textureCoordinate / samplerSteps;                float dis1 = distance(realPosition,eyePosition);                vec4 color = src;                if(dis1 >= radius)                {                    dst = color;                }                else                {                    vec3 v = color.rgb;                    v.r = (color.g + color.b) / 2.0;                    v.g = (color.g + color.r) / 2.0;                    v.b = (color.b + color.r) / 2.0;                    float vecR = color.r - v.r;                    float vecG = color.g - v.g;                    float vecB = color.b - v.b;                                        float r1 = v.r+vecR*pow(dis1/radius,1.5);                    float g1 = v.g+vecG*pow(dis1/radius,1.5);                    float b1 = v.b+vecB*pow(dis1/radius,1.5);                    dst = vec4(r1,g1,b1,color.a);                }"},e.prototype.init=function(t,e,r){g.Symbol==t.get_parcer_status()?this.m_ms=t.lookup_symbol(["relativePosition","realPosition",0],!0):this.m_ms=0,this.m_position[0]=t.fetch_float(),this.m_position[1]=t.fetch_float(),this.m_radius=t.fetch_float(),this.m_alpha=t.fetch_float()},e.prototype.shader_setup=function(t){var e=[0,0];switch(this.m_ms){case 0:e[0]=this.m_position[0]*t.m_width,e[1]=this.m_position[1]*t.m_height;break;case 1:e[0]=this.m_position[0],e[1]=this.m_position[1];break;default:throw new Error("Unexpected Redeye Remove Model!\n")}var r={};r.samplerSteps=[1/t.m_width,1/t.m_height],r.eyePosition=[e[0],e[1]],r.radius=this.m_radius,r.alpha=this.m_alpha,t.m_shader.uniforms(r)},e.parcerName="redeyeRemove",e}(ft),ee=function(){function t(t){this.m_shader=null,this.m_warp_shader=null,this.m_width=0,this.m_height=0,this.m_last_src="",this.m_vecPoints=[],this.m_last_vecPoints=[],this.m_context=t,this.m_str_warpShader="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec2 samplerSteps;        uniform vec2 pos;        uniform vec2 v;        uniform float radius;        vec2 get_vector(float gvx, float gvy)        {            vec4 dst_v= texture2D(inputImageTexture, vec2(gvx, gvy)*samplerSteps);            vec2 result;            result.x = dst_v.x + (dst_v.z - 0.5) / 255.0;            result.x = (result.x - 0.5)*2.0;            result.y = dst_v.y + (dst_v.w - 0.5) / 255.0;            result.y = (result.y - 0.5)*2.0;            return result;        }        void main()        {            float dx = (textureCoordinate.x - pos.x)/samplerSteps.x;            float dy = (textureCoordinate.y - pos.y)/samplerSteps.y;            float r = 1.0 - ((dx / radius)*(dx / radius) + (dy / radius)*(dy / radius));            vec4 dst;            if (r > 0.0)            {                r = r*r;                float cdx = v.x*r;                float cdy = v.y*r;                float gvx = textureCoordinate.x/samplerSteps.x + cdx;                gvx = max(0.0, min(gvx, 1.0 / samplerSteps.x));                float gvy = textureCoordinate.y/samplerSteps.y + cdy;                gvy = max(0.0, min(gvy, 1.0 / samplerSteps.y));                vec2 ov;                ov = get_vector(gvx, gvy);                gvx = gvx*samplerSteps.x + ov.x;                gvy = gvy*samplerSteps.y + ov.y;                vec2 _dis = vec2(min(1.0,max(gvx - textureCoordinate.x,-1.0)),                min(1.0,max(gvy - textureCoordinate.y,-1.0)));                {                    float cx = _dis.x*127.5+128.0;                    float fcx = floor(cx);                    dst.z = cx - fcx;                    dst.x = fcx*(1.0 / 255.0);                }                {                    float cy = _dis.y*127.5 +128.0;                    float fcy = floor(cy);                    dst.w = cy - fcy;                    dst.y = fcy*(1.0 / 255.0);                            }            }            else{                dst = texture2D(inputImageTexture, textureCoordinate);            }            gl_FragColor = dst;        }",this.m_str_reshapeShader="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D reshapeMap;        void main()        {            vec2 cod,result;            vec4 dst;            vec4 trans = texture2D(reshapeMap, textureCoordinate);            result.x = trans.x + (trans.z - 0.5) / 255.0;            result.x = (result.x - 0.5)*2.0;            result.y = trans.y + (trans.w - 0.5) / 255.0;            result.y = (result.y - 0.5)*2.0;            cod.x = textureCoordinate.x - result.x;            cod.y = textureCoordinate.y - result.y;            dst = texture2D(inputImageTexture, cod);            gl_FragColor = dst;        }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.size_change(r.m_width,r.m_height),this.draw_map(t,r,2),this.m_shader||(this.m_shader=new y(null,this.m_str_reshapeShader,this.m_context.context()));var i=new w(this.m_context.context(),r,this.m_shader);i.shader_texture("inputImageTexture",e.current()),i.shader_texture("reshapeMap",this.m_deformMap),i.draw_to(e.new_temporary());var s=this.m_context.context().getError();if(s)throw new Error("basic adjust reshap: "+s);e.push_to_current()}catch(t){throw new Error("basic adjust reshap process: "+t)}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null),this.m_warp_shader&&(this.m_warp_shader.destroy(),this.m_warp_shader=null),this.size_change(0,0),this.m_deformMap&&(this.m_context.context().deleteTexture(this.m_deformMap),this.m_deformMap=null),this.m_deformMap_buffer&&(this.m_context.context().deleteTexture(this.m_deformMap_buffer),this.m_deformMap_buffer=null),this.m_last_vecPoints=[]},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.m_last_src="",this.m_deformMap&&(this.m_context.context().deleteTexture(this.m_deformMap),this.m_deformMap=null),this.m_deformMap_buffer&&(this.m_context.context().deleteTexture(this.m_deformMap_buffer),this.m_deformMap_buffer=null),this.m_last_vecPoints=[])},t.prototype.init=function(t,e,r){if(t.lookup_symbol(["coordinate","realPixel",0],!0))for(;t.test_symbol("point");){var i={vecPoints:{x:0,y:0},stress:0,radius:0};t.assume_symbol("stress"),i.stress=t.fetch_float(),t.assume_symbol("radius"),i.radius=t.fetch_float(),i.vecPoints.x=t.fetch_float(),i.vecPoints.y=t.fetch_float(),this.m_vecPoints.push(i)}else for(;t.test_symbol("point");)i={vecPoints:{x:0,y:0},stress:0,radius:0},t.assume_symbol("stress"),i.stress=t.fetch_float(),t.assume_symbol("radius"),i.radius=t.fetch_float(),i.vecPoints.x=t.fetch_float()*e,i.vecPoints.y=t.fetch_float()*r,this.m_vecPoints.push(i);if(this.m_vecPoints.length<2)throw new Error("need more point")},t.prototype.draw_map=function(t,e,r){if(this.m_deformMap||(this.m_deformMap=this.m_context.create_new_texture(e.m_width/r,e.m_height/r,!0),this.map_color_clear(e,this.m_deformMap),this.m_last_src=""),this.m_deformMap_buffer||(this.m_deformMap_buffer=this.m_context.create_new_texture(e.m_width/r,e.m_height/r,!0),this.map_color_clear(e,this.m_deformMap_buffer)),t.get_log()!=this.m_last_src&&(this.map_color_clear(e,this.m_deformMap),this.map_color_clear(e,this.m_deformMap_buffer),this.m_last_src=t.get_log()),this.init(t,e.m_width,e.m_height),this.points_change()&&(this.map_color_clear(e,this.m_deformMap),this.map_color_clear(e,this.m_deformMap_buffer)),this.m_vecPoints.length){this.m_warp_shader||(this.m_warp_shader=new y(null,this.m_str_warpShader,this.m_context.context()));for(var i=!0,s=0;s<this.m_vecPoints.length-1;++s)for(var a=this.m_vecPoints[s].vecPoints.x,o=this.m_vecPoints[s].vecPoints.y,n=this.m_vecPoints[s+1].vecPoints.x,_=this.m_vecPoints[s+1].vecPoints.y,m=this.m_vecPoints[s+1].stress,h=this.m_vecPoints[s+1].radius,c=n-a,l=_-o,u=Math.sqrt(c*c+l*l),f=Math.floor(4*u/h)+1,p=c/f,d=l/f,g=[p*m,d*m],v=1;v<=f;++v){var x=new w(this.m_context.context(),null,this.m_warp_shader,e.m_width/r,e.m_height/r,e.m_frameBuffer);i?x.shader_texture("inputImageTexture",this.m_deformMap):x.shader_texture("inputImageTexture",this.m_deformMap_buffer);var b={};b.pos=[(a+v*p)/e.m_width,(o+v*d)/e.m_height],b.radius=h,b.samplerSteps=[1/e.m_width,1/e.m_height],b.v=g,x.m_shader.uniforms(b),i?x.draw_to(this.m_deformMap_buffer):x.draw_to(this.m_deformMap),i=!i}if(!i){var z=void 0;z=this.m_deformMap,this.m_deformMap=this.m_deformMap_buffer,this.m_deformMap_buffer=z,z=null}var T=this.m_context.context().getError();if(T)throw new Error("basic adjust reshap draw map: "+T);this.m_vecPoints=[]}},t.prototype.map_color_clear=function(t,e){this.m_context.context().bindFramebuffer(this.m_context.context().FRAMEBUFFER,t.m_frameBuffer),this.m_context.context().framebufferTexture2D(this.m_context.context().FRAMEBUFFER,this.m_context.context().COLOR_ATTACHMENT0,this.m_context.context().TEXTURE_2D,e,0),this.m_context.context().clearColor(.5,.5,0,0),this.m_context.context().clear(this.m_context.context().COLOR_BUFFER_BIT)},t.prototype.points_change=function(){if(this.m_vecPoints.length<this.m_last_vecPoints.length||!this.m_last_vecPoints.length)return this.m_last_vecPoints=this.m_vecPoints,!0;for(var t=this.m_last_vecPoints.length,e=0;e<t;++e)if(this.m_vecPoints[e].radius!=this.m_last_vecPoints[e].radius||this.m_vecPoints[e].stress!=this.m_last_vecPoints[e].stress||this.m_vecPoints[e].vecPoints.x!=this.m_last_vecPoints[e].vecPoints.x||this.m_vecPoints[e].vecPoints.y!=this.m_last_vecPoints[e].vecPoints.y)return this.m_last_vecPoints=this.m_vecPoints,!0;return this.m_vecPoints.length==this.m_last_vecPoints.length?(this.m_vecPoints=[],!1):(this.m_last_vecPoints=this.m_vecPoints,this.m_vecPoints=this.m_vecPoints.slice(t-1),!1)},t.parcerName="reshape",t}(),re=function(){function t(t){this.m_shader=null,this.m_stress=0,this.m_context=t,this.m_str_reshapeShader=" varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D reshapeMap;        uniform float stress;                        void main()        {            vec2 cod,result;            vec4 dst;            vec4 trans = texture2D(reshapeMap, textureCoordinate);                    float mid = 127.0;            result.x = trans.x*255.0 + (trans.z*(255.0/256.0));            result.x = (result.x - mid)/127.0;                    result.y = trans.y*255.0 + (trans.w*(255.0/256.0));            result.y = (result.y - mid)/127.0;                    cod.x = textureCoordinate.x - result.x*stress;            cod.y = textureCoordinate.y - result.y*stress;                            dst = texture2D(inputImageTexture, cod);            dst.xyz = dst.xyz*vec3(dst.a);            gl_FragColor = dst;        }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.init(t),this.m_shader||(this.m_shader=new y(null,this.m_str_reshapeShader,this.m_context.context()));var i=new w(this.m_context.context(),r,this.m_shader),s=this.m_context.lock_image("","reshape");if(!s)throw new Error("cannot find reshape cache");i.shader_texture("inputImageTexture",e.current()),i.shader_texture("reshapeMap",s);var a={};a.stress=this.m_stress,i.m_shader.uniforms(a),i.draw_to(e.new_temporary());var o=this.m_context.context().getError();if(o)throw new Error("reshapeDraw: "+o);e.push_to_current()}catch(t){throw new Error("reshapeDraw process: "+t)}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},t.prototype.init=function(t){t.assume_symbol("useCache"),t.assume_symbol("stress"),this.m_stress=t.fetch_float()},t.parcerName="reshapeDraw",t}(),ie=function(){function t(t){this.m_warp_shader=null,this.m_test_shader=null,this.m_width=0,this.m_height=0,this.m_vecPoints=[],this.m_GPU_precision_error_flag={haveTest:!1,errorStatus:!1},this.m_context=t,this.m_str_rectangleShader="attribute vec2 vertex;         attribute vec2 _texCoord;        varying vec2 textureCoordinate;        void main(){            textureCoordinate = _texCoord;            gl_Position = vec4(vertex*2.0 - 1.0, 0.0, 1.0);        }",this.m_str_testShader="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        void main(){            gl_FragColor = texture2D(inputImageTexture,textureCoordinate);        }",this.m_str_warpWithSamplerShader="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec2 samplerSteps;        uniform vec2 pos;        uniform vec2 v;        uniform float radius;        vec4 sampler(vec2 coord)        {            vec2 real = coord/samplerSteps-0.5;            vec2 freal = floor(real);            vec4 lb = texture2D(inputImageTexture,(freal+vec2(0.5,0.5))*samplerSteps);            vec4 lt = texture2D(inputImageTexture,(vec2(freal.x,freal.y + 1.0) + vec2(0.5,0.5))*samplerSteps);            vec4 rb = texture2D(inputImageTexture,(vec2(freal.x + 1.0,freal.y) + vec2(0.5,0.5))*samplerSteps);            vec4 rt = texture2D(inputImageTexture,(vec2(freal.x + 1.0,freal.y+1.0) + vec2(0.5,0.5))*samplerSteps);            vec4 horizonB = mix(lb,rb,(real-freal).x);            vec4 horizonT = mix(lt,rt,(real-freal).x);            vec4 dst = mix(horizonB,horizonT,(real-freal).y);            return dst;            }            vec2 get_vector(float gvx, float gvy)        {            vec4 dst_v= sampler(vec2(gvx, gvy)*samplerSteps);            vec2 result;            float mid = 127.0;            result.x = dst_v.x*255.0 + (dst_v.z * (255.0/256.0));            result.x = (result.x - mid)/127.0;            result.y = dst_v.y*255.0 + (dst_v.w * (255.0/256.0));            result.y = (result.y - mid)/127.0;            return result;        }        void main()        {            float dx = (textureCoordinate.x - pos.x)/samplerSteps.x;            float dy = (textureCoordinate.y - pos.y)/samplerSteps.y;            float r = 1.0 - ((dx / radius)*(dx / radius) + (dy / radius)*(dy / radius));            vec4 dst;            if (r > 0.0)            {                r = r*r;                float cdx = v.x*r;                float cdy = v.y*r;                            float gvx;                gvx = textureCoordinate.x/samplerSteps.x + cdx;                            gvx = max(0.0, min(gvx, 1.0 / samplerSteps.x));                            float gvy;                gvy = textureCoordinate.y/samplerSteps.y + cdy;                                gvy = max(0.0, min(gvy, 1.0 / samplerSteps.y));                vec2 ov;                ov = get_vector(gvx, gvy);                gvx = gvx*samplerSteps.x + ov.x;                gvy = gvy*samplerSteps.y + ov.y;                vec2 _dis = vec2(min(1.0,max(gvx - textureCoordinate.x,-0.999999)),                min(1.0,max(gvy - textureCoordinate.y,-0.999999)));                float mid = 127.0;                {                    float cx = _dis.x*127.0+mid;                    float fcx = floor(cx);                    dst.z = (cx - fcx)* (256.0/255.0);                    dst.x = fcx*(1.0 / 255.0);                }                {                    float cy = _dis.y*127.0 +mid;                    float fcy = floor(cy);                    dst.w = (cy - fcy) * (256.0/255.0);                    dst.y = fcy*(1.0 / 255.0);                            }            }            else{                dst = sampler(textureCoordinate);            }            gl_FragColor = dst;        }",this.m_str_warpShader="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec2 samplerSteps;        uniform vec2 pos;        uniform vec2 v;        uniform float radius;        vec2 get_vector(float gvx, float gvy)        {            vec4 dst_v= texture2D(inputImageTexture, vec2(gvx, gvy)*samplerSteps);            vec2 result;            float mid = 127.0;            result.x = dst_v.x*255.0 + (dst_v.z * (255.0/256.0));            result.x = (result.x - mid)/127.0;            result.y = dst_v.y*255.0 + (dst_v.w * (255.0/256.0));            result.y = (result.y - mid)/127.0;            return result;        }        void main()        {            float dx = (textureCoordinate.x - pos.x)/samplerSteps.x;            float dy = (textureCoordinate.y - pos.y)/samplerSteps.y;            float r = 1.0 - ((dx / radius)*(dx / radius) + (dy / radius)*(dy / radius));            vec4 dst;            if (r > 0.0)            {                r = r*r;                float cdx = v.x*r;                float cdy = v.y*r;                            float gvx;                gvx = textureCoordinate.x/samplerSteps.x + cdx;                            gvx = max(0.0, min(gvx, 1.0 / samplerSteps.x));                            float gvy;                gvy = textureCoordinate.y/samplerSteps.y + cdy;                                gvy = max(0.0, min(gvy, 1.0 / samplerSteps.y));                vec2 ov;                ov = get_vector(gvx, gvy);                gvx = gvx*samplerSteps.x + ov.x;                gvy = gvy*samplerSteps.y + ov.y;                vec2 _dis = vec2(min(1.0,max(gvx - textureCoordinate.x,-0.999999)),                min(1.0,max(gvy - textureCoordinate.y,-0.999999)));                float mid = 127.0;                {                    float cx = _dis.x*127.0+mid;                    float fcx = floor(cx);                    dst.z = (cx - fcx)* (256.0/255.0);                    dst.x = fcx*(1.0 / 255.0);                }                {                    float cy = _dis.y*127.0 +mid;                    float fcy = floor(cy);                    dst.w = (cy - fcy) * (256.0/255.0);                    dst.y = fcy*(1.0 / 255.0);                            }            }            else{                dst = texture2D(inputImageTexture, textureCoordinate);            }            gl_FragColor = dst;        }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.size_change(r.m_width,r.m_height),this.draw_map(t,r,2,e)}catch(t){throw new Error("basic adjust reshape map process: "+t)}},t.prototype.destroy=function(){this.m_deformMap_buffer&&(this.m_context.context().deleteTexture(this.m_deformMap_buffer),this.m_deformMap_buffer=null)},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.m_deformMap_buffer&&(this.m_context.context().deleteTexture(this.m_deformMap_buffer),this.m_deformMap_buffer=null))},t.prototype.init=function(t,e,r){if(t.lookup_symbol(["coordinate","realPixel",0],!0))for(;t.test_symbol("point");){var i={vecPoints:{x:0,y:0},stress:0,radius:0};t.assume_symbol("stress"),i.stress=t.fetch_float(),t.assume_symbol("radius"),i.radius=t.fetch_float(),i.vecPoints.x=t.fetch_float(),i.vecPoints.y=t.fetch_float(),this.m_vecPoints.push(i)}else for(;t.test_symbol("point");)i={vecPoints:{x:0,y:0},stress:0,radius:0},t.assume_symbol("stress"),i.stress=t.fetch_float(),t.assume_symbol("radius"),i.radius=t.fetch_float(),i.vecPoints.x=t.fetch_float()*e,i.vecPoints.y=t.fetch_float()*r,this.m_vecPoints.push(i);if(this.m_vecPoints.length<2)throw new Error("need more point")},t.prototype.gpu_linear_test=function(t){var e=this.m_context.create_new_texture(128,1,!0),r=this.m_context.create_new_texture(2,1,!0);this.m_context.context().texSubImage2D(this.m_context.context().TEXTURE_2D,0,0,0,2,1,this.m_context.context().RGBA,this.m_context.context().UNSIGNED_BYTE,new Uint8Array([255,255,255,255,0,0,0,255])),this.m_test_shader||(this.m_test_shader=new y(null,this.m_str_testShader,this.m_context.context()));var i=new w(this.m_context.context(),null,this.m_test_shader,128,1,t.m_frameBuffer);i.shader_texture("inputImageTexture",r),i.draw_to(e);var s=new Uint8Array(16);this.m_context.context().bindFramebuffer(this.m_context.context().FRAMEBUFFER,t.m_frameBuffer),this.m_context.context().framebufferTexture2D(this.m_context.context().FRAMEBUFFER,this.m_context.context().COLOR_ATTACHMENT0,this.m_context.context().TEXTURE_2D,e,0),this.m_context.context().readPixels(64,0,4,1,this.m_context.context().RGBA,this.m_context.context().UNSIGNED_BYTE,s),this.m_GPU_precision_error_flag.errorStatus=!1;for(var a=0;a<4;++a)for(var o=0;o<4;o++)o!=a&&s[4*o]==s[4*a]&&(this.m_GPU_precision_error_flag.errorStatus=!0);this.m_GPU_precision_error_flag.haveTest=!0;var n=this.m_context.context().getError();if(n)throw new Error("reshapeMap gpu_linear_test: "+n)},t.prototype.draw_map=function(t,e,r,i){if(this.m_context.context().disable(this.m_context.context().BLEND),this.m_GPU_precision_error_flag.haveTest||this.gpu_linear_test(e),this.init(t,e.m_width,e.m_height),this.m_vecPoints.length){this.m_warp_shader||(this.m_GPU_precision_error_flag.errorStatus?this.m_warp_shader=new y(this.m_str_rectangleShader,this.m_str_warpWithSamplerShader,this.m_context.context()):this.m_warp_shader=new y(this.m_str_rectangleShader,this.m_str_warpShader,this.m_context.context())),this.m_deformMap_buffer||(this.m_deformMap_buffer=this.m_context.create_new_texture(e.m_width,e.m_height));for(var s=0;s<this.m_vecPoints.length-1;++s)for(var a=this.m_vecPoints[s].vecPoints.x,o=this.m_vecPoints[s].vecPoints.y,n=this.m_vecPoints[s+1].vecPoints.x,_=this.m_vecPoints[s+1].vecPoints.y,m=this.m_vecPoints[s+1].stress,h=this.m_vecPoints[s+1].radius,c=n-a,l=_-o,u=Math.sqrt(c*c+l*l),f=Math.floor(4*u/h)+1,p=c/f,d=l/f,g=[p*m,d*m],v=1;v<=f;++v){var x=Math.min(e.m_width,Math.max(0,a+v*p-h)),w=Math.min(e.m_height,Math.max(0,o+v*d-h)),b=Math.min(e.m_width,Math.max(0,a+v*p+h)),z=Math.min(e.m_height,Math.max(0,o+v*d+h)),T=Math.min(z+.5,e.m_height)/e.m_height,E=Math.max(x-.5,0)/e.m_width,C=Math.min(b+.5,e.m_width)/e.m_width,S=Math.max(w-.5,0)/e.m_height,M=new Float32Array([E,S,E,T,C,S,C,T]),D=new Float32Array([E,S,E,T,C,S,C,T]);this.m_context.context().activeTexture(this.m_context.context().TEXTURE0),this.m_context.context().bindTexture(this.m_context.context().TEXTURE_2D,i.current());this.m_warp_shader.textures({inputImageTexture:0}),this.m_context.context().bindFramebuffer(this.m_context.context().FRAMEBUFFER,e.m_frameBuffer),this.m_context.context().framebufferTexture2D(this.m_context.context().FRAMEBUFFER,this.m_context.context().COLOR_ATTACHMENT0,this.m_context.context().TEXTURE_2D,this.m_deformMap_buffer,0),this.m_context.context().viewport(0,0,e.m_width,e.m_height);var R={};R.pos=[(a+v*p)/e.m_width,(o+v*d)/e.m_height],R.radius=h,R.samplerSteps=[1/e.m_width,1/e.m_height],R.v=[g[0],g[1]],this.m_warp_shader.uniforms(R),this.m_warp_shader.drawRect(M,D),this.m_context.context().copyTexSubImage2D(this.m_context.context().TEXTURE_2D,0,x,w,x,w,b-x,z-w)}var A=this.m_context.context().getError();if(A)throw new Error("reshapeMap draw_map: "+A);this.m_vecPoints=[]}},t.parcerName="reshapeMap",t}(),se=function(t){function e(e){var r=t.call(this,e)||this;return r.m_angle=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"  uniform vec4 trans; "},e.prototype.shader_procession=function(){return"                vec2 coord = textureCoordinate - vec2(0.5, 0.5);                        coord = vec2(coord.x*trans.x + coord.y*trans.y,                coord.x*trans.z + coord.y*trans.w);                        coord = coord + vec2(0.5, 0.5);                        dst = texture2D(inputImageTexture, coord); "},e.prototype.init=function(t,e,r){this.m_angle=t.fetch_float()},e.prototype.shader_setup=function(t){var e=Math.abs(10*this.m_angle)%1800;(e/=10)>90&&(e=180-e),e=e/180*3.14159265358;var r=Math.sqrt(t.m_width/2*(t.m_width/2)+t.m_height/2*(t.m_height/2)),i=Math.min(t.m_width,t.m_height),s=Math.acos(i/2/r)-e,a=i/2/Math.cos(s)/r;e=this.m_angle/180*3.14159265358;var o=[Math.cos(e)*a,-Math.sin(e)*a*t.m_height/t.m_width,Math.sin(e)*a*t.m_width/t.m_height,Math.cos(e)*a],n={};n.trans=o,t.m_shader.uniforms(n)},e.parcerName="rotation",e}(ft),ae=function(t){function e(e){var r=t.call(this,e)||this;return r.m_intensity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float intensity;"},e.prototype.shader_procession=function(){return"float lum = (max(max(src.r, src.g),src.b) + min(min(src.r, src.g), src.b)) / 2.0;                dst = vec4(mix(vec3(lum), src.rgb, intensity), src.a);"},e.prototype.init=function(t,e,r){this.m_intensity=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.intensity=this.m_intensity,t.m_shader.uniforms(e)},e.parcerName="saturation",e}(ft),oe=function(){function t(t){this.m_shader=null,this.m_radius=0,this.m_context=t,this.m_simplyMosaicShader="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec2 samplerSteps;        uniform float intensity;        uniform float blurPixels;        void main()        {            vec2 coord = floor(textureCoordinate / samplerSteps / blurPixels) * samplerSteps * blurPixels;            vec4 src = texture2D(inputImageTexture, textureCoordinate);            vec4 mosaic = texture2D(inputImageTexture, coord + samplerSteps * 0.5);            gl_FragColor = vec4(mosaic.rgb,src.a);}"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.init(t,r.m_width,r.m_height),this.m_shader||(this.m_shader=new y(null,this.m_simplyMosaicShader,this.m_context.context()));var i=new w(this.m_context.context(),r,this.m_shader);i.shader_texture("inputImageTexture",e.current()),this.shader_setup(i),i.draw_to(e.new_temporary());var s=this.m_context.context().getError();if(s)throw new Error("SimplyMosaic: "+s);e.push_to_current()}catch(t){throw new Error("SimplyMosaic process: "+t)}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},t.prototype.init=function(t,e,r){t.assume_symbol("radius"),t.test_symbol("relToWidth")?this.m_radius=t.fetch_float(0,1)*e:this.m_radius=t.fetch_float()},t.prototype.shader_setup=function(t){this.m_radius>t.m_width/3&&(this.m_radius=30);var e={};e.blurPixels=this.m_radius,e.samplerSteps=[1/t.m_width,1/t.m_height],t.m_shader.uniforms(e)},t.parcerName="simplyMosaic",t}(),ne=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"const float fh_red = 0.1;                const float fh_yellow = -0.7;                const float fh_green = -0.7;                const float fh_cyan = -0.7;                const float fh_blue = -0.7;                const float fh_magenta = 0.1;"},e.prototype.shader_procession=function(){return"vec3 dst3;                vec3 hsv;                vec3 tmp_s;                float fmax;                float fmin;                float fdelta;                float fs_off;                dst3 = src.rgb;                fmax = max(dst3.r,max(dst3.g,dst3.b));                fmin = min(dst3.r,min(dst3.g,dst3.b));                fdelta = fmax - fmin;                hsv.z = fmax;                if(0.0 == fdelta)                {                    hsv.x = 0.0;                    hsv.y = 0.0;                    tmp_s = dst3;                }                else                {                    hsv.y = fdelta/fmax;                    if(fmax == dst3.r)                    {                        if(dst3.g >= dst3.b)                        {                            hsv.x = (dst3.g - dst3.b)/fdelta;                            fs_off = (fh_yellow - fh_red)*hsv.x + fh_red;                            hsv.y = hsv.y*(1.0 + fs_off);                            hsv.y = min(1.0 , hsv.y);                            hsv.y = max(0.0 , hsv.y);                            dst3.r = hsv.z;                            dst3.b = hsv.z*(1.0 - hsv.y);                            dst3.g = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                            tmp_s = dst3;                            hsv.x = 0.658325;                            dst3.r = hsv.z;                            dst3.b = hsv.z*(1.0 - hsv.y);                            dst3.g = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                        }                        else                        {                            hsv.x = (dst3.r - dst3.b)/fdelta;                            fs_off = (fh_red - fh_magenta)*hsv.x + fh_magenta;                            hsv.y = hsv.y*(1.0 + fs_off);                            hsv.y = min(1.0 , hsv.y);                            hsv.y = max(0.0 , hsv.y);                            dst3.r = hsv.z;                            dst3.g = hsv.z*(1.0 - hsv.y);                            dst3.b = hsv.z*(1.0 - hsv.y*hsv.x);                            tmp_s = dst3;                            hsv.x = 0.658325;                            dst3.r = hsv.z;                            dst3.g = hsv.z*(1.0 - hsv.y);                            dst3.b = hsv.z*(1.0 - hsv.y*hsv.x);                        }                    }                    else if(fmax == dst3.g)                    {                        if(dst3.r > dst3.b)                        {                            hsv.x = (dst3.g - dst3.r)/fdelta;                            fs_off = (fh_green - fh_yellow)*hsv.x + fh_yellow;                            hsv.y = hsv.y*(1.0 + fs_off);                            hsv.y = min(1.0 , hsv.y);                            hsv.y = max(0.0 , hsv.y);                            dst3.g = hsv.z;                            dst3.r = hsv.z*(1.0 - hsv.y*hsv.x);                            dst3.b = hsv.z*(1.0 - hsv.y);                            tmp_s = dst3;                            hsv.x = 0.658325;                            dst3.g = hsv.z;                            dst3.r = hsv.z*(1.0 - hsv.y*hsv.x);                            dst3.b = hsv.z*(1.0 - hsv.y);                        }                        else                        {                            hsv.x = (dst3.b - dst3.r)/fdelta;                            fs_off = (fh_cyan - fh_green)*hsv.x + fh_green;                            hsv.y = hsv.y*(1.0 + fs_off);                            hsv.y = min(1.0 , hsv.y);                            hsv.y = max(0.0 , hsv.y);                            dst3.g = hsv.z;                            dst3.r = hsv.z*(1.0 - hsv.y);                            dst3.b = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                            tmp_s = dst3;                            hsv.x = 0.658325;                            dst3.g = hsv.z;                            dst3.r = hsv.z*(1.0 - hsv.y);                            dst3.b = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                        }                    }                    else                    {                        if(dst3.g > dst3.r)                        {                            hsv.x = (dst3.b - dst3.g)/fdelta;                            fs_off = (fh_blue - fh_cyan)*hsv.x + fh_cyan;                            hsv.y = hsv.y*(1.0 + fs_off);                            hsv.y = min(1.0 , hsv.y);                            hsv.y = max(0.0 , hsv.y);                            dst3.b = hsv.z;                            dst3.r = hsv.z*(1.0 - hsv.y);                            dst3.g = hsv.z*(1.0 - hsv.y*hsv.x);                            tmp_s = dst3;                            hsv.x = 0.658325;                            dst3.b = hsv.z;                            dst3.r = hsv.z*(1.0 - hsv.y);                            dst3.g = hsv.z*(1.0 - hsv.y*hsv.x);                        }                        else                        {                            hsv.x = (dst3.r - dst3.g)/fdelta;                            fs_off = (fh_magenta - fh_blue)*hsv.x + fh_blue;                            hsv.y = hsv.y*(1.0 + fs_off);                            hsv.y = min(1.0 , hsv.y);                            hsv.y = max(0.0 , hsv.y);                            dst3.b = hsv.z;                            dst3.r = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                            dst3.g = hsv.z*(1.0 - hsv.y);                            tmp_s = dst3;                            hsv.x = 0.658325;                            dst3.b = hsv.z;                            dst3.r = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                            dst3.g = hsv.z*(1.0 - hsv.y);                        }                    }                }                dst3.r = hsv.z;                dst3.g = hsv.z*(1.0 - hsv.y);                dst3.b = hsv.z*(1.0 - hsv.y*hsv.x);                dst3 = tmp_s * 0.69 + dst3 * 0.31;                dst = vec4(dst3,src.a);"},e.prototype.init=function(t,e,r){},e.prototype.shader_setup=function(t){},e.parcerName="special",e}(ft),_e=function(t){function e(e){var r=t.call(this,e)||this;return r.m_intensity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"  uniform float intensity; "},e.prototype.shader_procession=function(){return"                vec3 _dst;                if (src.r < src.g)                {                    if (src.r < src.b)                    {                        _dst.r = src.r + 0.587 * (src.g - src.r) + 0.114 * (src.b - src.r);                        _dst.g = max(src.g, _dst.r);                        _dst.b = max(src.b, _dst.r);                    }                    else                    {                        _dst = src.rgb;                    }                }                else                {                    if (src.g < src.b)                    {                        _dst.g = src.g + 0.299 * (src.r - src.g) + 0.114 * (src.b - src.g);                        _dst.r = max(src.r, _dst.g);                        _dst.b = max(src.b, _dst.g);                    }                    else                    {                        _dst.b = src.b + 0.299 * (src.r - src.b) + 0.587 * (src.g - src.b);                        _dst.r = max(src.r, _dst.b);                        _dst.g = max(src.g, _dst.b);                    }                }                dst = vec4(mix(src.rgb, _dst, intensity), src.a);                "},e.prototype.init=function(t,e,r){this.m_intensity=t.fetch_float()/100},e.prototype.shader_setup=function(t){var e={};e.intensity=this.m_intensity,t.m_shader.uniforms(e)},e.parcerName="teethWhiten",e}(ft),me=function(t){function e(e){var r=t.call(this,e)||this;return r.m_start=0,r.m_range=0,r.m_factor=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec2 vignette;                uniform vec2 vignetteCenter;                uniform float factor;"},e.prototype.shader_procession=function(){return"float d = distance(textureCoordinate, vignetteCenter);                float percent = clamp((d - vignette.x) / vignette.y, 0.0, 1.0);                float alpha = (1.0 - percent*percent)*factor;                dst = vec4(src.rgb * alpha, src.a);"},e.prototype.init=function(t,e,r){this.m_start=t.fetch_float(),this.m_range=t.fetch_float(),t.test_symbol("factor")?this.m_factor=t.fetch_float():this.m_factor=1},e.prototype.shader_setup=function(t){var e={vignetteCenter:[.5,.5]};e.vignette=[this.m_start,this.m_range],e.factor=this.m_factor,t.m_shader.uniforms(e)},e.parcerName="vignette",e}(ft),he=function(t){function e(e){var r=t.call(this,e)||this;return r.m_start=0,r.m_range=0,r.m_color=[0,0,0,0],r.m_intensity=0,r.m_round=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec2 vignette;                uniform vec2 vignetteCenter;                uniform vec4 vignetteColor;                uniform float intensity;                uniform float vignette_roundness;                uniform vec2 size;"},e.prototype.shader_procession=function(){return"vec2 dist = textureCoordinate - vignetteCenter;                float scalex = mix(1.0, max(1.0, size.x / size.y), vignette_roundness);                float scaley = mix(1.0, max(1.0, size.y / size.x), vignette_roundness);                vec2 size_weight = vec2(scalex, scaley);                dist += dist*(size_weight - 1.0)*float(vignette_roundness >= 0.0);                float order_norm = 1.0 / mix(0.5, 0.05, max(0.0, -vignette_roundness));                float dist_norm = pow(pow(abs(dist.x), order_norm) + pow(abs(dist.y), order_norm), 1.0 / order_norm);                float percent = clamp((dist_norm - vignette.x) / vignette.y, 0.0, 1.0);                percent = percent * percent * (3.0 - 2.0 * percent);                float alpha = 1.0 *intensity*percent;                dst = vec4(vec3(vignetteColor.xyz),alpha);"},e.prototype.init=function(t,e,r){this.m_start=t.fetch_float(),this.m_range=t.fetch_float(),t.assume_symbol("color"),this.m_color[0]=t.fetch_float(0,255),this.m_color[1]=t.fetch_float(0,255),this.m_color[2]=t.fetch_float(0,255),this.m_color[3]=t.fetch_float(0,255),t.assume_symbol("intensity"),this.m_intensity=t.fetch_float(),this.m_round=0,t.test_symbol("round")&&(this.m_round=t.fetch_float())},e.prototype.shader_setup=function(t){var e={vignetteCenter:[.5,.5]};e.vignette=[this.m_start,this.m_range],e.vignetteColor=[this.m_color[0]/255,this.m_color[1]/255,this.m_color[2]/255,this.m_color[3]/255],e.intensity=this.m_intensity,e.vignette_roundness=this.m_round,e.size=[t.m_width,t.m_height],t.m_shader.uniforms(e)},e.parcerName="vignetteAdjust",e}(ft),ce=function(t){function e(e){var r=t.call(this,e)||this;return r.m_temperature=0,r.m_tint=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float temperature;                uniform float tint;                vec3 whiteBalance(vec3 src, float temp, float tint)                {                    temp = clamp(temp, 1200.0, 12000.0);                    tint = clamp(tint, 0.02, 5.0);                    float xD;                    temp /= 1000.0;                    if(temp < 4.0)                        xD = 0.27475 / (temp * temp * temp) - 0.98598 / (temp * temp) + 1.17444 / temp + 0.145986;                    else if(temp < 7.0)                        xD = -4.6070 / (temp * temp * temp) + 2.9678 / (temp * temp) + 0.09911 / temp + 0.244063;                    else xD = -2.0064 / (temp * temp * temp) + 1.9018 / (temp * temp) + 0.24748 / temp + 0.237040;                    float yD = -3.0 * xD * xD + 2.87 * xD - 0.275;                    float X = xD / yD;                    float Z = (1.0 - xD - yD) / yD;                    vec3 color;                    color.r = X * 3.24074 - 1.53726 - Z * 0.498571;                    color.g = -X * 0.969258 + 1.87599 + Z * 0.0415557;                    color.b = X * 0.0556352 - 0.203996 + Z * 1.05707;                    color.g /= tint;                    color /= max(max(color.r, color.g), color.b);                    color = 1.0 / color;                    color /= color.r * 0.299 + color.g * 0.587 + color.b * 0.114;                    return src * color;                }                vec3 map_color(vec3 src, float lum)                {                    vec3 h = src - lum;                    if(src.r > 1.0)                    {                        float tmp = 1.0 - lum;                        h.g = h.g * tmp / h.r;                        h.b = h.b * tmp / h.r;                        h.r = tmp;                    }                    float t3r = h.b + lum;                    if(t3r < -0.00003)                    {                        src.rg = lum - h.rg * lum / h.b;                        src.b = 0.0;                    }                    else                    {                        src.rg = lum + h.rg;                        src.b = t3r;                    }                    return src;                }                vec3 dispatch(vec3 src)                {                    float lum = dot(src, vec3(0.299, 0.587, 0.114));                    if(src.g > src.b)                    {                        if(src.r > src.g)                        {                            src = map_color(src, lum);                        }                        else if(src.r > src.b)                        {                            src.grb = map_color(src.grb, lum);                        }                        else                        {                            src.gbr = map_color(src.gbr, lum);                        }                    }                    else                    {                        if(src.g > src.r)                        {                            src.bgr = map_color(src.bgr, lum);                        }                        else if(src.b > src.r)                        {                            src.brg = map_color(src.brg, lum);                        }                        else                        {                            src.rbg = map_color(src.rbg, lum);                        }                    }                    return src;                }                "},e.prototype.shader_procession=function(){return"src.rgb = dispatch(whiteBalance(src.rgb, temperature, tint));                dst = src;"},e.prototype.init=function(t,e,r){this.m_temperature=t.fetch_float(),this.m_temperature=5400*this.m_temperature+6500,this.m_tint=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.temperature=this.m_temperature,e.tint=this.m_tint,t.m_shader.uniforms(e)},e.parcerName="whiteBalance",e}(ft),le=function(){function t(){this.m_src_width=0,this.m_src_height=0,this.m_dst_width=0,this.m_dst_height=0,this.m_x_start=0,this.m_y_start=0,this.m_emb_width=0,this.m_emb_height=0}return t.prototype.get_trans=function(t){t[0]=this.m_dst_width/this.m_emb_width,t[1]=this.m_dst_height/this.m_emb_height,t[2]=-this.m_x_start/this.m_emb_width,t[3]=-this.m_y_start/this.m_emb_height},t.prototype.get_rev_trans=function(t){t[0]=this.m_emb_width/this.m_dst_width,t[1]=this.m_emb_height/this.m_dst_height,t[2]=this.m_x_start/this.m_dst_width,t[3]=this.m_y_start/this.m_dst_height},t}(),ue=function(t){function e(e){var r=t.call(this)||this;return r.m_shader=null,r.m_context=e,r.m_str_fshFragDownProcTemplate="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec2 sft;            vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate + sft * cd);        }            void main()        {            vec4 dst;        %s                gl_FragColor = dst;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_str_fshFragDownProcTemplate.replace(/%s/g,this.shader_procession());this.m_shader||(this.m_shader=new y(null,a,this.m_context.context()));var o=new w(this.m_context.context(),null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e);var n={};n.sft=[1/r,1/i],o.m_shader.uniforms(n),o.draw_to(t);var _=this.m_context.context().getError();if(_)throw new Error("FragDownProcTemplate: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),fe=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"vec4 src = get_sample(vec2(-0.25,-0.25));        dst =  src * src * src;        src = get_sample(vec2( 0.25,-0.25));        dst += src * src * src;        src = get_sample(vec2(-0.25, 0.25));        dst += src * src * src;        src = get_sample(vec2( 0.25, 0.25));        dst += src * src * src;        dst = pow(dst * vec4(0.25),vec4(1.0 / 3.0));"},e}(ue),pe=function(t){function e(e){var r=t.call(this)||this;return r.m_shader=null,r.m_context=e,r.m_str_fshFragFilterProcTemplate="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec2 sft;            vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate + sft * cd);        }            void main()        {            vec4 dst = vec4(0.0);            %s                gl_FragColor = dst;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){if(!this.m_shader){var a=this.m_str_fshFragFilterProcTemplate.replace(/%s/g,this.shader_procession());this.m_shader=new y(null,a,this.m_context.context())}var o=new w(this.m_context.context(),null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e);var n={};n.sft=[1/r,1/i],o.m_shader.uniforms(n),o.draw_to(t);var _=this.m_context.context().getError();if(_)throw new Error("FragFilterProcTemplate: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),de=function(t){function e(e,r){var i=t.call(this)||this;return i.m_shader=null,i.m_context=e,i.m_num=r,i.m_str_fshFragFilterProcTemplate="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec2 sft;            vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate + sft * cd);        }            void main()        {            vec4 dst = vec4(0.0);            %s                gl_FragColor = dst;        }",i}return s(e,t),e.prototype.process=function(t,e,r,i,s){if(!this.m_shader){for(var a="varying vec2 textureCoordinate;            uniform vec2 sft;",o=0;o<this.m_num;++o)a+="uniform sampler2D inputImageTexture"+(o+1).toString()+";                ";for(o=0;o<this.m_num;++o)a+="vec4 get_sample"+(o+1).toString()+"(vec2 cd){                ",a+="return texture2D(inputImageTexture"+(o+1).toString()+", textureCoordinate + sft * cd);}                ";a+="void main(){ vec4 dst = vec4(0.0);            ",a+=this.shader_procession(),a+="gl_FragColor = dst;}",this.m_shader=new y(null,a,this.m_context.context())}var n=new w(this.m_context.context(),null,this.m_shader,r,i,s);for(o=0;o<this.m_num;++o)n.shader_texture("inputImageTexture"+(o+1).toString(),e[o]);var _={};_.sft=[1/r,1/i],n.m_shader.uniforms(_),n.draw_to(t);var m=this.m_context.context().getError();if(m)throw new Error("FragMultiFilterProcTemplate: "+m)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),ge=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"vec4 src = get_sample(vec2(-1.0,-1.0));        dst =  src * src * src;        src = get_sample(vec2( 0.0,-1.0));        dst += src * src * src;        src = get_sample(vec2(-1.0, 0.0));        dst += src * src * src;        src = get_sample(vec2( 0.0, 0.0));        dst += src * src * src;        dst = pow(dst * vec4(0.25),vec4(1.0 / 3.0));        "},e}(pe),ve=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"vec4 src = get_sample(vec2(-1.0, 0.0));        dst =  src * src * src;        src = get_sample(vec2( 1.0, 0.0));        dst += src * src * src;        dst = pow(dst * vec4(0.5),vec4(1.0 / 3.0));        "},e}(pe),xe=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"vec4 src = get_sample(vec2(-2.0,-1.0));        dst =  src * src * src;        src = get_sample(vec2(-2.0, 1.0));        dst += src * src * src;        src = get_sample(vec2( 2.0,-1.0));        dst += src * src * src;        src = get_sample(vec2( 2.0, 1.0));        dst += src * src * src;        dst = pow(dst * vec4(0.25),vec4(1.0 / 3.0));        "},e}(pe),ye=function(t){function e(e){return t.call(this,e,2)||this}return s(e,t),e.prototype.shader_procession=function(){return"vec4 src = get_sample1(vec2(-1.0,-2.0));        dst += src * src * src;        src = get_sample1(vec2( 0.0,-2.0));        dst += src * src * src;        src = get_sample1(vec2(-1.0, 1.0));        dst += src * src * src;        src = get_sample1(vec2( 0.0, 1.0));        dst += src * src * src;        dst *= vec4(0.25);        src = get_sample2(vec2(-1.0,0.0));        dst += src * src * src;        src = get_sample2(vec2( 1.0,0.0));        dst += src * src * src;        dst = pow(dst * vec4(1.0 / 3.0),vec4(1.0 / 3.0));        "},e}(de),we=function(t){function e(e){return t.call(this,e,2)||this}return s(e,t),e.prototype.shader_procession=function(){return"vec4 src = get_sample1(vec2(-3.0,-3.0));        dst += src * src * src;        src = get_sample1(vec2( 2.0,-3.0));        dst += src * src * src;        src = get_sample1(vec2(-3.0, 2.0));        dst += src * src * src;        src = get_sample1(vec2( 2.0, 2.0));        dst += src * src * src;        dst *= vec4(0.125);        src = get_sample2(vec2( 0.0,-3.0));        dst += src * src * src;        src = get_sample2(vec2(-2.0,-1.0));        dst += src * src * src;        src = get_sample2(vec2( 2.0,-1.0));        dst += src * src * src;        src = get_sample2(vec2(-2.0, 1.0));        dst += src * src * src;        src = get_sample2(vec2( 2.0, 1.0));        dst += src * src * src;        src = get_sample2(vec2( 0.0, 3.0));        dst += src * src * src;        dst = pow(dst * vec4(1.0 / 6.5),vec4(1.0 / 3.0));        "},e}(de),be=function(t){function e(e){return t.call(this,e,3)||this}return s(e,t),e.prototype.shader_procession=function(){return"vec4 src = get_sample1(vec2(-5.0,6.0));        dst = src * src * src;        src = get_sample1(vec2( 4.0,6.0));        dst += src * src * src;        src = get_sample1(vec2(-7.0,4.0));        dst += src * src * src;        src = get_sample1(vec2( 6.0,4.0));        dst += src * src * src;        src = get_sample1(vec2(-7.0,-5.0));        dst += src * src * src;        src = get_sample1(vec2( 6.0,-5.0));        dst += src * src * src;        src = get_sample1(vec2(-5.0,-7.0));        dst += src * src * src;        src = get_sample1(vec2( 4.0,-7.0));        dst += src * src * src;        dst *= vec4(0.125);        src = get_sample2(vec2( 2.0,7.0));        dst += src * src * src;        src = get_sample2(vec2(-2.0,7.0));        dst += src * src * src;        src = get_sample2(vec2( 4.0,5.0));        dst += src * src * src;        src = get_sample2(vec2( 0.0,5.0));        dst += src * src * src;        src = get_sample2(vec2(-4.0,5.0));        dst += src * src * src;        src = get_sample2(vec2( 4.0,-5.0));        dst += src * src * src;        src = get_sample2(vec2( 0.0,-5.0));        dst += src * src * src;        src = get_sample2(vec2(-4.0,-5.0));        dst += src * src * src;        src = get_sample2(vec2( 2.0,-7.0));        dst += src * src * src;        src = get_sample2(vec2(-2.0,-7.0));        dst += src * src * src;        dst *= vec4(0.25);        src = get_sample3(vec2(-4.0,2.0));        dst += src * src * src;        src = get_sample3(vec2( 4.0,2.0));        dst += src * src * src;        src = get_sample3(vec2(-4.0,-2.0));        dst += src * src * src;        src = get_sample3(vec2( 4.0,-2.0));        dst += src * src * src;        dst = pow(dst * vec4(1.0 / 6.75),vec4(1.0 / 3.0));        "},e}(de),ze=function(){function t(t){this.m_shader=null,this.m_m1=new Array(4),this.m_m2=new Array(4),this.m_trans=new Array(4),this.m_center=new Array(2),this.m_th=0,this.m_bsth=0,this.m_context=t,this.m_str_fshTiltShiftResizeProc="\tvarying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D inputImageTextureS1;        uniform sampler2D inputImageTextureS2;        uniform vec4 m1;        uniform vec4 m2;        uniform mat2 trans;        uniform vec2 center;        uniform float th;        uniform float bsth;                void main()        {            vec4 src;                vec2 subtc = textureCoordinate;                vec2 ncodin = (subtc - center) * trans;            float p = sqrt(dot(ncodin,ncodin)) - th;                vec4 c1 = texture2D(inputImageTexture,textureCoordinate);            vec4 c2 = texture2D(inputImageTextureS1, subtc * m1.xy + m1.zw);            vec4 c3 = texture2D(inputImageTextureS2, subtc * m2.xy + m2.zw);                    float fac = fract(max(log(max(p,bsth)) * -1.44269504,0.0));            fac = min((1.0 - fac),fac) * 2.0;                src = mix(c2,c3,vec4(clamp(fac * 2.0 - 0.5,0.0,1.0)));                src = mix(c1,src,clamp(p / bsth,0.0,1.0));                gl_FragColor = src;        }",this.m_str_fshFragTiltShiftUpTopProc="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D inputImageTexture1;        uniform sampler2D inputImageTexture2;        uniform sampler2D inputImageTextureUp;        uniform vec2 upsft;        uniform mat2 trans;        uniform vec2 pos;        uniform vec3 th;            void main()        {            vec4 src;                vec2 ncodin = (textureCoordinate - pos) * trans;                float dt = dot(ncodin,ncodin);                if(dt < th.z)            {                src = texture2D(inputImageTexture2, textureCoordinate);            }            else if(dt < th.y)            {                src = texture2D(inputImageTexture1, textureCoordinate);            }            else if(dt < th.x)            {                src = texture2D(inputImageTexture, textureCoordinate);            }            else            {                src = texture2D(inputImageTextureUp, textureCoordinate + upsft);            }                    gl_FragColor = src;        }"}return t.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshTiltShiftResizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("inputImageTextureS1",e[1]),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MIN_FILTER,this.m_context.context().LINEAR),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MAG_FILTER,this.m_context.context().LINEAR),a.shader_texture("inputImageTextureS2",e[2]),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MIN_FILTER,this.m_context.context().LINEAR),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MAG_FILTER,this.m_context.context().LINEAR);var o={};o.m1=this.m_m1,o.m2=this.m_m2,o.center=[this.m_center[0],this.m_center[1]],o.th=this.m_th,o.bsth=this.m_bsth;var n={};n.trans=this.m_trans,a.m_shader.uniformMat4(n),a.m_shader.uniforms(o),a.draw_to(t),this.m_context.context().bindTexture(this.m_context.context().TEXTURE_2D,e[1]),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MIN_FILTER,this.m_context.context().LINEAR),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MAG_FILTER,this.m_context.context().LINEAR),this.m_context.context().bindTexture(this.m_context.context().TEXTURE_2D,e[2]),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MIN_FILTER,this.m_context.context().NEAREST),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MAG_FILTER,this.m_context.context().NEAREST);var _=this.m_context.context().getError();if(_)throw new Error("FragTiltShiftResizeProc: "+_)},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},t}(),Te=function(t){function e(e){var r=t.call(this)||this;return r.m_shader=null,r.m_shader_top=null,r.m_top=!1,r.m_th=new Array(3),r.m_us_x=0,r.m_us_y=0,r.m_px=0,r.m_py=0,r.m_context=e,r.m_str_fshFragTiltShiftUpProc="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D inputImageTextureUp;        uniform vec2 upsft;        uniform mat2 trans;        uniform vec2 pos;        uniform float th;            void main()        {            vec4 src;                vec2 ncodin = (textureCoordinate - pos) * trans;                if(dot(ncodin,ncodin) < th)            {                src = texture2D(inputImageTexture, textureCoordinate);            }            else            {                src = texture2D(inputImageTextureUp, textureCoordinate + upsft);            }                    gl_FragColor = src;        }        ",r.m_str_fshFragTiltShiftUpTopProc="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D inputImageTexture1;        uniform sampler2D inputImageTexture2;        uniform sampler2D inputImageTextureUp;        uniform vec2 upsft;        uniform mat2 trans;        uniform vec2 pos;        uniform vec3 th;            void main()        {            vec4 src;                vec2 ncodin = (textureCoordinate - pos) * trans;                float dt = dot(ncodin,ncodin);                if(dt < th.z)            {                src = texture2D(inputImageTexture2, textureCoordinate);            }            else if(dt < th.y)            {                src = texture2D(inputImageTexture1, textureCoordinate);            }            else if(dt < th.x)            {                src = texture2D(inputImageTexture, textureCoordinate);            }            else            {                src = texture2D(inputImageTextureUp, textureCoordinate + upsft);            }                    gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a;this.m_top?(this.m_shader_top||(this.m_shader_top=new y(null,this.m_str_fshFragTiltShiftUpTopProc,this.m_context.context())),a=new w(this.m_context.context(),null,this.m_shader_top,r,i,s)):(this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragTiltShiftUpProc,this.m_context.context())),a=new w(this.m_context.context(),null,this.m_shader,r,i,s)),a.shader_texture("inputImageTexture",e[0]),a.shader_texture("inputImageTextureUp",e[1]),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MIN_FILTER,this.m_context.context().LINEAR),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MAG_FILTER,this.m_context.context().LINEAR);var o={};this.m_top?(a.shader_texture("inputImageTexture1",e[2]),a.shader_texture("inputImageTexture2",e[3]),o.th=this.m_th):o.th=this.m_th[0],o.upsft=[this.m_us_x,this.m_us_y];var n={};n.trans=this.m_m,a.m_shader.uniformMat4(n),o.pos=[this.m_px,this.m_py],a.m_shader.uniforms(o),a.draw_to(t),this.m_context.context().bindTexture(this.m_context.context().TEXTURE_2D,e[1]),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MIN_FILTER,this.m_context.context().NEAREST),this.m_context.context().texParameteri(this.m_context.context().TEXTURE_2D,this.m_context.context().TEXTURE_MAG_FILTER,this.m_context.context().NEAREST);var _=this.m_context.context().getError();if(_)throw new Error("FragTiltShiftUpProc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null),this.m_shader_top&&(this.m_shader_top.destroy(),this.m_shader_top=null)},e}(Jt),Ee=function(){function t(t){this.m_x_ofs=0,this.m_y_ofs=0,this.m_shader=null,this.m_context=t,this.m_str_fshEmbedFilter="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;            void main()        {            gl_FragColor = texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw);        }"}return t.prototype.process=function(t,e,r,i,s,a,o){var n=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshEmbedFilter,n));var _,m,h=new w(n,null,this.m_shader,r,i,o);h.shader_texture("inputImageTexture",e),_=n.getTexParameter(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER),m=n.getTexParameter(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER),n.NEAREST==_&&n.NEAREST==m||(n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST));var c=[];c[0]=r/s,c[1]=i/a,c[2]=-this.m_x_ofs/s,c[3]=-this.m_y_ofs/a;var l={};l.m=c,h.m_shader.uniforms(l),h.draw_to(t),n.NEAREST==_&&n.NEAREST==m||(n.bindTexture(n.TEXTURE_2D,e),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,_),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,m));var u=n.getError();if(u)throw new Error("EmbedFilter: "+u)},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},t}(),Ce=function(){function t(t,e,r,i,s,a){if(void 0===i&&(i=!1),void 0===s&&(s=!1),void 0===a&&(a=0),this.m_size=new Array,this.m_base_images=new Array,this.m_embed_filter=null,this.m_base_level=-1,this.m_base_size=-1,this.m_base_xo=0,this.m_base_yo=0,this.m_context=t,this.m_factor=e,this.m_param=i,this.m_progressive=s,this.m_ctn=a,a){for(var o=Math.max(e.m_dst_width,e.m_dst_height),n=a;n<o;)s&&(this.m_size[this.m_size.length]={width:n/2,height:n}),this.m_size[this.m_size.length]={width:n,height:n},n*=2;!this.m_size.length||n==e.m_dst_width&&n==e.m_dst_height?this.m_ctn=0:(this.m_base_level=this.m_size.length,this.m_base_size=n,this.m_base_xo=(e.m_dst_width-n)/2,this.m_base_xo=this.m_base_xo<0?Math.ceil(this.m_base_xo):Math.floor(this.m_base_xo),this.m_base_yo=(e.m_dst_height-n)/2,this.m_base_yo=this.m_base_yo<0?Math.ceil(this.m_base_yo):Math.floor(this.m_base_yo))}var _=this.m_factor.m_dst_width,m=this.m_factor.m_dst_height;do{this.m_progressive&&this.m_size.length&&(this.m_size[this.m_size.length]={width:_/2,height:m}),this.m_size[this.m_size.length]={width:_,height:m},_*=2,m*=2}while(_<this.m_factor.m_src_width&&m<this.m_factor.m_src_height&&_<r&&m<r);this.m_images=new Array(this.m_size.length);for(var h=0;h<this.m_images.length;++h)this.m_images[h]=[];this.m_start=0,this.m_end=this.m_images.length,this.map_create(0)}return t.prototype._create_=function(t,e,r){var i=!1;return r&&(i=r),this.m_context.create_new_texture(t,e,i)},t.prototype.map_create=function(t,e){if("top"!=e){if("back"!=e){if("number"!=typeof e){for(var r=this.m_start;r<this.m_end;++r)if(this.m_images[r].length==t)this.m_images[r].push(this._create_(this.m_size[r].width,this.m_size[r].height,this.m_param));else if(this.m_images[r].length<t)throw"CGEPyramid::map_create";if(this.m_ctn&&this.m_start<=this.m_base_level&&this.m_base_level<this.m_end)if(this.m_base_images.length==t)this.m_base_images.push(this._create_(this.m_base_size,this.m_base_size,this.m_param));else if(this.m_base_images.length<t)throw"CGEPyramid::map_create"}else if(this.m_images[e].length==t)this.m_images[e].push(this._create_(this.m_size[e].width,this.m_size[e].height,this.m_param));else if(this.m_images[e].length<t)throw"CGEPyramid::map_create"}else if(this.m_images[this.m_end-1].length==t)this.m_images[this.m_end-1].push(this._create_(this.m_size[this.m_end-1].width,this.m_size[this.m_end-1].height,this.m_param));else if(this.m_images[this.m_end-1].length<t)throw"CGEPyramid::map_create"}else if(this.m_images[0].length==t)this.m_images[0].push(this._create_(this.m_size[0].width,this.m_size[0].height,this.m_param));else if(this.m_images[0].length<t)throw"CGEPyramid::map_create"},t.prototype.destroy=function(){this.m_embed_filter&&this.m_embed_filter.destroy();for(var t=[];this.m_images.length;){for(;this.m_images[this.m_images.length-1].length;)this.m_images[this.m_images.length-1][this.m_images[this.m_images.length-1].length-1]&&t.push(this.m_images[this.m_images.length-1][this.m_images[this.m_images.length-1].length-1]),this.m_images[this.m_images.length-1][this.m_images[this.m_images.length-1].length-1]=null,this.m_images[this.m_images.length-1].pop();this.m_images[this.m_images.length-1]=[],this.m_images.pop()}for(;this.m_base_images.length;)t.push(this.m_base_images[this.m_base_images.length-1]),this.m_base_images[this.m_base_images.length-1]=null,this.m_base_images.pop();if(t.length)for(var e=0;e<t.length;++e)this.m_context.context().deleteTexture(t[e]);this.m_size=[]},t.prototype.load_from=function(t,e,r){this.m_factor.get_trans(t.m_m),t.process(this.m_images[this.m_images.length-1][0],e,this.m_size[this.m_size.length-1].width,this.m_size[this.m_size.length-1].height,r)},t.prototype.base_move_up=function(t,e){if(this.m_ctn){this.m_embed_filter||(this.m_embed_filter=new Ee(this.m_context));var r=this.m_size[this.m_base_level].width,i=this.m_size[this.m_base_level].height;this.move_to(this.m_embed_filter,this.m_images[this.m_base_level][t],this.m_base_images[t],r,i,this.m_base_size,this.m_base_size,this.m_base_xo,this.m_base_yo,e)}},t.prototype.base_move_down=function(t,e){if(this.m_ctn){this.m_embed_filter||(this.m_embed_filter=new Ee(this.m_context));var r=this.m_size[this.m_base_level].width,i=this.m_size[this.m_base_level].height;this.move_to(this.m_embed_filter,this.m_base_images[t],this.m_images[this.m_base_level][t],this.m_base_size,this.m_base_size,r,i,-this.m_base_xo,-this.m_base_yo,e)}},t.prototype.draw_downward=function(t,e,r,i){void 0===r&&(r=0),void 0===i&&(i=0);for(var s=this.m_images.length-2;s>=r;--s)this.m_ctn&&s+1==this.m_base_level?(this.base_move_down(i,e),t.process(this.m_images[s][i],this.m_base_images[i],this.m_size[s].width,this.m_size[s].height,e)):t.process(this.m_images[s][i],this.m_images[s+1][i],this.m_size[s].width,this.m_size[s].height,e)},t.prototype.map1=function(t,e,r,i){this.map_create(e);for(var s=this.m_start;s<this.m_end;++s)t.process(this.m_images[s][e],this.m_images[s][r],this.m_size[s].width,this.m_size[s].height,i)},t.prototype.mapN=function(t,e,r,i,s){this.map_create(e);for(var a=this.m_start;a<this.m_end;++a){for(var o=new Array(10),n=0;n<i;++n)o[n]=this.m_images[a][r[n]];t.process(this.m_images[a][e],o,this.m_size[a].width,this.m_size[a].height,s)}},t.prototype.move_to=function(t,e,r,i,s,a,o,n,_,m){t.m_x_ofs=n,t.m_y_ofs=_,t.process(e,r,i,s,a,o,m)},t}(),Se=function(){function t(t){this.m_pyramid_gpu=new Array(2),this.m_width=0,this.m_height=0,this.m_last_src="",this.m_aperture=0,this.m_nx=0,this.m_ny=0,this.m_cx=0,this.m_cy=0,this.m_ms=0,this.m_start=0,this.m_inv_fac=0,this.m_context=t,this.m_factor=[new le,new le],this.m_up_filter=new Te(this.m_context),this.m_up_resize_filter=new ze(this.m_context),this.m_linear_resize_filter=new Qt(this.m_context),this.m_nearest_resize_filter=new Qt(this.m_context),this.m_down_filter=new fe(this.m_context),this.m_2x2_filter=new ge(this.m_context),this.m_2x2x2_filter=new ve(this.m_context),this.m_2x4x4_filter=new xe(this.m_context),this.m_micro_filter=new ye(this.m_context),this.m_small_filter=new we(this.m_context),this.m_big_filter=new be(this.m_context)}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.inter_process(t,this.m_pyramid_gpu,e.new_temporary(),e.current(),r.m_width,r.m_height,r.m_frameBuffer);var i=this.m_context.context().getError();if(i)throw new Error("TiltShift: "+i);e.push_to_current()}catch(t){throw new Error("TiltShift process: "+t)}},t.prototype.destroy=function(){this.clear(),this.m_up_filter.destroy(),this.m_up_resize_filter.destroy(),this.m_linear_resize_filter.destroy(),this.m_nearest_resize_filter.destroy(),this.m_down_filter.destroy(),this.m_2x2_filter.destroy(),this.m_2x2x2_filter.destroy(),this.m_2x4x4_filter.destroy(),this.m_micro_filter.destroy(),this.m_small_filter.destroy(),this.m_big_filter.destroy()},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.m_last_src="",this.cal_embed(this.m_factor[0],this.m_width,this.m_height,256),this.cal_embed(this.m_factor[1],this.m_width,this.m_height,362),this.clear())},t.prototype.inter_process=function(t,e,r,i,s,a,o){this.size_change(s,a),e[0]||(e[0]=new Ce(this.m_context,this.m_factor[0],1500),e[1]=new Ce(this.m_context,this.m_factor[1],1500),this.m_last_src=""),t.get_log()!=this.m_last_src&&(this.draw_temp_textures(e[0],i,o),this.draw_temp_textures(e[1],i,o),this.m_last_src=t.get_log()),this.init(t),this.draw_up_textures(e[0],o,0),this.draw_up_textures(e[1],o,1),this.m_up_resize_filter.m_m1[0]=this.m_factor[0].m_emb_width/this.m_factor[0].m_dst_width,this.m_up_resize_filter.m_m1[1]=this.m_factor[0].m_emb_height/this.m_factor[0].m_dst_height,this.m_up_resize_filter.m_m1[2]=.5/e[0].m_size[e[0].m_size.length-1].width,this.m_up_resize_filter.m_m1[3]=.5/e[0].m_size[e[0].m_size.length-1].height,this.m_up_resize_filter.m_m2[0]=this.m_factor[1].m_emb_width/this.m_factor[1].m_dst_width,this.m_up_resize_filter.m_m2[1]=this.m_factor[1].m_emb_height/this.m_factor[1].m_dst_height,this.m_up_resize_filter.m_m2[2]=.5/e[1].m_size[e[1].m_size.length-1].width,this.m_up_resize_filter.m_m2[3]=.5/e[1].m_size[e[1].m_size.length-1].height,new Array(4);var n=this.cal_fac(this.m_up_resize_filter.m_trans);this.m_up_resize_filter.m_center[0]=n.px,this.m_up_resize_filter.m_center[1]=n.py,this.m_up_resize_filter.m_th=n.th,this.m_up_resize_filter.m_bsth=Math.pow(.5,.5*(e[0].m_images.length+e[1].m_images.length+6-1));var _=new Array(3);_[0]=i,_[1]=e[0].m_images[e[0].m_images.length-1][0],_[2]=e[1].m_images[e[1].m_images.length-1][0],this.m_up_resize_filter.process(r,_,s,a,o)},t.prototype.init=function(t){switch(t.assume_symbol("aperture"),this.m_aperture=t.fetch_float(),t.lookup_symbol(["angleAng","angleRad","angleVec",0],!0)){case 0:var e=3.14159265*t.fetch_float()/180;this.m_nx=Math.cos(e),this.m_ny=Math.sin(e);break;case 1:e=t.fetch_float(),this.m_nx=Math.cos(e),this.m_ny=Math.sin(e);break;case 2:this.m_nx=t.fetch_float(),this.m_ny=t.fetch_float();var r=1/Math.sqrt(this.m_nx*this.m_nx+this.m_ny*this.m_ny);this.m_nx*=r,this.m_ny*=r;break;default:throw"CGETiltshiftParser::init"}if(t.assume_symbol("measuringScale"),this.m_ms=t.lookup_symbol(["pixel","width","height","longEdge","relative",0],!0),t.assume_symbol("center"),this.m_cx=t.fetch_float(),this.m_cy=t.fetch_float(),0==t.lookup_symbol(["vector","ellipse",0],!0))this.m_start=t.fetch_float(),this.m_inv_fac=0;else{var i=t.fetch_float(),s=t.fetch_float();if(i<s)this.m_start=i,this.m_inv_fac=this.m_start/(s+1e-5);else{this.m_start=s,this.m_inv_fac=this.m_start/(i+1e-5);var a;a=this.m_nx,this.m_nx=this.m_ny,this.m_ny=a,this.m_nx=-this.m_nx}}},t.prototype.cal_embed=function(t,e,r,i){var s,a,o,n;r<=0||e<=0||(e>r?(s=i,a=(i-1)*r/e,(i-1)*r%e&&++a,++a,o=i-1,n=(i-1)*r/e):(s=(i-1)*e/r,a=i,(i-1)*e%r&&++s,++s,o=(i-1)*e/r,n=i-1),t.m_src_width=e,t.m_src_height=r,t.m_dst_width=s,t.m_dst_height=a,t.m_x_start=0,t.m_y_start=0,t.m_emb_width=o,t.m_emb_height=n)},t.prototype.cal_fac=function(t){t[0]=-this.m_ny,t[1]=this.m_nx,t[2]=this.m_nx,t[3]=this.m_ny;var e=Math.max(this.m_width,this.m_height),r=.5*e*this.m_aperture/1.4,i=[1*this.m_inv_fac/r,0,0,1/r],s=[this.m_width,0,0,this.m_height];t[0]*=i[0]*s[0],t[1]*=i[0]*s[3],t[2]*=i[3]*s[0],t[3]*=i[3]*s[3];var a=1,o=1,n=1;switch(this.m_ms){case 0:break;case 1:a=o=n=this.m_width;break;case 2:a=o=n=this.m_height;break;case 3:a=o=n=e;break;case 4:a=this.m_width,o=this.m_height,n=e}var _={px:0,py:0,th:0};return _.px=a*this.m_cx/this.m_width,_.py=o*this.m_cy/this.m_height,_.th=n*this.m_start/r,_},t.prototype.correct_fac=function(t,e,r,i,s,a,o){var n=i.m_dst_width/i.m_emb_width,_=i.m_dst_height/i.m_emb_height;t[0]*=n,t[1]*=_,t[2]*=n,t[3]*=_;var m={px:0,py:0,fac:0};return m.fac=Math.pow(.5,.5*(s+1)),m.px=e/n+a,m.py=r/_+o,m},t.prototype.clear=function(){this.m_pyramid_gpu[0]&&this.m_pyramid_gpu[0].destroy(),this.m_pyramid_gpu[1]&&this.m_pyramid_gpu[1].destroy(),this.m_pyramid_gpu=[]},t.prototype.draw_temp_textures=function(t,e,r){t.load_from(this.m_linear_resize_filter,e,r),t.draw_downward(this.m_down_filter,r),t.map1(this.m_2x2_filter,1,0,r),t.map1(this.m_2x2x2_filter,2,1,r);var i=new Array(3);i[0]=0,i[1]=2,t.mapN(this.m_small_filter,3,i,2,r),t.m_end=1,t.map1(this.m_2x4x4_filter,4,2,r),i[2]=4,t.mapN(this.m_big_filter,5,i,3,r),t.m_end=t.m_images.length,t.m_start=t.m_images.length-1,i[1]=1,t.mapN(this.m_micro_filter,2,i,2,r),t.m_start=0},t.prototype.draw_up_textures=function(t,e,r){for(var i=0;i<t.m_images.length;++i){var s,a=this.m_up_filter.m_m,o=(this.m_up_filter.m_px,this.m_up_filter.m_py),n=t.m_size[i],_=.5/n.width,m=.5/n.height,h=this.cal_fac(a);o=h.th;var c=this.correct_fac(a,h.px,h.py,t.m_factor,2*i+r,_,m);this.m_up_filter.m_px=c.px,this.m_up_filter.m_py=c.py,this.m_up_filter.m_m=a,s=c.fac,this.m_up_filter.m_th[0]=(o+1*s)*(o+1*s),this.m_up_filter.m_th[1]=(o+.5*s)*(o+.5*s),this.m_up_filter.m_th[2]=(o+.25*s)*(o+.25*s);var l=new Array(4);l[0]=t.m_images[i][3],l[2]=t.m_images[i][2],l[3]=t.m_images[i][1],i?(l[1]=t.m_images[i-1][0],this.m_up_filter.m_us_x=_,this.m_up_filter.m_us_y=m):(l[1]=l[1]=t.m_images[i][5],this.m_up_filter.m_us_x=0,this.m_up_filter.m_us_y=0),i==t.m_images.length-1?this.m_up_filter.m_top=!0:this.m_up_filter.m_top=!1,this.m_up_filter.process(t.m_images[i][0],l,n.width,n.height,e)}},t.parcerName="tiltShift",t}(),Me=function(){function t(t){this.m_list=st.CreateBlendMap(),this.m_reOpacity=0,this.m_pos=[],this.pos=[],this.m_size=[],this.m_view_layer=!1,this.m_view_num=0,this.m_tex_name="",this.m_cname="",this.m_alpha=0,this.m_blend_mode=0,this.m_trans_mode=0,this.m_alignMode=0,this.m_trans_tile=0,this.m_stick_size=0,this.m_painter_alpha=0,this.m_flag=0,this.m_texturelocker=null,this.m_context=t}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{(new Date).getTime();var i=this.m_context.context();if(this.init(t),!this.m_item)throw new Error("blend process with no shader");var s=new w(i,r,this.m_item.check_shader(this.m_blend_mode,i));switch(s.shader_texture("inputImageTexture",e.current()),this.m_blend_mode){case 0:if(this.m_texturelocker=this.m_context.get_resource_texture(this.m_tex_name),!this.m_texturelocker)throw new Error("blend m_tex_name "+this.m_tex_name);s.shader_texture("blendTexture",this.m_texturelocker.texture),this.cal_trans_shader(r.m_width,r.m_height,this.m_texturelocker.width,this.m_texturelocker.height,s);var a={};a.opacity=this.m_alpha,a.flag=this.m_flag,s.m_shader.uniforms(a);break;case 1:case 2:case 3:case 4:case 5:var o;if((o=this.m_view_layer?e.load_view(this.m_view_num):e.load_channel(this.m_cname))||t.error("invalid layer name",[this.m_cname]),s.shader_texture("blendTexture",o),1==this.m_blend_mode){if(this.m_texturelocker=this.m_context.get_resource_texture(this.m_tex_name),!this.m_texturelocker)throw new Error("blend m_tex_name "+this.m_tex_name);s.shader_texture("alphaTexture",this.m_texturelocker.texture),this.cal_trans_shader(r.m_width,r.m_height,this.m_texturelocker.width,this.m_texturelocker.height,s);var n={};n.flag=this.m_flag,s.m_shader.uniforms(n)}else if(4==this.m_blend_mode){var _;(_=e.load_channel(this.m_tex_name))||t.error("invalid layer name",[this.m_tex_name]),s.shader_texture("alphaTexture",_)}else if(5==this.m_blend_mode){var m=this.m_context.lock_image("","painter");if(!m)throw new Error("no painter cache");s.shader_texture("alphaTexture",m);var h={};h.opacity=this.m_painter_alpha,s.m_shader.uniforms(h)}else{var c={};c.reOpacity=this.m_reOpacity,c.opacity=this.m_alpha,s.m_shader.uniforms(c)}}if(this.m_size.length){var l=[this.m_size[0]/r.m_width,this.m_size[1]/r.m_height,this.m_pos[0]/r.m_width,this.m_pos[1]/r.m_height];(a={}).trans=l,s.m_shader.uniforms(a),i.enable(i.BLEND),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ONE,i.ZERO),i.bindFramebuffer(i.FRAMEBUFFER,r.m_frameBuffer),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,e.new_temporary(),0),i.viewport(Math.floor(this.m_pos[0]+.5),Math.floor(this.m_pos[1]+.5),Math.floor(this.m_size[0]+.5),Math.floor(this.m_size[1]+.5)),i.drawArrays(i.TRIANGLE_FAN,0,4),i.disable(i.BLEND)}else 5==this.m_blend_mode&&(a={trans:[1,1,0,0]},s.m_shader.uniforms(a)),s.draw_to(e.new_temporary());i.getError(),e.push_to_current(),i.getError(),5==this.m_blend_mode&&this.m_context.unlock_image(null,null,"painter");var u=i.getError();if(u)throw new Error("blend : "+u)}catch(t){throw new Error("blend process: "+t)}finally{this.m_texturelocker&&(this.m_context.release_resource_texture(this.m_texturelocker),this.m_texturelocker=null)}},t.prototype.destroy=function(){this.m_list.forEach((function(t){t.destroy()}))},t.prototype.cal_trans=function(t,e,r,i,s){s[0]=1,s[1]=1,s[2]=0,s[3]=0,this.m_flag=1;var a=t/r,o=e/i;if(a>o){var n=o/a;s[0]=1,s[1]=n}else n=a/o,s[0]=n,s[1]=1;switch(this.m_trans_mode){case 0:s[0]=1,s[1]=1;break;case 1:s[2]=.5*(1-s[0]),s[3]=.5*(1-s[1]);break;case 2:a<o?(n=o/a,s[0]=1,s[1]=n):(n=a/o,s[0]=n,s[1]=1),s[2]=.5*(1-s[0]),s[3]=.5*(1-s[1]),this.m_flag=0;break;case 3:break;case 4:s[2]=1-s[0],s[3]=1-s[1];break;case 5:s[0]/=this.m_trans_tile,s[1]/=this.m_trans_tile;break;case 6:switch(a>o?(s[0]=this.m_stick_size*a/o,s[1]=this.m_stick_size,s[2]=-this.pos[0]*this.m_stick_size*a/o,s[3]=-this.pos[1]*this.m_stick_size):(s[0]=this.m_stick_size,s[1]=this.m_stick_size*o/a,s[2]=-this.pos[0]*this.m_stick_size,s[3]=-this.pos[1]*this.m_stick_size*o/a),this.m_alignMode){case 0:break;case 1:s[3]=1-s[1]-s[3];break;case 2:s[2]=1-s[0]-s[2];break;case 3:s[2]=1-s[0]-s[2],s[3]=1-s[1]-s[3]}this.m_flag=0;break;default:throw"CGEBlendParser::cal_trans"}},t.prototype.cal_trans_shader=function(t,e,r,i,s){var a=new Array(4);this.cal_trans(t,e,r,i,a);var o={};o.trans=a,s.m_shader.uniforms(o)},t.prototype.get_trans=function(t){this.m_trans_mode=0,this.m_alignMode=0;t.test_symbol("align")&&(this.m_trans_mode=t.lookup_symbol(["none","center","centerFit","rightTop","leftBottom","tile","stick",0],!0)),6==this.m_trans_mode&&(this.pos[0]=t.fetch_float(),this.pos[1]=t.fetch_float(),this.m_stick_size=t.fetch_float(),this.m_alignMode=t.lookup_symbol(["leftTop","leftBottom","rightTop","rightBottom",0],!0)),5==this.m_trans_mode&&(this.m_trans_tile=t.fetch_float(.05,1))},t.prototype.init=function(t){this.m_reOpacity=0,this.m_pos=[],this.m_size=[],this.m_view_layer=!1;switch(t.lookup_symbol(["texture","layer","view","shit",0],!0)){case 0:t.assume_symbol("file"),this.m_tex_name=t.fetch_string(),this.get_trans(t),this.get_item(t),this.m_alpha=.01*t.fetch_float(0,100),this.m_blend_mode=0;break;case 1:this.m_view_layer=!1;var e=["file","alpha","layer",0];if(this.m_cname=t.fetch_symbol(),this.get_item(t),g.Number==t.get_parcer_status())this.m_alpha=.01*t.fetch_float(0,100),this.m_blend_mode=3;else switch(t.lookup_symbol(e,!0)){case 0:this.m_tex_name=t.fetch_string(),this.get_trans(t),this.m_blend_mode=1;break;case 1:this.m_alpha=.01*t.fetch_float(0,100),this.m_blend_mode=2;break;case 2:this.m_tex_name=t.fetch_symbol(),this.m_blend_mode=4}break;case 2:if(this.m_view_layer=!0,e=["file","alpha","cache",0],this.m_view_num=t.fetch_float(),this.get_item(t),g.Number==t.get_parcer_status())this.m_alpha=.01*t.fetch_float(0,100),this.m_blend_mode=3;else{var r;(r=t.lookup_symbol(e,!0))?2==r?(this.m_blend_mode=5,this.m_painter_alpha=1,t.test_symbol("alpha")&&(this.m_painter_alpha=t.fetch_float()),t.test_symbol("position")&&(this.m_pos[0]=t.fetch_float(),this.m_pos[1]=t.fetch_float(),t.assume_symbol("size"),this.m_size[0]=t.fetch_float(),this.m_size[1]=t.fetch_float())):(t.test_symbol("reOpacity")&&(this.m_reOpacity=2),this.m_alpha=.01*t.fetch_float(0,100),this.m_blend_mode=2):(this.m_tex_name=t.fetch_string(),this.get_trans(t),this.m_blend_mode=1)}break;default:throw"CGEBlendParser::init"}},t.prototype.get_item=function(t){var e=t.fetch_symbol();if(this.m_item=this.m_list.get(e),!this.m_item)throw new Error("invalid blend mode"+e)},t.parcerName="blend",t}(),De=function(t){function e(e){var r=t.call(this,e)||this;return r.m_size=0,r.m_fade=0,r.m_angle=0,r.m_distance=0,r.m_sColor=new Array(3),r.m_bColor=new Array(3),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D srcImage;        uniform vec4 fac;        uniform vec3 sColor;        uniform vec3 bColor;        uniform vec2 shadow_pos;        uniform vec4 sBorder;        uniform vec2 size;        uniform float fade;        "},e.prototype.shader_procession=function(){return"        vec2 pos = textureCoordinate;                if(pos.x<size.x||pos.x>1.0 - size.x||pos.y<size.y||pos.y>1.0-size.y)        {            pos = pos-shadow_pos;            float x = max(max(pos.x - sBorder.y,sBorder.x - pos.x),0.0);            float y = max(max(pos.y - sBorder.w,sBorder.z - pos.y),0.0);            float alpha = 1.0 -((x/(size.x/1.2))*(x/(size.x/1.2))+(y/(size.y/1.2))*(y/(size.y/1.2)));            alpha = clamp(alpha,0.0,1.0);            alpha = 3.0*alpha*alpha-2.0*alpha*alpha*alpha;            alpha = fade*alpha*alpha;            dst =vec4( mix(bColor,sColor,alpha),1.0);        }        else            dst = texture2D(srcImage,pos*vec2(fac.x,fac.y)+vec2(fac.z,fac.w));"},e.prototype.init=function(t,e,r){t.assume_symbol("size"),this.m_size=t.fetch_float(),t.assume_symbol("fade"),this.m_fade=t.fetch_float()/100,t.assume_symbol("angle"),this.m_angle=t.fetch_float(),t.assume_symbol("distance"),this.m_distance=t.fetch_float(),t.assume_symbol("shadowColor");for(var i=0;i<3;++i)this.m_sColor[i]=t.fetch_float()/255;for(t.assume_symbol("backColor"),i=0;i<3;++i)this.m_bColor[i]=t.fetch_float()/255},e.prototype.shader_setup=function(t){var e=this.m_context.lock_image(),r=new Array(4);r[0]=t.m_width/(t.m_width-2*this.m_size),r[1]=t.m_height/(t.m_height-2*this.m_size),r[2]=-this.m_size/(t.m_width-2*this.m_size),r[3]=-this.m_size/(t.m_height-2*this.m_size);var i=[this.m_distance/t.m_width,0];i=[i[0]*Math.cos(this.m_angle/180*Math.PI)-i[1]*Math.sin(this.m_angle/180*Math.PI),i[0]*Math.sin(this.m_angle/180*Math.PI)+i[1]*Math.cos(this.m_angle/180*Math.PI)];var s=new Array(4);s[0]=this.m_size/t.m_width*1.4,s[1]=1-this.m_size/t.m_width*1.4,s[2]=this.m_size/t.m_height*1.4,s[3]=1-this.m_size/t.m_height*1.4,t.shader_texture("srcImage",e);var a={};a.size=[this.m_size/t.m_width,this.m_size/t.m_height],a.fade=this.m_fade,a.sBorder=s,a.fac=r,a.sColor=this.m_sColor,a.bColor=this.m_bColor,a.shadow_pos=i,t.m_shader.uniforms(a)},e.parcerName="shadow",e}(ft),Re=function(t){function e(e){var r=t.call(this,e)||this;return r.m_size=0,r.m_fade=0,r.m_angle=0,r.m_distance=0,r.m_sColor=new Array(3),r.m_bColor=new Array(3),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return" uniform vec4 fac;        uniform vec3 sColor;        uniform vec4 bColor;        uniform vec2 shadow_pos;        uniform vec4 sBorder;        uniform vec2 size;        uniform float fade;        "},e.prototype.shader_procession=function(){return"        vec2 pos = textureCoordinate;                if(pos.x<size.x||pos.x>1.0 - size.x||pos.y<size.y||pos.y>1.0-size.y)        {            pos = pos-shadow_pos;            float x = max(max(pos.x - sBorder.y,sBorder.x - pos.x),0.0);            float y = max(max(pos.y - sBorder.w,sBorder.z - pos.y),0.0);            float alpha = 1.0 -((x/(size.x/1.5))*(x/(size.x/1.5))+(y/(size.y/1.5))*(y/(size.y/1.5)));            alpha = clamp(alpha,0.0,1.0);            alpha = alpha*alpha*fade;            dst =vec4( mix(bColor,vec4(sColor.xyz,1.0),alpha));        }        else            dst = texture2D(inputImageTexture,pos*vec2(fac.x,fac.y)+vec2(fac.z,fac.w));"},e.prototype.init=function(t,e,r){if(!e)throw new Error("no width");t.assume_symbol("size"),this.m_size=t.fetch_float()*e,t.assume_symbol("fade"),this.m_fade=t.fetch_float()/100,t.assume_symbol("angle"),this.m_angle=t.fetch_float(),t.assume_symbol("distance"),this.m_distance=t.fetch_float()*e,t.assume_symbol("shadowColor");for(var i=0;i<3;++i)this.m_sColor[i]=t.fetch_float()/255;for(t.assume_symbol("backColor"),i=0;i<4;++i)this.m_bColor[i]=t.fetch_float()/255},e.prototype.shader_setup=function(t){var e=new Array(4),r=Math.max(t.m_width,t.m_height);e[0]=r/(r-2*this.m_size),e[1]=e[0],r==t.m_width?(e[2]=-this.m_size/t.m_width*e[0],e[3]=-(e[0]-1)/2):(e[3]=-this.m_size/t.m_height*e[0],e[2]=-(e[0]-1)/2);var i=[this.m_distance/t.m_width,0];i=[i[0]*Math.cos(this.m_angle/180*Math.PI)-i[1]*Math.sin(this.m_angle/180*Math.PI),i[0]*Math.sin(this.m_angle/180*Math.PI)+i[1]*Math.cos(this.m_angle/180*Math.PI)];var s=new Array(4);s[0]=this.m_size/t.m_width*1.3,s[1]=1-this.m_size/t.m_width*1.3,s[2]=this.m_size/t.m_height*1.3,s[3]=1-this.m_size/t.m_height*1.3;var a={};a.size=[this.m_size/t.m_width,this.m_size/t.m_height],a.fade=this.m_fade,a.sBorder=s,a.fac=e,a.sColor=this.m_sColor,a.bColor=this.m_bColor,a.shadow_pos=i,t.m_shader.uniforms(a)},e.parcerName="smallShadow",e}(ft),Ae=function(t){function e(e){var r=t.call(this,e)||this;return r.m_outSize=0,r.m_innerSize=0,r.m_oColor=new Array(3),r.m_iColor=new Array(3),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D srcImage;        uniform vec4 fac;        uniform vec3 iColor;        uniform vec3 oColor;        uniform vec2 outSize;        uniform vec2 innerSize;        uniform vec4 shadeBorder;        "},e.prototype.shader_procession=function(){return"        vec2 pos = textureCoordinate;                if(pos.x<outSize.x||pos.x>1.0 - outSize.x||pos.y<outSize.y||pos.y>1.0-outSize.y)        {            dst = vec4(oColor,1.0);        }        else if(pos.x<(outSize.x+innerSize.x)||pos.x>1.0 - (outSize.x+innerSize.x)||pos.y<(outSize.y+innerSize.y)||pos.y>1.0 - (outSize.y+innerSize.y))        {            dst = vec4(iColor,1.0);        }        else        {            float x = max(max(pos.x - shadeBorder.y,shadeBorder.x - pos.x),0.0);            float y = max(max(pos.y - shadeBorder.w,shadeBorder.z - pos.y),0.0);            float alpha = ((x)*(x)+(y)*(y))/0.00002;                        alpha = clamp(alpha,0.0,1.0);            alpha = alpha*alpha*0.5;                vec4 color = texture2D(srcImage, pos * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));            color.xyz = mix(color.xyz,vec3(0.0,0.0,0.0),alpha);            dst = color;        }        "},e.prototype.init=function(t,e,r){t.assume_symbol("outSize"),this.m_outSize=t.fetch_float(),t.assume_symbol("innerSize"),this.m_innerSize=t.fetch_float(),t.assume_symbol("outColor");for(var i=0;i<3;++i)this.m_oColor[i]=t.fetch_float()/255;for(t.assume_symbol("innerColor"),i=0;i<3;++i)this.m_iColor[i]=t.fetch_float()/255},e.prototype.shader_setup=function(t){var e=this.m_context.lock_image(),r=new Array(4);r[0]=t.m_width/(t.m_width-2*this.m_outSize-2*this.m_innerSize),r[1]=t.m_height/(t.m_height-2*this.m_outSize-2*this.m_innerSize),r[2]=-(this.m_outSize+this.m_innerSize)/(t.m_width-2*this.m_outSize-2*this.m_innerSize),r[3]=-(this.m_outSize+this.m_innerSize)/(t.m_height-2*this.m_outSize-2*this.m_innerSize);var i=[];i[0]=(this.m_outSize+this.m_innerSize)/t.m_width+.006,i[1]=1-(this.m_outSize+this.m_innerSize)/t.m_width-.006,i[2]=(this.m_outSize+this.m_innerSize)/t.m_height+.006,i[3]=1-(this.m_outSize+this.m_innerSize)/t.m_height-.006,t.shader_texture("srcImage",e);var s={};s.outSize=[this.m_outSize/t.m_width,this.m_outSize/t.m_height],s.innerSize=[this.m_innerSize/t.m_width,this.m_innerSize/t.m_height],s.fac=r,s.shadeBorder=i,s.iColor=this.m_iColor,s.oColor=this.m_oColor,t.m_shader.uniforms(s)},e.parcerName="gallery",e}(ft),Ie=function(t){function e(e){var r=t.call(this,e)||this;return r.m_outSize=0,r.m_innerSize=0,r.m_oColor=new Array(3),r.m_iColor=new Array(3),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec4 fac;        uniform vec3 iColor;        uniform vec3 oColor;        uniform vec2 outSize;        uniform vec2 innerSize;        uniform vec4 shadowInBorder;        uniform vec4 shadowOutBorder;        "},e.prototype.shader_procession=function(){return"        vec2 pos = textureCoordinate;                if(pos.x<outSize.x||pos.x>1.0 - outSize.x||pos.y<outSize.y||pos.y>1.0-outSize.y)        {            dst = vec4(oColor,1.0);        }        else if(pos.x<(outSize.x+innerSize.x)||pos.x>1.0 - (outSize.x+innerSize.x)||pos.y<(outSize.y+innerSize.y)||pos.y>1.0 - (outSize.y+innerSize.y))        {            float x = max(max(pos.x - shadowOutBorder.y,shadowOutBorder.x - pos.x),0.0);            float y = max(max(pos.y - shadowOutBorder.w,shadowOutBorder.z - pos.y),0.0);            float alpha = ((x)*(x)+(y)*(y))/0.00007;                        alpha = clamp(alpha,0.0,1.0);            alpha = alpha*alpha*0.5;            dst = vec4(mix(iColor,vec3(0.0,0.0,0.0),alpha),1.0);        }        else        {            float x = max(max(pos.x - shadowInBorder.y,shadowInBorder.x - pos.x),0.0);            float y = max(max(pos.y - shadowInBorder.w,shadowInBorder.z - pos.y),0.0);            float alpha = ((x)*(x)+(y)*(y))/0.00007;                        alpha = clamp(alpha,0.0,1.0);            alpha = alpha*alpha*0.4;            vec4 color = texture2D(inputImageTexture, pos * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));            color.xyz = mix(color.xyz,vec3(0.0,0.0,0.0),alpha);            dst = color;        }        "},e.prototype.init=function(t,e,r){if(!e)throw new Error("no width");if(!r)throw new Error("no height");t.assume_symbol("outSize"),this.m_outSize=t.fetch_float()*e,t.assume_symbol("innerSize"),this.m_innerSize=t.fetch_float()*r,t.assume_symbol("outColor");for(var i=0;i<3;++i)this.m_oColor[i]=t.fetch_float()/255;for(t.assume_symbol("innerColor"),i=0;i<3;++i)this.m_iColor[i]=t.fetch_float()/255},e.prototype.shader_setup=function(t){var e=new Array(4),r=Math.max(t.m_width,t.m_height);e[0]=r/(r-2*this.m_outSize-2*this.m_innerSize),e[1]=e[0],r==t.m_width?(e[2]=-(this.m_outSize+this.m_innerSize)/t.m_width*e[0],e[3]=-(e[0]-1)/2):(e[3]=-(this.m_outSize+this.m_innerSize)/t.m_height*e[0],e[2]=-(e[0]-1)/2);var i=[];i[0]=(this.m_outSize+this.m_innerSize)/t.m_width+.01,i[1]=1-(this.m_outSize+this.m_innerSize)/t.m_width-.01,i[2]=(this.m_outSize+this.m_innerSize)/t.m_height+.01,i[3]=1-(this.m_outSize+this.m_innerSize)/t.m_height-.01;var s=[];s[0]=this.m_outSize/t.m_width+.01,s[1]=1-this.m_outSize/t.m_width-.01,s[2]=this.m_outSize/t.m_height+.01,s[3]=1-this.m_outSize/t.m_height-.01;var a={};a.outSize=[this.m_outSize/t.m_width,this.m_outSize/t.m_height],a.innerSize=[this.m_innerSize/t.m_width,this.m_innerSize/t.m_height],a.fac=e,a.shadowInBorder=i,a.shadowOutBorder=s,a.iColor=this.m_iColor,a.oColor=this.m_oColor,t.m_shader.uniforms(a)},e.parcerName="smallGallery",e}(ft),ke=function(t){function e(e){var r=t.call(this,e)||this;return r.m_corner=0,r.m_captation=0,r.m_outSize=0,r.m_innerSize=0,r.m_oColor=new Array(3),r.m_iColor=new Array(3),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D srcImage;        uniform vec4 fac;        uniform vec3 iColor;        uniform vec3 oColor;        uniform vec2 outSize;        uniform vec2 innerSize;        uniform vec2 dstSize;        uniform float captationSize;        uniform float radius;        "},e.prototype.shader_procession=function(){return"        vec2 pos = textureCoordinate;        vec4 outRoundBorder = vec4(outSize.x+radius/dstSize.x,1.0-outSize.x-radius/dstSize.x,outSize.y+radius/dstSize.y,1.0-outSize.y-captationSize-radius/dstSize.y);        vec4 innerRoundBorder = vec4((innerSize.x+outSize.x)+radius/dstSize.x,1.0-(innerSize.x+outSize.x)-radius/dstSize.x,(innerSize.y+outSize.y)+radius/dstSize.y,1.0-(innerSize.y+outSize.y)-captationSize-radius/dstSize.y);        float ox = max(max(outRoundBorder.x-pos.x,pos.x-outRoundBorder.y),0.0);        float oy = max(max(outRoundBorder.z-pos.y,pos.y-outRoundBorder.w),0.0);        float ix = max(max(innerRoundBorder.x-pos.x,pos.x-innerRoundBorder.y),0.0);        float iy = max(max(innerRoundBorder.z-pos.y,pos.y-innerRoundBorder.w),0.0);        if(pos.x<outSize.x||pos.x>1.0 - outSize.x||pos.y<outSize.y||pos.y>1.0-(outSize.y+captationSize)        ||(ox>0.0&&oy>0.0&&(ox*ox*dstSize.x*dstSize.x+oy*oy*dstSize.y*dstSize.y)>(radius)*(radius)))        {            dst = vec4(oColor,1.0);        }        else if(pos.x<(outSize.x+innerSize.x)||pos.x>1.0 - (outSize.x+innerSize.x)||pos.y<(outSize.y+innerSize.y)||pos.y>1.0 - (outSize.y+innerSize.y+captationSize)        ||(ix>0.0&&iy>0.0&&(ix*ix*dstSize.x*dstSize.x+iy*iy*dstSize.y*dstSize.y)>radius*radius))        {            dst = vec4(iColor,1.0);        }        else        {            dst = vec4(texture2D(srcImage, pos * vec2(fac.x, fac.y) + vec2(fac.z, fac.w)).xyz,1.0);        }        "},e.prototype.init=function(t,e,r){t.assume_symbol("outSize"),this.m_outSize=t.fetch_float(),t.assume_symbol("innerSize"),this.m_innerSize=t.fetch_float(),t.assume_symbol("roundCorner"),this.m_corner=t.fetch_float(),t.assume_symbol("captionSize"),this.m_captation=t.fetch_float(),t.assume_symbol("outColor");for(var i=0;i<3;++i)this.m_oColor[i]=t.fetch_float()/255;for(t.assume_symbol("innerColor"),i=0;i<3;++i)this.m_iColor[i]=t.fetch_float()/255},e.prototype.shader_setup=function(t){var e=this.m_context.lock_image(),r=new Array(4);r[0]=t.m_width/(t.m_width-2*this.m_outSize-2*this.m_innerSize),r[1]=t.m_height/(t.m_height-2*this.m_outSize-2*this.m_innerSize-this.m_captation),r[2]=-(this.m_outSize+this.m_innerSize)/(t.m_width-2*this.m_outSize-2*this.m_innerSize),r[3]=-(this.m_outSize+this.m_innerSize)/(t.m_height-2*this.m_outSize-2*this.m_innerSize-this.m_captation),t.shader_texture("srcImage",e);var i={};i.outSize=[this.m_outSize/t.m_width,this.m_outSize/t.m_height],i.innerSize=[this.m_innerSize/t.m_width,this.m_innerSize/t.m_height],i.captationSize=this.m_captation/t.m_height,i.dstSize=[t.m_width,t.m_height],i.fac=r,i.iColor=this.m_iColor,i.oColor=this.m_oColor,i.radius=this.m_corner,t.m_shader.uniforms(i)},e.parcerName="polaroid",e}(ft),Fe=function(t){function e(e){var r=t.call(this,e)||this;return r.m_x1=0,r.m_x2=0,r.m_x3=0,r.m_y1=0,r.m_y2=0,r.m_y3=0,r.m_ms=0,r.m_borderSize=0,r.m_ratio=0,r.m_res_name="",r.m_color=new Array(3),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D border;        uniform sampler2D srcImage;        uniform vec4 my;        uniform vec3 py;        uniform vec3 ky;        uniform vec4 mx;        uniform vec3 px;        uniform vec3 kx;        uniform vec4 fac;        uniform vec2 borderSize;        uniform vec3 color;        "},e.prototype.shader_procession=function(){return"vec3 bx = (vec3(textureCoordinate.x) - kx) * mx.xyz;        bx.y = fract(bx.y)*mx.w;        bx += px;        vec3 by = (vec3(textureCoordinate.y) - ky) * my.xyz;        by.y = fract(by.y)*my.w;        by += py;        vec2 borderCord;        if(textureCoordinate.x > kx.z)        {            borderCord.x = bx.z;        }        else if(textureCoordinate.x > kx.y)        {            borderCord.x = bx.y;        }        else        {            borderCord.x = bx.x;        }        if(textureCoordinate.y > ky.z)        {            borderCord.y = by.z;        }        else if(textureCoordinate.y > ky.y)        {            borderCord.y = by.y;        }        else        {            borderCord.y = by.x;        }        if(textureCoordinate.x<borderSize.x||textureCoordinate.x>1.0 - borderSize.x||textureCoordinate.y<borderSize.y||textureCoordinate.y>1.0-borderSize.y)        {            dst.a = texture2D(border, borderCord).a;                dst.xyz = color;        }        else        {            dst = texture2D(srcImage, textureCoordinate * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));        }        "},e.prototype.init=function(t,e,r){t.assume_symbol("file"),this.m_res_name=t.fetch_string(),t.assume_symbol("resourceLayoutH"),this.m_x1=t.fetch_float()+1e-5,this.m_x2=t.fetch_float()+1e-5,this.m_x3=t.fetch_float()+1e-5,this.m_x2=Math.max(this.m_x2,.008*(this.m_x1+this.m_x3)),t.assume_symbol("resourceLayoutV"),this.m_y1=t.fetch_float()+1e-5,this.m_y2=t.fetch_float()+1e-5,this.m_y3=t.fetch_float()+1e-5,this.m_y2=Math.max(this.m_y2,.008*(this.m_y1+this.m_y3)),t.assume_symbol("thickness"),-1==(this.m_ms=t.lookup_symbol(["pixel","width","height","perimeter",0]))&&(this.m_ms=3),this.m_borderSize=t.fetch_float(),t.assume_symbol("color");for(var i=0;i<3;++i)this.m_color[i]=t.fetch_float()/255;t.assume_symbol("ratio"),this.m_ratio=t.fetch_float()},e.prototype.shader_setup=function(t){var e,r=this.m_context.lock_image(),i=Math.min(t.m_width,t.m_height),s=(e=3==this.m_ms?this.m_borderSize*t.m_width:this.m_borderSize)/(i*this.m_ratio);if(this.m_texturelocker=this.m_context.get_resource_texture(this.m_res_name),!this.m_texturelocker)throw new Error("outside "+this.m_res_name);t.shader_texture("border",this.m_texturelocker.texture),t.shader_texture("srcImage",r);var a=new Array(3),o=new Array(3),n=new Array(4),_=new Array(4),m=new Array(3),h=new Array(3);this.cal_uniform(t.m_width,t.m_height,a,o,n,_,m,h,s);var c=new Array(4);c[0]=t.m_width/(t.m_width-2*e),c[1]=t.m_height/(t.m_height-2*e),c[2]=-e/(t.m_width-2*e),c[3]=-e/(t.m_height-2*e);var l={};l.fac=c,l.borderSize=[e/t.m_width,e/t.m_height],l.color=this.m_color,l.kx=a,l.ky=o,l.mx=n,l.my=_,l.px=m,l.py=h,t.m_shader.uniforms(l)},e.prototype.cal_uniform=function(t,e,r,i,s,a,o,n,_){var m,h;switch(this.m_ms){case 0:m=4*_*(this.m_x1+this.m_x3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*t),h=4*_*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*e);break;case 1:h=(m=2*_)*t*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3)*e);break;case 2:m=(h=2*_)*e*(this.m_x1+this.m_x2)/((this.m_y1+this.m_y3)*t);break;default:var c=2*t+2*e;m=_*c*(this.m_x1+this.m_x3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*t),h=_*c*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*e)}var l=Math.max(h,m);if(l>.99){var u=.99/l;h*=u,m*=u}var f=this.m_x1+this.m_x2+this.m_x3,p=this.m_y1+this.m_y2+this.m_y3,d=h*e/(this.m_y1+this.m_y3),g=m*t/(this.m_x1+this.m_x3),v=(1-m)*t/this.m_x2,x=(1-h)*e/this.m_y2,y=Math.max(Math.floor(v/d+.5),1),w=Math.max(Math.floor(x/g+.5),1),b=this.m_x1/f,z=this.m_x2/f,T=this.m_x3/f,E=this.m_y1/p,C=this.m_y2/p,S=this.m_y3/p,M=1/(b+T),D=1/(E+S);r[0]=0,r[1]=m*b*M,r[2]=1-m*T*M,i[0]=0,i[1]=h*E*D,i[2]=1-h*S*D,s[0]=(b+T)/m,s[1]=y/(1-m),s[2]=s[0],s[3]=z,a[0]=(E+S)/h,a[1]=w/(1-h),a[2]=a[0],a[3]=C,o[0]=0,o[1]=b,o[2]=b+z,n[0]=0,n[1]=E,n[2]=E+C},e.parcerName="outside",e}(ft),Pe=function(t){function e(e){var r=t.call(this,e)||this;return r.m_x1=0,r.m_x2=0,r.m_x3=0,r.m_y1=0,r.m_y2=0,r.m_y3=0,r.m_ms=0,r.m_borderSize=0,r.m_ratio=0,r.m_res_name="",r.m_blend_res_name="",r.m_res_size=new Array,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D border;        uniform sampler2D srcImage;        uniform sampler2D resImage;        uniform vec2 resSize;        uniform vec4 my;        uniform vec3 py;        uniform vec3 ky;        uniform vec4 mx;        uniform vec3 px;        uniform vec3 kx;        uniform vec4 fac;        uniform vec2 borderSize;        "},e.prototype.shader_procession=function(){return"vec3 bx = (vec3(textureCoordinate.x) - kx) * mx.xyz;        bx.y = fract(bx.y)*mx.w;        bx += px;        vec3 by = (vec3(textureCoordinate.y) - ky) * my.xyz;        by.y = fract(by.y)*my.w;        by += py;                vec2 borderCord;                if(textureCoordinate.x > kx.z)        {            borderCord.x = bx.z;        }        else if(textureCoordinate.x > kx.y)        {            borderCord.x = bx.y;        }        else        {            borderCord.x = bx.x;        }                if(textureCoordinate.y > ky.z)        {            borderCord.y = by.z;        }        else if(textureCoordinate.y > ky.y)        {            borderCord.y = by.y;        }        else        {            borderCord.y = by.x;        }        if(textureCoordinate.x<borderSize.x||textureCoordinate.x>1.0 - borderSize.x||textureCoordinate.y<borderSize.y||textureCoordinate.y>1.0-borderSize.y)        {            vec2 resCoord;            resCoord.x  = (textureCoordinate.x-floor(textureCoordinate.x/resSize.x)*resSize.x)/resSize.x;            resCoord.y  = (textureCoordinate.y-floor(textureCoordinate.y/resSize.y)*resSize.y)/resSize.y;            dst.xyz = texture2D(resImage, resCoord).rgb;            dst.a = texture2D(border, borderCord).a;        }        else        {            dst = texture2D(srcImage, textureCoordinate * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));        }        "},e.prototype.init=function(t,e,r){t.assume_symbol("file"),this.m_res_name=t.fetch_string(),t.assume_symbol("blend"),this.m_blend_res_name=t.fetch_string(),t.assume_symbol("resSize"),this.m_res_size[0]=t.fetch_float(),this.m_res_size[1]=t.fetch_float(),t.assume_symbol("resourceLayoutH"),this.m_x1=t.fetch_float()+1e-5,this.m_x2=t.fetch_float()+1e-5,this.m_x3=t.fetch_float()+1e-5,this.m_x2=Math.max(this.m_x2,.008*(this.m_x1+this.m_x3)),t.assume_symbol("resourceLayoutV"),this.m_y1=t.fetch_float()+1e-5,this.m_y2=t.fetch_float()+1e-5,this.m_y3=t.fetch_float()+1e-5,this.m_y2=Math.max(this.m_y2,.008*(this.m_y1+this.m_y3)),t.assume_symbol("thickness"),-1==(this.m_ms=t.lookup_symbol(["pixel","width","height","perimeter",0]))&&(this.m_ms=3),this.m_borderSize=t.fetch_float(),t.assume_symbol("ratio"),this.m_ratio=t.fetch_float()},e.prototype.shader_setup=function(t){var e=this.m_context.lock_image(),r=Math.min(t.m_width,t.m_height),i=0;3==this.m_ms&&(i=this.m_borderSize*t.m_width);var s=i/(r*this.m_ratio);this.m_texturelocker=this.m_context.get_resource_texture(this.m_res_name);var a=this.m_context.get_resource_texture(this.m_blend_res_name);if(!this.m_texturelocker)throw new Error("blendedOutside "+this.m_res_name);if(!a)throw new Error("blendedOutside "+this.m_blend_res_name);t.shader_texture("border",this.m_texturelocker.texture),t.shader_texture("resImage",a.texture),t.shader_texture("srcImage",e);var o=new Array(3),n=new Array(3),_=new Array(4),m=new Array(4),h=new Array(3),c=new Array(3);this.cal_uniform(t.m_width,t.m_height,o,n,_,m,h,c,s);var l=new Array(4);l[0]=t.m_width/(t.m_width-2*i),l[1]=t.m_height/(t.m_height-2*i),l[2]=-i/(t.m_width-2*i),l[3]=-i/(t.m_height-2*i);var u={};u.fac=l,u.resSize=[Math.min(this.m_res_size[0]/t.m_width,1),Math.min(this.m_res_size[1]/t.m_height,1)],u.borderSize=[i/t.m_width,i/t.m_height],u.kx=o,u.ky=n,u.mx=_,u.my=m,u.px=h,u.py=c,t.m_shader.uniforms(u)},e.prototype.cal_uniform=function(t,e,r,i,s,a,o,n,_){var m,h;switch(this.m_ms){case 0:m=4*_*(this.m_x1+this.m_x3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*t),h=4*_*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*e);break;case 1:h=(m=2*_)*t*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3)*e);break;case 2:m=(h=2*_)*e*(this.m_x1+this.m_x2)/((this.m_y1+this.m_y3)*t);break;default:var c=2*t+2*e;m=_*c*(this.m_x1+this.m_x3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*t),h=_*c*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*e)}var l=Math.max(h,m);if(l>.99){var u=.99/l;h*=u,m*=u}var f=this.m_x1+this.m_x2+this.m_x3,p=this.m_y1+this.m_y2+this.m_y3,d=h*e/(this.m_y1+this.m_y3),g=m*t/(this.m_x1+this.m_x3),v=(1-m)*t/this.m_x2,x=(1-h)*e/this.m_y2,y=Math.max(Math.floor(v/d+.5),1),w=Math.max(Math.floor(x/g+.5),1),b=this.m_x1/f,z=this.m_x2/f,T=this.m_x3/f,E=this.m_y1/p,C=this.m_y2/p,S=this.m_y3/p,M=1/(b+T),D=1/(E+S);r[0]=0,r[1]=m*b*M,r[2]=1-m*T*M,i[0]=0,i[1]=h*E*D,i[2]=1-h*S*D,s[0]=(b+T)/m,s[1]=y/(1-m),s[2]=s[0],s[3]=z,a[0]=(E+S)/h,a[1]=w/(1-h),a[2]=a[0],a[3]=C,o[0]=0,o[1]=b,o[2]=b+z,n[0]=0,n[1]=E,n[2]=E+C},e.parcerName="blendedOutside",e}(ft),Ne=function(t){function e(e){var r=t.call(this,e)||this;return r.m_x1=0,r.m_x2=0,r.m_x3=0,r.m_y1=0,r.m_y2=0,r.m_y3=0,r.m_ms=0,r.m_borderSize=0,r.m_ratio=0,r.m_res_name="",r.m_blend_res_name="",r.m_color=new Array(3),r.m_res_size=new Array,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D border;        uniform vec4 my;        uniform vec3 py;        uniform vec3 ky;        uniform vec4 mx;        uniform vec3 px;        uniform vec3 kx;        uniform vec4 fac;        uniform vec2 borderSize;        uniform vec3 color;        "},e.prototype.shader_procession=function(){return"vec3 bx = (vec3(textureCoordinate.x) - kx) * mx.xyz;        bx.y = fract(bx.y)*mx.w;        bx += px;        vec3 by = (vec3(textureCoordinate.y) - ky) * my.xyz;        by.y = fract(by.y)*my.w;        by += py;                vec2 borderCord;                if(textureCoordinate.x > kx.z)        {            borderCord.x = bx.z;        }        else if(textureCoordinate.x > kx.y)        {            borderCord.x = bx.y;        }        else        {            borderCord.x = bx.x;        }                if(textureCoordinate.y > ky.z)        {            borderCord.y = by.z;        }        else if(textureCoordinate.y > ky.y)        {            borderCord.y = by.y;        }        else        {            borderCord.y = by.x;        }        if(textureCoordinate.x<borderSize.x||textureCoordinate.x>1.0 - borderSize.x||textureCoordinate.y<borderSize.y||textureCoordinate.y>1.0-borderSize.y)        {            dst.xyz = color;            dst.a = texture2D(border, borderCord).a;        }        else        {            dst = texture2D(inputImageTexture, textureCoordinate * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));        }        "},e.prototype.init=function(t,e,r){t.assume_symbol("file"),this.m_res_name=t.fetch_string(),t.assume_symbol("resourceLayoutH"),this.m_x1=t.fetch_float()+1e-5,this.m_x2=t.fetch_float()+1e-5,this.m_x3=t.fetch_float()+1e-5,this.m_x2=Math.max(this.m_x2,.008*(this.m_x1+this.m_x3)),t.assume_symbol("resourceLayoutV"),this.m_y1=t.fetch_float()+1e-5,this.m_y2=t.fetch_float()+1e-5,this.m_y3=t.fetch_float()+1e-5,this.m_y2=Math.max(this.m_y2,.008*(this.m_y1+this.m_y3)),t.assume_symbol("thickness"),-1==(this.m_ms=t.lookup_symbol(["pixel","width","height","perimeter",0]))&&(this.m_ms=3),this.m_borderSize=t.fetch_float(),t.assume_symbol("color");for(var i=0;i<3;++i)this.m_color[i]=t.fetch_float()/255;t.assume_symbol("ratio"),this.m_ratio=t.fetch_float()},e.prototype.shader_setup=function(t){var e=Math.min(t.m_width+2*this.m_borderSize,t.m_height+2*this.m_borderSize),r=this.m_borderSize/(e*this.m_ratio);t.shader_texture("border",this.m_texturelocker.texture);var i=new Array(3),s=new Array(3),a=new Array(4),o=new Array(4),n=new Array(3),_=new Array(3);this.cal_uniform(t.m_width+2*this.m_borderSize,t.m_height+2*this.m_borderSize,i,s,a,o,n,_,r);var m=new Array(4);m[0]=(t.m_width+2*this.m_borderSize)/t.m_width,m[1]=(t.m_height+2*this.m_borderSize)/t.m_height,m[2]=-this.m_borderSize/t.m_width,m[3]=-this.m_borderSize/t.m_height;var h={};if(this.m_texturelocker=this.m_context.get_resource_texture(this.m_res_name),!this.m_texturelocker)throw new Error("smallOutside "+this.m_res_name);h.fac=m,h.borderSize=[this.m_borderSize/(t.m_width+2*this.m_borderSize),this.m_borderSize/(t.m_height+2*this.m_borderSize)],h.color=this.m_color,h.kx=i,h.ky=s,h.mx=a,h.my=o,h.px=n,h.py=_,t.m_shader.uniforms(h)},e.prototype.cal_uniform=function(t,e,r,i,s,a,o,n,_){var m,h;switch(this.m_ms){case 0:m=4*_*(this.m_x1+this.m_x3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*t),h=4*_*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*e);break;case 1:h=(m=2*_)*t*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3)*e);break;case 2:m=(h=2*_)*e*(this.m_x1+this.m_x2)/((this.m_y1+this.m_y3)*t);break;default:var c=2*t+2*e;m=_*c*(this.m_x1+this.m_x3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*t),h=_*c*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*e)}var l=Math.max(h,m);if(l>.99){var u=.99/l;h*=u,m*=u}var f=this.m_x1+this.m_x2+this.m_x3,p=this.m_y1+this.m_y2+this.m_y3,d=h*e/(this.m_y1+this.m_y3),g=m*t/(this.m_x1+this.m_x3),v=(1-m)*t/this.m_x2,x=(1-h)*e/this.m_y2,y=Math.max(Math.floor(v/d+.5),1),w=Math.max(Math.floor(x/g+.5),1),b=this.m_x1/f,z=this.m_x2/f,T=this.m_x3/f,E=this.m_y1/p,C=this.m_y2/p,S=this.m_y3/p,M=1/(b+T),D=1/(E+S);r[0]=0,r[1]=m*b*M,r[2]=1-m*T*M,i[0]=0,i[1]=h*E*D,i[2]=1-h*S*D,s[0]=(b+T)/m,s[1]=y/(1-m),s[2]=s[0],s[3]=z,a[0]=(E+S)/h,a[1]=w/(1-h),a[2]=a[0],a[3]=C,o[0]=0,o[1]=b,o[2]=b+z,n[0]=0,n[1]=E,n[2]=E+C},e.parcerName="smallOutside",e}(ft),qe=function(t){function e(e){var r=t.call(this,e)||this;return r.m_corner=0,r.m_captation=0,r.m_outSize=0,r.m_innerSize=0,r.m_oColor=new Array(3),r.m_iColor=new Array(3),r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec4 fac;        uniform vec3 iColor;        uniform vec3 oColor;        uniform vec2 outSize;        uniform vec2 innerSize;        uniform vec2 dstSize;        uniform float radius;        "},e.prototype.shader_procession=function(){return"        vec2 pos = textureCoordinate;        vec4 outRoundBorder = vec4(outSize.x+radius/dstSize.x,1.0-outSize.x-radius/dstSize.x,outSize.y+radius/dstSize.y,1.0-outSize.y-radius/dstSize.y);        vec4 innerRoundBorder = vec4((innerSize.x+outSize.x)+radius/dstSize.x,1.0-(innerSize.x+outSize.x)-radius/dstSize.x,(innerSize.y+outSize.y)+radius/dstSize.y,1.0-(innerSize.y+outSize.y)-radius/dstSize.y);        float ox = max(max(outRoundBorder.x-pos.x,pos.x-outRoundBorder.y),0.0);        float oy = max(max(outRoundBorder.z-pos.y,pos.y-outRoundBorder.w),0.0);        float ix = max(max(innerRoundBorder.x-pos.x,pos.x-innerRoundBorder.y),0.0);        float iy = max(max(innerRoundBorder.z-pos.y,pos.y-innerRoundBorder.w),0.0);        if(pos.x<outSize.x||pos.x>1.0 - outSize.x||pos.y<outSize.y||pos.y>1.0-(outSize.y)        ||(ox>0.0&&oy>0.0&&(ox*ox*dstSize.x*dstSize.x+oy*oy*dstSize.y*dstSize.y)>(radius)*(radius)))        {            dst = vec4(oColor,1.0);        }        else if(pos.x<(outSize.x+innerSize.x)||pos.x>1.0 - (outSize.x+innerSize.x)||pos.y<(outSize.y+innerSize.y)||pos.y>1.0 - (outSize.y+innerSize.y)        ||(ix>0.0&&iy>0.0&&(ix*ix*dstSize.x*dstSize.x+iy*iy*dstSize.y*dstSize.y)>radius*radius))        {            dst = vec4(iColor,1.0);        }        else        {            dst = texture2D(inputImageTexture, pos * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));        }        "},e.prototype.init=function(t,e,r){if(!e)throw new Error("no width");t.assume_symbol("outSize"),this.m_outSize=t.fetch_float()*e,t.assume_symbol("innerSize"),this.m_innerSize=t.fetch_float()*e,t.assume_symbol("roundCorner"),this.m_corner=t.fetch_float()*e,t.assume_symbol("outColor");for(var i=0;i<3;++i)this.m_oColor[i]=t.fetch_float()/255;for(t.assume_symbol("innerColor"),i=0;i<3;++i)this.m_iColor[i]=t.fetch_float()/255},e.prototype.shader_setup=function(t){var e=new Array(4),r=Math.max(t.m_width,t.m_height);e[0]=r/(r-2*this.m_outSize-2*this.m_innerSize),e[1]=e[0],r==t.m_width?(e[2]=-(this.m_outSize+this.m_innerSize)/t.m_width*e[0],e[3]=-(e[0]-1)/2):(e[3]=-(this.m_outSize+this.m_innerSize)/t.m_height*e[0],e[2]=-(e[0]-1)/2);var i={};i.outSize=[this.m_outSize/t.m_width,this.m_outSize/t.m_height],i.innerSize=[this.m_innerSize/t.m_width,this.m_innerSize/t.m_height],i.dstSize=[t.m_width,t.m_height],i.fac=e,i.iColor=this.m_iColor,i.oColor=this.m_oColor,i.radius=this.m_corner,t.m_shader.uniforms(i)},e.parcerName="smallPolaroid",e}(ft),Be=function(){function t(){}return t.create=function(t){return new wi(t,wi.special_border_list)},t.parcerName="specialBorder",t}(),Ue=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));                dst = src * 0.25;"},e}(ue),Le=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_m=new Array(4),r.m_str_fshFragBlurSharpenDownResizeProc="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;        uniform vec2 sft;                vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);        }                void main()        {                    vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));                    gl_FragColor = src * 0.25;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragBlurSharpenDownResizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e);var o={};o.m=this.m_m,o.sft=[1/r,1/i],a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragBlurSharpenDownResizeProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Oe=function(t){function e(e){var r=t.call(this)||this;return r.m_amount=0,r.m_end_fac=0,r.m_context=e,r.m_shader=null,r.m_m=new Array(4),r.m_str_fshFragBlurSharpenResizeProc="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D subImageTextureR;        uniform sampler2D subImageTextureD;        uniform vec4 m;        uniform float amount;        uniform float end_fac;                void main()        {                        vec4 src = texture2D(inputImageTexture, textureCoordinate);                        vec4 sub_r = texture2D(subImageTextureR, textureCoordinate * m.xy + m.zw);            vec4 sub_d = texture2D(subImageTextureD, textureCoordinate * m.xy + m.zw);                        gl_FragColor = ((src - sub_r) * end_fac + sub_d) *(1.0 - amount) +src * amount;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragBlurSharpenResizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTextureR",e[1]),a.shader_texture("subImageTextureD",e[2]);var o={};o.m=this.m_m,o.amount=this.m_amount,o.end_fac=this.m_end_fac,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragBlurSharpenResizeProc: "+n)},e.prototype.init=function(t,e){this.m_amount=t,this.m_end_fac=e},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Ge=function(t){function e(e){var r=t.call(this)||this;return r.m_factor=0,r.m_context=e,r.m_shader=null,r.m_str_fshFragBlurSharpenUpProc="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D subImageTextureR;        uniform sampler2D subImageTextureD;        uniform float fac;                        void main()        {            vec4 dst = texture2D(inputImageTexture, textureCoordinate);                        vec4 sub_r = texture2D(subImageTextureR, textureCoordinate);            vec4 sub_d = texture2D(subImageTextureD, textureCoordinate);                        gl_FragColor = (dst - sub_r)*fac + sub_d;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragBlurSharpenUpProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTextureR",e[1]),a.shader_texture("subImageTextureD",e[2]);var o={};o.fac=this.m_factor,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragBlurSharpenUpProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),je=function(){function t(t){this.m_pyramid_gpu=null,this.m_width=0,this.m_height=0,this.m_last_src="",this.m_amount=0,this.m_radius=0,this.m_context=t,this.m_factor=new le,this.m_down_resize_filter=new Le(this.m_context),this.m_down_filter=new Ue(this.m_context),this.m_up_filter=new Ge(this.m_context),this.m_up_resize_filter=new Oe(this.m_context)}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.size_change(r.m_width,r.m_height),this.m_pyramid_gpu||(this.m_pyramid_gpu=new Ce(this.m_context,this.m_factor,4099,!0,!1,2),this.m_last_src=""),this.inter_process(t,this.m_pyramid_gpu,e.new_temporary(),e.current(),r.m_width,r.m_height,r.m_frameBuffer);var i=this.m_context.context().getError();if(i)throw new Error("BlurSharpen : "+i);e.push_to_current()}catch(t){throw new Error("BlurSharpen process: "+t)}},t.prototype.destroy=function(){this.clear(),this.m_down_resize_filter&&this.m_down_resize_filter.destroy(),this.m_down_filter&&this.m_down_filter.destroy()},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.m_last_src="",this.cal_embed(this.m_factor,this.m_width,this.m_height),this.clear())},t.prototype.inter_process=function(t,e,r,i,s,a,o){t.get_log()!=this.m_last_src&&(this.draw_temp_textures(e,i,o),this.m_last_src=t.get_log()),this.init(t);var n=1;n=this.draw_up_textures(e,o,n),this.m_factor.get_rev_trans(this.m_up_resize_filter.m_m),this.m_up_resize_filter.init(.01*this.m_amount+1,n);var _=new Array(3);_[0]=i,_[1]=e.m_images[e.m_images.length-1][0],_[2]=e.m_images[e.m_images.length-1][1],this.m_up_resize_filter.process(r,_,s,a,o)},t.prototype.init=function(t){t.assume_symbol("amount"),this.m_amount=t.fetch_float(-100,500),t.assume_symbol("radius"),this.m_radius=t.fetch_float(0,4)},t.prototype.clear=function(){this.m_pyramid_gpu&&(this.m_pyramid_gpu.destroy(),this.m_pyramid_gpu=null)},t.prototype.cal_embed=function(t,e,r){var i,s,a,o;r<=0||e<=0||(e>r?(i=32,s=32*r/e,32*r%e&&++s,++s,a=32,o=32*r/e):(i=32*e/r,s=32,32*e%r&&++i,++i,a=32*e/r,o=32),t.m_src_width=e,t.m_src_height=r,t.m_dst_width=i,t.m_dst_height=s,t.m_x_start=0,t.m_y_start=0,t.m_emb_width=a,t.m_emb_height=o)},t.prototype.draw_temp_textures=function(t,e,r){t.load_from(this.m_down_resize_filter,e,r),t.draw_downward(this.m_down_filter,r)},t.prototype.draw_up_textures=function(t,e,r){t.map_create(1);for(var i=new Array(t.m_images.length),s=0;s<i.length;++s){var a=Math.max(t.m_size[s].width,t.m_size[s].height)/16*this.m_radius;i[s]=Math.exp(-a*a)}for(a=Math.max(t.m_factor.m_src_width,t.m_factor.m_src_height)/16*this.m_radius,r=Math.exp(-a*a),s=1;s<t.m_images.length;++s)if(this.m_up_filter.m_factor=i[s],t.m_base_level==s){var o=[t.m_base_images[0],t.m_images[s-1][0],t.m_images[s-1][1]];1==s&&this.m_context.copy_texture(t.m_images[s-1][1],t.m_images[s-1][0],t.m_size[s-1].width,t.m_size[s-1].height,e),this.m_up_filter.process(t.m_base_images[1],o,t.m_base_size,t.m_base_size,e),t.base_move_up(1,e)}else o=[t.m_images[s][0],t.m_images[s-1][0],t.m_images[s-1][1]],1==s&&this.m_context.copy_texture(t.m_images[s-1][1],t.m_images[s-1][0],t.m_size[s-1].width,t.m_size[s-1].height,e),this.m_up_filter.process(t.m_images[s][1],o,t.m_size[s].width,t.m_size[s].height,e);return r},t.parcerName="blurSharpen",t}(),Xe=function(){function t(t){this.m_shader=null,this.m_key=0,this.m_context=t,this.m_str_fshCGEToneMapEnd="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D srcTexForAlpha;                uniform float key;        uniform float key_base;                vec3 color_limite(vec3 src,float lum)        {            vec3 vl = vec3(lum);                        vec3 vc = src - vl;                        vec3 fac = min((vec3(1.0) - vl) / max(vc,0.00001),1.0);                        vc = vc * vec3(min(fac.r,min(fac.g,fac.b)));                        return vl + vc;        }                void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate);                        vec3 csrc;            float lum;            csrc.r = src.x;            csrc.b = src.y;            csrc.g = 1.0 - src.x - src.y;                        lum = src.w + (- 0.5 + src.z)*(1.0 / 255.0);                        lum = (exp(lum * key_base) - 1.0) * key;                        lum = min(lum,0.9999);                        csrc *= vec3(lum);                        vec3 lsrc = csrc * vec3(1.0/0.299,1.0/0.587,1.0/0.114);                        lsrc = color_limite(lsrc,lum);                        lsrc = min(lsrc,0.9999);                         src.rgb = min(lsrc * 12.82,pow(lsrc,vec3(1.0 / 2.4)) * vec3(1.055) - vec3(0.055));                        src.a =texture2D(srcTexForAlpha, textureCoordinate).w;                        gl_FragColor = src;        } "}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.m_shader||(this.m_shader=new y(null,this.m_str_fshCGEToneMapEnd,this.m_context.context()));var i=new w(this.m_context.context(),r,this.m_shader);if(!this.init(t))return;i.shader_texture("inputImageTexture",e.current()),i.shader_texture("srcTexForAlpha",e.get_src());var s={key:0,key_base:0};this.cal_fac(s);var a={};a.key=s.key,a.key_base=s.key_base,i.m_shader.uniforms(a),i.draw_to(e.new_temporary());var o=this.m_context.context().getError();if(o)throw new Error("ToneMapEnd: "+o);e.push_to_current()}catch(o){throw new Error("ToneMapEnd process: "+o)}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},t.prototype.init=function(t){return t.m_parcer.backup(),this.pre_check(t.m_parcer,t.m_key)?(t.log("start merged"),!1):(t.m_parcer.restore(),this.m_key=t.m_key,t.m_mode=dt.SRGB,!0)},t.prototype.cal_fac=function(t){var e=Math.pow(2,5-this.m_key/20);t.key_base=Math.log(e+1),t.key=1/e},t.prototype.pre_check=function(t,e){return g.Semicolon!=t.get_current_status()?0:(t.next(),t.cmp_symbol("toneMapStart")?(t.next(),t.cmp_symbol("key")?(t.next(),e!=t.get_float()?0:4):0):0)},t.parcerName="toneMapEnd",t}(),He=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"dst = get_sample(vec2(0.0,0.0));"},e}(ue),Ve=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragToneEnhanceHistProc="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;                void main()        {            vec2 cod = textureCoordinate * m.xy + m.zw;                        cod = max(cod,-cod);            cod = min(cod,vec2(2.0)-cod);                        vec4 src = texture2D(inputImageTexture, cod);                        vec4 hst = vec4(src.w);                        hst = (hst - vec4(-0.25,0.0,0.5,0.75)) * vec4(8.0);                        hst = min(max(hst,0.0),4.0);                        hst = abs( hst - vec4(2.0));                        hst = hst - vec4(1.0);                        hst = hst * (hst * hst - vec4(3.0))* vec4(0.25) + vec4(0.5);                        gl_FragColor = hst;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragToneEnhanceHistProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e);var o={};o.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragToneEnchangceHistProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),We=function(t){function e(e){var r=t.call(this)||this;return r.m_al=0,r.m_au=0,r.m_bl=0,r.m_bu=0,r.m_context=e,r.m_shader=null,r.m_str_fshToneEnhanceResizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D hisImageTexture;        uniform vec4 m;        uniform float al;        uniform float au;        uniform float bl;        uniform float bu;                void main()        {            vec4 hst = texture2D(hisImageTexture,textureCoordinate * m.xy + m.zw);                        vec3 h = vec3((hst.x + hst.y/2.0),(1.0 + hst.x + hst.y - hst.z - hst.w)/2.0,(1.0 - hst.z/2.0 - hst.w));                        vec3 ha = h - vec3(0.25,0.5,0.75);                        float a = dot(ha , vec3(288.0/77.0,256.0/77.0,96.0/77.0));                        a = max (al,min(au,a));                        vec3 hb = h - vec3(0.25,0.5,0.75) - vec3(a) * vec3(9.0/64.0,1.0/8.0,3.0/64.0);                        float b = dot(hb , vec3(-96.0/77.0,-256.0/77.0,-288.0/77.0));                        b = max(bl,min(bu,b));                        vec3 f = vec3(1.0,-2.0,1.0) * vec3(a) + vec3(1.0,-1.0,0.0) * vec3(b);                        vec4 src = texture2D(inputImageTexture,textureCoordinate);                        float v = src.w + (- 0.5 + src.z)*(1.0 / 255.0);                        v = ((f.x * v + f.y) * v + (f.z + 1.0)) * v;                        v = clamp(v,0.0,1.0);                        src.w = v;            gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshToneEnhanceResizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("hisImageTexture",e[1]);var o={};o.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],o.al=this.m_al,o.au=this.m_au,o.bl=this.m_bl,o.bu=this.m_bu,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragToneEnhanceResizeProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Ye=function(t){function e(e){var r=t.call(this)||this;return r.m_fac=0,r.m_context=e,r.m_shader=null,r.m_str_fshFragToneEnhanceUpProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D subImageTexture;        uniform float fac;                        void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate);            vec4 sub = texture2D(subImageTexture,textureCoordinate);            vec4 dst = src* vec4(fac) + vec4(1.0 - fac) * sub;                        gl_FragColor = dst;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragToneEnhanceUpProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTexture",e[1]);var o={};o.fac=this.m_fac,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragToneEnhanceUpProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Je=function(){function t(t){this.m_pyramid_gpu=null,this.m_width=0,this.m_height=0,this.m_last_src="",this.m_dark_low=0,this.m_dark_up=0,this.m_light_low=0,this.m_light_up=0,this.m_blur_level=0,this.m_blur_factor=0,this.m_context=t,this.m_factor=new le,this.m_up_resize_filter=new We(this.m_context),this.m_up_filter=new Ye(this.m_context),this.m_hst_filter=new Ve(this.m_context),this.m_down_filter=new He(this.m_context),this.m_resize_filter=new Qt(this.m_context)}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.size_change(r.m_width,r.m_height),this.m_pyramid_gpu||(this.m_pyramid_gpu=new Ce(this.m_context,this.m_factor,1025,!0),this.m_last_src=""),this.inter_process(t,this.m_pyramid_gpu,e.new_temporary(),e.current(),r.m_width,r.m_height,r.m_frameBuffer);var i=this.m_context.context().getError();if(i)throw new Error("ToneEnhance: "+i);e.push_to_current()}catch(t){throw new Error("ToneEnhance process: "+t)}},t.prototype.destroy=function(){this.clear(),this.m_up_resize_filter.destroy(),this.m_up_filter.destroy(),this.m_hst_filter.destroy(),this.m_down_filter.destroy(),this.m_resize_filter.destroy()},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.m_last_src="",this.cal_embed(this.m_factor,this.m_width,this.m_height),this.clear())},t.prototype.clear=function(){this.m_pyramid_gpu&&(this.m_pyramid_gpu.destroy(),this.m_pyramid_gpu=null)},t.prototype.inter_process=function(t,e,r,i,s,a,o){t.get_log()!=this.m_last_src&&(this.draw_temp_textures(e,i,o),this.m_last_src=t.get_log()),this.init(t),this.draw_up_textures(e,o),this.m_factor.get_rev_trans(this.m_up_resize_filter.m_m),this.m_up_resize_filter.m_al=this.m_dark_low,this.m_up_resize_filter.m_au=this.m_dark_up,this.m_up_resize_filter.m_bl=this.m_light_low,this.m_up_resize_filter.m_bu=this.m_light_up;var n=new Array(3);n[0]=i,n[1]=e.m_images[e.m_images.length-1][1],this.m_up_resize_filter.process(r,n,s,a,o)},t.prototype.init=function(t){if(t.assume_symbol("dark"),this.m_dark_low=t.fetch_float(-1,3),this.m_dark_up=t.fetch_float(-1,3),this.m_dark_low>this.m_dark_up)throw"dark1 must less than dark2";if(t.assume_symbol("light"),this.m_light_low=t.fetch_float(-1,3),this.m_light_up=t.fetch_float(-1,3),this.m_light_low>this.m_light_up)throw"light1 must less than light2";this.m_blur_level=1,this.m_blur_factor=3.5,t.test_symbol("blurFactor")&&(this.m_blur_level+=6*t.fetch_float(0,1),this.m_blur_factor*=Math.pow(1/16,t.fetch_float(0,1)))},t.prototype.draw_up_textures=function(t,e){t.map_create(1);for(var r=new Array(t.m_images.length),i=0,s=0;s<r.length;++s){var a=(s-this.m_blur_level)/this.m_blur_factor,o=Math.exp(-a*a);r[s]=o/(i+o),i+=o}for(s=1;s<t.m_images.length;++s){this.m_up_filter.m_fac=r[s];var n=1;1==s&&(n=0);var _=[t.m_images[s][0],t.m_images[s-1][n]];this.m_up_filter.process(t.m_images[s][1],_,t.m_size[s].width,t.m_size[s].height,e)}},t.prototype.draw_temp_textures=function(t,e,r){t.load_from(this.m_hst_filter,e,r),t.draw_downward(this.m_down_filter,r)},t.prototype.cal_embed=function(t,e,r){r<=0||e<=0||(t.m_src_width=e,t.m_src_height=r,t.m_dst_width=1,t.m_dst_height=1,e>r?(t.m_emb_width=1,t.m_x_start=0,t.m_emb_height=1/e*r,t.m_y_start=.5*(1-t.m_emb_height)):(t.m_emb_height=1,t.m_y_start=0,t.m_emb_width=1/r*e,t.m_x_start=.5*(1-t.m_emb_width)))},t.parcerName="toneEnhance",t}(),Qe=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragMixLogDebugResizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;                void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate);                        float dlum = 256.0*src.y - 0.5 + src.x;            float rlum = 256.0*src.w - 0.5 + src.z;                        float lum = rlum;                        src.x = 77.5 / 256.0;            src.y = 29.5 / 256.0;                        float flum = floor(lum);            src.z = lum - flum;            src.w = (flum + 0.5) * (1.0/256.0);                                    gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragMixLogDebugResizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e),this.m_context.texture_enable_linear(e,!1),a.draw_to(t),this.m_context.texture_enable_linear(e,!0);var o=this.m_context.context().getError();if(o)throw new Error("FragMixLogDebugResizeFilter: "+o)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Ke=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"        vec4 src = get_sample(vec2(-3.0/8.0,-3.0/8.0));        src += get_sample(vec2( 3.0/8.0,-3.0/8.0));        src += get_sample(vec2(-3.0/8.0, 3.0/8.0));        src += get_sample(vec2( 3.0/8.0, 3.0/8.0));                float dlum = (255.0*src.w + src.z)*0.25;                float fdlum = floor(dlum);                dst.z = dlum - fdlum;        dst.w = fdlum * (1.0/255.0);                dst.xy = dst.zw;                "},e}(ue),Ze=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragStructureSharpenUpProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;        uniform vec2 sft;                vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);        }                void main()        {                        vec4 src = get_sample(vec2(-3.0/8.0,-3.0/8.0));            src += get_sample(vec2( 3.0/8.0,-3.0/8.0));            src += get_sample(vec2(-3.0/8.0, 3.0/8.0));            src += get_sample(vec2( 3.0/8.0, 3.0/8.0));                        float dlum = (255.0*src.w + src.z)*0.25;                        float fdlum = floor(dlum);                        src.z = dlum - fdlum;            src.w = fdlum * (1.0/255.0);                        src.xy = src.zw;                        gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragStructureSharpenUpProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e);var o={};o.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],o.sft=[1/r,1/i],a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragStructureSharpenDownResizeProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),$e=function(t){function e(e){var r=t.call(this)||this;return r.m_fac=0,r.m_relax=0,r.m_context=e,r.m_shader=null,r.m_str_fshFragStructureSharpenIterate="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform float fac;        uniform float relax;        uniform vec2 sft;        uniform vec4 w_th;                vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate + sft * cd);        }                void main()        {            vec4 dst = vec4(0.0);                        vec4 wt = step(w_th,vec4(textureCoordinate.xy,-textureCoordinate.xy));                        vec4 src = get_sample(vec2( 0.0,-1.0)) * wt.y;            src += get_sample(vec2(-1.0, 0.0)) * wt.x;            src += get_sample(vec2( 1.0, 0.0)) * wt.z;            src += get_sample(vec2( 0.0, 1.0)) * wt.w;                        float wf = wt.x + wt.y + wt.z + wt.w;            wf = 1.0 / wf;                        vec4 srcn = get_sample(vec2( 0.0, 0.0));                        vec4 v1 = vec4(src.wy,srcn.wy);            vec4 v2 = vec4(src.zx,srcn.zx);                        v1 = v1 * 255.0 + v2;            v1 *= vec4(wf,wf,1.0,1.0);            float lum = dot(v1,vec4(-fac * relax,relax,fac * relax,1.0 - relax));                        float flum = floor(lum);                        dst.x = lum - flum;            dst.y = flum * (1.0/255.0);                        float frefn = floor(v1.z);                        dst.z = v1.z - frefn;            dst.w = frefn * (1.0/255.0);                        gl_FragColor = dst;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragStructureSharpenIterate,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e);var o=1/r,n=1/i,_={};_.sft=[o,n],_.fac=this.m_fac,_.relax=this.m_relax,_.w_th=[o,n,o-1,n-1],a.m_shader.uniforms(_),a.draw_to(t);var m=this.m_context.context().getError();if(m)throw new Error("FragStructureSharpenIterateProc: "+m)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),tr=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"vec4 src;                        src = get_sample(vec2( 0.0, 0.0));                        float ref = 255.0*src.w + src.z;                                float fref = floor(ref);                        dst.z = ref - fref;                dst.w = fref * (1.0/255.0);                        dst.x = 0.5;                dst.y = 0.5;                "},e}(pe),er=function(t){function e(e){var r=t.call(this)||this;return r.m_contrast=0,r.m_strength=0,r.m_dark=0,r.m_light=0,r.m_end_fac=0,r.m_context=e,r.m_shader=null,r.m_str_fshFragStructureSharpenUpProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D subImageTexture;        uniform vec4 m;        uniform float contrast;        uniform float strength;        uniform float end_fac;        uniform vec2 darklight;        uniform vec2 darklight_inv;                void main()        {                    vec4 src = texture2D(inputImageTexture, textureCoordinate);                        float slum = 255.0*src.w + src.z;                        vec4 sub = texture2D(subImageTexture,textureCoordinate * m.xy + m.zw);                        float dlum = 255.0*sub.y + sub.x;            float rlum = 255.0*sub.w + sub.z;                        float sl1 = (slum - 0.5) * (1.0 / 255.0);                        vec2 dh;            dh.x = darklight.x - sl1;            dh.y = sl1 - darklight.y;            dh *= darklight_inv;            dh = max(dh,0.0);            dh *= dh;            dh = max(1.0 - dh,0.0);                                    float lt= (slum - ((slum - 128.0) * end_fac + dlum - rlum) * contrast - 128.0) * strength;                        lt *= mix(dh.x, dh.y, step(0.0, lt));                        slum -= lt;                        slum = clamp(slum,0.5,255.5);                        float fslum = floor(slum);                        src.z = slum - fslum;            src.w = fslum * (1.0/255.0);                        gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragStructureSharpenUpProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTexture",e[1]);var o={};o.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],o.contrast=this.m_contrast,o.strength=this.m_strength,o.darklight=[this.m_dark,this.m_light],o.darklight_inv=[1/this.m_dark,1/(1-this.m_light)],o.end_fac=this.m_end_fac,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragStructureSharpenResizeProc: "+n)},e.prototype.init=function(t,e,r,i,s){this.m_contrast=t,this.m_strength=e,this.m_dark=r,this.m_light=i,this.m_end_fac=s},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),rr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragStructureSharpenUpProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D subImageTexture;                        void main()        {            vec4 dst;                        vec4 src = texture2D(inputImageTexture, textureCoordinate);                        float slum = 255.0*src.w + src.z;                        float fslum = floor(slum);                        dst.z = slum - fslum;            dst.w = fslum * (1.0/255.0);                        vec4 sub = texture2D(subImageTexture,textureCoordinate);                        float dlum = 255.0*sub.y + sub.x;                        dlum = clamp(dlum,0.5,255.5);                        float fdlum = floor(dlum);                        dst.x = dlum - fdlum;            dst.y = fdlum * (1.0/255.0);                        gl_FragColor = dst;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragStructureSharpenUpProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTexture",e[1]),a.draw_to(t);var o=this.m_context.context().getError();if(o)throw new Error("FragStructureSharpenUpProc: "+o)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),ir=function(){function t(t){this.m_pyramid_gpu=null,this.m_width=0,this.m_height=0,this.m_last_src="",this.m_times=0,this.m_blur_factor=0,this.m_blur_factor_radius=0,this.m_relaxation_start=0,this.m_relaxation_end=0,this.m_relaxation_radius=0,this.m_strength=0,this.m_contrast=0,this.m_dark=0,this.m_light=0,this.m_context=t,this.m_factor=new le,this.m_up_resize_filter=new er(this.m_context),this.m_iterate_filter=new $e(this.m_context),this.m_up_filter=new rr(this.m_context),this.m_down_resize_filter=new Ze(this.m_context),this.m_down_filter=new Ke(this.m_context),this.m_iterate_start_filter=new tr(this.m_context),this.m_debug_filter=new Qe(this.m_context)}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.size_change(r.m_width,r.m_height),this.m_pyramid_gpu||(this.m_pyramid_gpu=new Ce(this.m_context,this.m_factor,1025,!0,!1,2),this.m_last_src=""),this.inter_process(t,this.m_pyramid_gpu,e.new_temporary(),e.current(),r.m_width,r.m_height,r.m_frameBuffer);var i=this.m_context.context().getError();if(i)throw new Error("StructureSharpen: "+i);e.push_to_current()}catch(t){throw"StructureSharpen process: "+t}},t.prototype.destroy=function(){this.clear(),this.m_up_resize_filter&&this.m_up_resize_filter.destroy(),this.m_iterate_filter&&this.m_iterate_filter.destroy(),this.m_up_filter&&this.m_up_filter.destroy(),this.m_down_resize_filter&&this.m_down_resize_filter.destroy(),this.m_down_filter&&this.m_down_filter.destroy(),this.m_iterate_start_filter&&this.m_iterate_start_filter.destroy(),this.m_debug_filter&&this.m_debug_filter.destroy()},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.m_last_src="",this.cal_embed(this.m_factor,this.m_width,this.m_height),this.clear())},t.prototype.clear=function(){this.m_pyramid_gpu&&(this.m_pyramid_gpu.destroy(),this.m_pyramid_gpu=null)},t.prototype.inter_process=function(t,e,r,i,s,a,o){t.get_log()!=this.m_last_src&&(this.draw_temp_textures(e,i,o),this.m_last_src=t.get_log()),this.init(t);var n={end_fac:0},_=this.draw_up_textures(e,o,n);this.m_factor.get_rev_trans(this.m_up_resize_filter.m_m),this.m_up_resize_filter.init(this.m_contrast,.01*this.m_strength,this.m_dark,this.m_light,n.end_fac);var m=new Array(3);m[0]=i,m[1]=e.m_images[e.m_images.length-1][_],this.m_up_resize_filter.process(r,m,s,a,o)},t.prototype.init=function(t){t.assume_symbol("iterateTimes"),this.m_times=Math.floor(t.fetch_float(1,20)+.5),t.assume_symbol("factor"),this.m_blur_factor=t.fetch_float(0,1),this.m_blur_factor_radius=t.fetch_float(.1,10),t.assume_symbol("relaxation"),this.m_relaxation_start=t.fetch_float(0,2),this.m_relaxation_end=t.fetch_float(0,2),this.m_relaxation_radius=t.fetch_float(.1,5),t.assume_symbol("strength"),this.m_strength=t.fetch_float(0,100),t.assume_symbol("contrast"),this.m_contrast=t.fetch_float(0,5),t.assume_symbol("darkLight"),this.m_dark=t.fetch_float(0,.5),this.m_light=t.fetch_float(.5,1)},t.prototype.draw_up_textures=function(t,e,r){t.map_create(1);for(var i=new Array(t.m_images.length),s=new Array(t.m_images.length),a=0;a<i.length;++a){var o=a/this.m_blur_factor_radius,n=Math.exp(-o*o);i[a]=1-n+this.m_blur_factor*n}for(o=(Math.log(Math.max(t.m_factor.m_src_width,t.m_factor.m_src_height))/Math.log(2)-1)/this.m_blur_factor_radius,n=Math.exp(-o*o),r.end_fac=1-n+this.m_blur_factor*n,a=0;a<s.length;++a)o=a/this.m_relaxation_radius,n=Math.exp(-o*o),s[a]=this.m_relaxation_end*(1-n)+this.m_relaxation_start*n;t.m_start=0,t.m_end=1,t.map1(this.m_iterate_start_filter,1,0,e);var _=1;for(this.m_context.texture_enable_linear(t.m_images[0][0],!1),this.m_context.texture_enable_linear(t.m_images[0][1],!1),a=0;a<t.m_images.length;++a){this.m_iterate_filter.m_fac=i[a],this.m_iterate_filter.m_relax=s[a];for(var m=0;m<this.m_times;++m)t.map1(this.m_iterate_filter,1-_,_,e),_=1-_;if(this.m_context.texture_enable_linear(t.m_images[a][0],!0),this.m_context.texture_enable_linear(t.m_images[a][1],!0),a<t.m_images.length-1){var h=a+1;if(t.m_start=h,t.m_end=h+1,t.m_base_level==h){var c=[t.m_base_images[0],t.m_images[h-1][_]];this.m_up_filter.process(t.m_base_images[1],c,t.m_base_size,t.m_base_size,e),t.base_move_up(1,e)}else c=[t.m_images[h][0],t.m_images[h-1][_]],this.m_up_filter.process(t.m_images[h][1],c,t.m_size[h].width,t.m_size[h].height,e);_=1,this.m_context.texture_enable_linear(t.m_images[h][0],!1),this.m_context.texture_enable_linear(t.m_images[h][1],!1)}}return _},t.prototype.draw_temp_textures=function(t,e,r){t.load_from(this.m_down_resize_filter,e,r),t.draw_downward(this.m_down_filter,r)},t.prototype.cal_embed=function(t,e,r){if(!(r<=0||e<=0)){var i=0,s=0,a=0,o=0;e>r?(i=32,s=32*r/e,32*r%e&&++s,++s,a=32,o=32*r/e):0!=r&&(i=32*e/r,s=32,32*e%r&&++i,++i,a=32*e/r,o=32),t.m_src_width=e,t.m_src_height=r,t.m_dst_width=Math.floor(i),t.m_dst_height=Math.floor(s),t.m_x_start=0,t.m_y_start=0,t.m_emb_width=Math.floor(a),t.m_emb_height=Math.floor(o)}},t.parcerName="structureSharpen",t}(),sr=function(t){function e(e){var r=t.call(this)||this;return r.m_amount=0,r.m_end_fac=0,r.m_context=e,r.m_shader=null,r.m_m=new Array(4),r.m_str_fshBlurSharpenResizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D subImageTexture;        uniform vec4 m;        uniform float amount;        uniform float end_fac;        uniform float highlight;        uniform float highlight_inv;                void main()        {                        vec4 src = texture2D(inputImageTexture, textureCoordinate);                        float slum = 255.0*src.w + src.z;                        vec4 sub = texture2D(subImageTexture,textureCoordinate * m.xy + m.zw);                        float dlum = 255.0*sub.y + sub.x;            float rlum = 255.0*sub.w + sub.z;                        slum = ((slum - rlum) * end_fac + dlum) * (1.0 - amount) + slum * amount;                        slum = clamp(slum,0.5,255.5);                        float fslum = floor(slum);                        src.z = slum - fslum;            src.w = fslum * (1.0/255.0);                        gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshBlurSharpenResizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTexture",e[1]);var o={};o.m=this.m_m,o.amount=this.m_amount,o.end_fac=this.m_end_fac,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragMixLogBlurSharpenResizeProc: "+n)},e.prototype.init=function(t,e){this.m_amount=t,this.m_end_fac=e},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),ar=function(t){function e(e){var r=t.call(this)||this;return r.m_factor=0,r.m_context=e,r.m_shader=null,r.m_m=new Array(4),r.m_str_fshFragBlurSharpenUpProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D subImageTexture;        uniform float fac;                void main()        {            vec4 dst = texture2D(inputImageTexture, textureCoordinate);                        float slum = 255.0*dst.w + dst.z;                        vec4 sub = texture2D(subImageTexture,textureCoordinate);                        float rlum = 255.0*sub.w + sub.z;            float dlum = 255.0*sub.y + sub.x;                        dlum = (slum - rlum)*fac + dlum;                        dlum = clamp(dlum,0.5,255.5);                        float fdlum = floor(dlum);                        dst.x = dlum - fdlum;            dst.y = fdlum * (1.0/255.0);                        gl_FragColor = dst;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragBlurSharpenUpProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTexture",e[1]);var o={};o.fac=this.m_factor,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragMixLogBlurSharpenUpProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),or=function(){function t(t){this.m_pyramid_gpu=null,this.m_width=0,this.m_height=0,this.m_last_src="",this.m_amount=0,this.m_radius=0,this.m_context=t,this.m_factor=new le,this.m_up_resize_filter=new sr(this.m_context),this.m_up_filter=new ar(this.m_context),this.m_down_resize_filter=new Ze(this.m_context),this.m_down_filter=new Ke(this.m_context),this.m_debug_filter=new Qe(this.m_context)}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.size_change(r.m_width,r.m_height),this.m_pyramid_gpu||(this.m_pyramid_gpu=new Ce(this.m_context,this.m_factor,1025,!0,!1,2),this.m_last_src=""),this.inter_process(t,this.m_pyramid_gpu,e.new_temporary(),e.current(),r.m_width,r.m_height,r.m_frameBuffer);var i=this.m_context.context().getError();if(i)throw new Error("BlurSharpenMixLog : "+i);e.push_to_current()}catch(t){throw"BlurSharpenMixLog process: "+t}},t.prototype.destroy=function(){this.clear(),this.m_up_resize_filter.destroy(),this.m_up_filter.destroy(),this.m_down_resize_filter.destroy(),this.m_down_filter.destroy(),this.m_debug_filter.destroy()},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.m_last_src="",this.cal_embed(this.m_factor,this.m_width,this.m_height),this.clear())},t.prototype.inter_process=function(t,e,r,i,s,a,o){t.get_log()!=this.m_last_src&&(this.draw_temp_textures(e,i,o),this.m_last_src=t.get_log()),this.init(t);var n=this.draw_up_textures(e,o);this.m_factor.get_rev_trans(this.m_up_resize_filter.m_m),this.m_up_resize_filter.init(.01*this.m_amount+1,n);var _=new Array(3);_[0]=i,_[1]=e.m_images[e.m_images.length-1][1],this.m_up_resize_filter.process(r,_,s,a,o)},t.prototype.clear=function(){this.m_pyramid_gpu&&(this.m_pyramid_gpu.destroy(),this.m_pyramid_gpu=null)},t.prototype.init=function(t){t.assume_symbol("amount"),this.m_amount=t.fetch_float(-100,500),t.assume_symbol("radius"),this.m_radius=t.fetch_float(0,1)},t.prototype.draw_up_textures=function(t,e){var r;t.map_create(1);for(var i=new Array(t.m_images.length),s=0;s<i.length;++s){var a=Math.max(t.m_size[s].width,t.m_size[s].height)/16*this.m_radius;i[s]=Math.exp(-a*a)}for(a=Math.max(t.m_factor.m_src_width,t.m_factor.m_src_height)/16*this.m_radius,r=Math.exp(-a*a),s=1;s<t.m_images.length;++s)if(this.m_up_filter.m_factor=i[s],t.m_base_level==s){var o=[t.m_base_images[0],t.m_images[s-1][1]];1==s&&(o[1]=t.m_images[0][0]),this.m_up_filter.process(t.m_base_images[1],o,t.m_base_size,t.m_base_size,e),t.base_move_up(1,e)}else o=[t.m_images[s][0],t.m_images[s-1][1]],1==s&&(o[1]=t.m_images[0][0]),this.m_up_filter.process(t.m_images[s][1],o,t.m_size[s].width,t.m_size[s].height,e);return r},t.prototype.draw_temp_textures=function(t,e,r){t.load_from(this.m_down_resize_filter,e,r),t.draw_downward(this.m_down_filter,r)},t.prototype.cal_embed=function(t,e,r){var i,s,a,o;r<=0||e<=0||(e>r?(i=32,s=32*r/e,32*r%e&&++s,++s,a=32,o=32*r/e):(i=32*e/r,s=32,32*e%r&&++i,++i,a=32*e/r,o=32),t.m_src_width=e,t.m_src_height=r,t.m_dst_width=i,t.m_dst_height=s,t.m_x_start=0,t.m_y_start=0,t.m_emb_width=a,t.m_emb_height=o)},t.parcerName="blurSharpen",t}(),nr=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"        vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));                src *= vec4(0.25);        vec2 dlum;        dlum.x = src.w*255.0 + src.z*(255.0 / 256.0);        dlum.y = src.y*256.0 + src.x*(255.0 / 256.0);                vec2 fdlum = floor(dlum);        src.z = (dlum.x - fdlum.x)*(256.0 / 255.0);        src.w = fdlum.x / 255.0;                src.x = (dlum.y - fdlum.y)*(256.0 / 255.0);        src.y = fdlum.y / 255.0;                dst = src; "},e}(ue),_r=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragNewStructureSharpenDownsizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;        uniform vec2 sft;                vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);        }                void main()        {                    vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));                        vec2 dlum;                        dlum.x = (255.0*src.w + src.z * (255.0 / 256.0))*0.25;                        dlum.y = dlum.x * dlum.x * (1.0 / 256.0);                        vec2 fdlum = floor(dlum);                        src.xz = dlum - fdlum;            src.yw = fdlum;                        src *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);                        gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragNewStructureSharpenDownsizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e);var o={};o.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],o.sft=[1/r,1/i],a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragNewStructureSharpenFactorProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),mr=function(t){function e(e){var r=t.call(this)||this;return r.m_esp=0,r.m_context=e,r.m_shader=null,r.m_str_fshFragNewStructureSharpenFator="        precision highp float;        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform float esp;                void main()        {            vec4 dst = texture2D(inputImageTexture, textureCoordinate);                        vec2 lum;            lum.x = dst.y*255.0 + dst.x*(255.0 / 256.0);            lum.y = dst.w*255.0 + dst.z*(255.0 / 256.0);                        float var = lum.y * 256.0 - lum.x * lum.x;                        var = max(var, 0.0);                        float a = var /(var + esp * (65536.0 * 4.0));                        float b = (1.0 - a) * lum.x;                        vec2 dlum = vec2(a * 256.0, b);                        vec2 fdlum = floor(dlum);                                    dst.x = (dlum.x - fdlum.x)*(256.0 / 255.0);            dst.y = fdlum.x / 255.0;                        dst.z = (dlum.y - fdlum.y)*(256.0 / 255.0);            dst.w = fdlum.y / 255.0;                        gl_FragColor = dst;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragNewStructureSharpenFator,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e);var o={};o.esp=this.m_esp,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragNewStructureSharpenFactorProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),hr=function(t){function e(e){var r=t.call(this)||this;return r.m_factor=0,r.m_context=e,r.m_shader=null,r.m_str_fshFragNewStructureSharpenUpProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D subImageTextureR;        uniform sampler2D subImageTextureD;        uniform float fac;                void main()        {            vec4 dst = texture2D(inputImageTexture, textureCoordinate);                        vec2 slum;            slum.x = dst.y*255.0 + dst.x*(255.0 / 256.0);            slum.y = dst.w*255.0 + dst.z*(255.0 / 256.0);                        vec4 sub_r = texture2D(subImageTextureR, textureCoordinate);                        vec2 rlum;            rlum.x = sub_r.y*255.0 + sub_r.x*(255.0 / 256.0);            rlum.y = sub_r.w*255.0 + sub_r.z*(255.0 / 256.0);                        vec4 sub_d = texture2D(subImageTextureD, textureCoordinate);                        vec2 dlum;            dlum.x = sub_d.y*255.0 + sub_d.x*(255.0 / 256.0);            dlum.y = sub_d.w*255.0 + sub_d.z*(255.0 / 256.0);                        dlum = (slum - rlum)*fac + dlum;                        vec2 fdlum = floor(dlum);                        dst.x = (dlum.x - fdlum.x)*(256.0 / 255.0);            dst.y = fdlum.x / 255.0;                        dst.z = (dlum.y - fdlum.y)*(256.0 / 255.0);            dst.w = fdlum.y / 255.0;                        gl_FragColor = dst;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragNewStructureSharpenUpProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTextureR",e[1]),a.shader_texture("subImageTextureD",e[2]);var o={};o.fac=this.m_factor,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("FragNewStructureSharpenUpProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),cr=function(t){function e(e){var r=t.call(this)||this;return r.m_contrast_dark=0,r.m_contrast_light=0,r.m_details=0,r.m_dark=0,r.m_light=0,r.m_context=e,r.m_shader=null,r.m_m=new Array,r.m_str_fshFragNewStructureSharpenUpsizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D subImageTexture;        uniform vec4 m;        uniform vec4 contrast;        uniform float details;        uniform vec2 darklight;        uniform vec2 darklight_inv;                void main()        {                        vec4 src = texture2D(inputImageTexture, textureCoordinate);                        float slum = 255.0*src.w + src.z * (255.0 / 256.0);                        vec4 sub = texture2D(subImageTexture, textureCoordinate * m.xy + m.zw);                        float a = (255.0 / 256.0)*sub.y + sub.x * (255.0 / 65536.0);            float b = 255.0*sub.w + sub.z * (255.0 / 256.0);                                    float sl1 = slum * (1.0 / 256.0);                        vec2 dh;            dh.x = darklight.x - sl1;            dh.y = sl1 - darklight.y;            dh *= darklight_inv;            dh = max(dh, 0.0);            dh *= dh;            dh = max(1.0 - dh, 0.0);                                    float lo = a *  slum + b;                        float hi = slum - lo;                        lo = (((contrast.x * lo + contrast.y) * lo + contrast.z) * lo+contrast.w)*lo;                        float lt = slum - lo - hi * details;                        lt *= mix(dh.x, dh.y, step(0.0, lt));                        slum -= lt;                        slum = clamp(slum, 0.0, 255.996);                        float fslum = floor(slum);                        src.z = (slum - fslum) * (256.0 / 255.0);            src.w = fslum * (1.0 / 255.0);                        gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragNewStructureSharpenUpsizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTexture",e[1]);var o=this.get_fac(),n={};n.m=this.m_m,n.contrast=o,n.details=this.m_details,n.darklight=[this.m_dark,this.m_light],n.darklight_inv=[1/this.m_dark,1/this.m_light],a.m_shader.uniforms(n),a.draw_to(t);var _=this.m_context.context().getError();if(_)throw new Error("NewFragStructureSharpenUpsizeProc: "+_)},e.prototype.init=function(t,e,r,i,s){this.m_contrast_dark=t,this.m_contrast_light=e,this.m_details=r,this.m_dark=i,this.m_light=s},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e.prototype.get_fac=function(){var t=(this.m_contrast_dark>0?-2.9167*Math.abs(this.m_contrast_dark):1.0667*Math.abs(this.m_contrast_dark))+(this.m_contrast_light>0?2.9167*Math.abs(this.m_contrast_light):-1.0667*Math.abs(this.m_contrast_light));t/=16777216;var e=(this.m_contrast_dark>0?7.4167*Math.abs(this.m_contrast_dark):-3.2*Math.abs(this.m_contrast_dark))+(this.m_contrast_light>0?-4.25*Math.abs(this.m_contrast_light):1.0667*Math.abs(this.m_contrast_light));e/=65536;var r=(this.m_contrast_dark>0?-6.2208*Math.abs(this.m_contrast_dark):3.1333*Math.abs(this.m_contrast_dark))+(this.m_contrast_light>0?1.4708*Math.abs(this.m_contrast_light):.0667*Math.abs(this.m_contrast_light));r/=256;var i=(this.m_contrast_dark>0?1.7208*Math.abs(this.m_contrast_dark):-1*Math.abs(this.m_contrast_dark))+(this.m_contrast_light>0?Math.abs(this.m_contrast_light)*(.8625-1):Math.abs(this.m_contrast_light)*(.9333-1));return[t,e,r,i+=1]},e}(Jt),lr=function(){function t(t){this.m_pyramid_gpu=null,this.m_width=0,this.m_height=0,this.m_radius=0,this.m_esp=0,this.m_last_src="",this.m_flushed=!1,this.m_precessing="",this.m_contrast_dark=0,this.m_contrast_light=0,this.m_detals=0,this.m_dark=0,this.m_light=0,this.m_context=t,this.m_factor=new le,this.m_downsize_filter=new _r(this.m_context),this.m_down_filter=new nr(this.m_context),this.m_up_filter=new hr(this.m_context),this.m_upsize_filter=new cr(this.m_context),this.m_fator_filter=new mr(this.m_context)}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.size_change(r.m_width,r.m_height),this.m_pyramid_gpu||(this.m_pyramid_gpu=new Ce(this.m_context,this.m_factor,4099,!0,!1,2),this.m_last_src=0),this.inter_process(t,this.m_pyramid_gpu,e.new_temporary(),e.current(),r.m_width,r.m_height,r.m_frameBuffer);var i=this.m_context.context().getError();if(i)throw new Error("NewStructureSharpen: "+i);e.push_to_current()}catch(t){throw"NewStructureSharpen process: "+t}},t.prototype.destroy=function(){this.clear(),this.m_downsize_filter&&this.m_downsize_filter.destroy(),this.m_down_filter&&this.m_down_filter.destroy(),this.m_up_filter&&this.m_up_filter.destroy(),this.m_upsize_filter&&this.m_upsize_filter.destroy(),this.m_fator_filter&&this.m_fator_filter.destroy()},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.m_last_src="",this.cal_embed(this.m_factor,this.m_width,this.m_height),this.clear())},t.prototype.clear=function(){this.m_pyramid_gpu&&(this.m_pyramid_gpu.destroy(),this.m_pyramid_gpu=null)},t.prototype.inter_process=function(t,e,r,i,s,a,o){if(this.init(t),this.m_flushed){this.m_last_src="",e.load_from(this.m_downsize_filter,i,o),this.draw_textures(e,o),this.m_fator_filter.m_esp=this.m_esp,this.m_fator_filter.process(e.m_images[e.m_images.length-1][0],e.m_images[e.m_images.length-1][1],e.m_size[e.m_size.length-1].width,e.m_size[e.m_size.length-1].height,o),this.draw_textures(e,o);var n;n=this.m_last_src,this.m_last_src=this.m_precessing,this.m_precessing=n}this.m_factor.get_rev_trans(this.m_upsize_filter.m_m),this.m_upsize_filter.init(this.m_contrast_dark,this.m_contrast_light,this.m_detals,this.m_dark,this.m_light);var _=[];_[0]=i,_[1]=e.m_images[e.m_images.length-1][1],this.m_upsize_filter.process(r,_,s,a,o)},t.prototype.init=function(t){t.assume_symbol("radius"),this.m_radius=t.fetch_float(1e-4,16),t.assume_symbol("esp"),this.m_esp=.01*t.fetch_float(.001,100),t.get_log()!=this.m_last_src?(this.m_flushed=!0,this.m_precessing=t.get_log()):this.m_flushed=!1,t.test_symbol("contrastDarkLight")?(this.m_contrast_dark=t.fetch_float(-1,1),this.m_contrast_light=t.fetch_float(-1,1)):(this.m_contrast_dark=0,this.m_contrast_light=0),t.assume_symbol("details"),this.m_detals=t.fetch_float(0,5),t.test_symbol("preserveDarkLight")?(this.m_dark=t.fetch_float(0,.5),this.m_light=t.fetch_float(.5,1)):(this.m_dark=0,this.m_light=1)},t.prototype.draw_textures=function(t,e){t.draw_downward(this.m_down_filter,e),t.map_create(1);for(var r=new Array(t.m_images.length),i=0;i<r.length;++i){var s=Math.max(t.m_size[i].width,t.m_size[i].height)/16*this.m_radius;r[i]=Math.exp(-s*s)}for(i=1;i<t.m_images.length;++i)if(this.m_up_filter.m_factor=r[i],t.m_base_level==i){var a=[t.m_base_images[0],t.m_images[i-1][0],t.m_images[i-1][1]];this.m_up_filter.process(t.m_base_images[1],a,t.m_base_size,t.m_base_size,e),t.base_move_up(1,e)}else a=[t.m_images[i][0],t.m_images[i-1][0],t.m_images[i-1][1]],1==i&&this.m_context.copy_texture(t.m_images[i-1][1],t.m_images[i-1][0],t.m_size[i-1].width,t.m_size[i-1].height,e),this.m_up_filter.process(t.m_images[i][1],a,t.m_size[i].width,t.m_size[i].height,e)},t.prototype.cal_embed=function(t,e,r){if(!(r<=0||e<=0)){var i=0,s=0,a=0,o=0;e>r?(i=32,s=32*r/e,32*r%e&&++s,++s,a=32,o=32*r/e):0!=r&&(i=32*e/r,s=32,32*e%r&&++i,++i,a=32*e/r,o=32),t.m_src_width=e,t.m_src_height=r,t.m_dst_width=Math.floor(i),t.m_dst_height=Math.floor(s),t.m_x_start=0,t.m_y_start=0,t.m_emb_width=Math.floor(a),t.m_emb_height=Math.floor(o)}},t.parcerName="newStructureSharpen",t}(),ur=function(){function t(t){this.m_shader=null,this.m_texturelocker1=null,this.m_width=0,this.m_height=0,this.m_mvp=new Array,this.m_angle=null,this.m_s_vecPoints=new Array,this.m_vecPoints=new Float32Array(0),this.m_vecDirection=new Float32Array(0),this.m_vecSize=new Float32Array(0),this.m_vecOpacity=new Float32Array(0),this.m_vecTexNum=new Float32Array(0),this.m_num=0,this.m_opacity=0,this.m_model=0,this.m_pointStride=0,this.m_texSize=0,this.m_outsideRadius=0,this.m_innerRadius=0,this.m_numRatio=0,this.m_texture="",this.m_context=t,this.m_str_vshPointPositionAndSize="        attribute vec4 vPosition;        attribute float pointSize;        attribute float attrOpacity;        attribute float attrTexNum;        attribute vec2 attrDirection;        varying float opacity;        varying float texNum;        varying vec2 direction;        uniform mat4 uMat;                void main()        {            gl_PointSize = pointSize;            gl_Position = (uMat * vPosition);            opacity = attrOpacity;            texNum = attrTexNum;            direction = attrDirection;        }",this.m_str_fshChooseTexAndDraw="        varying float opacity;        varying float texNum;        varying vec2 direction;        uniform sampler2D star1;        uniform float reOpacity;                void main()        {            vec4 dst;            float vn = floor(texNum / 4.0);            float hn = floor(texNum - vn*4.0);                        vec2 coord = (gl_PointCoord - vec2(0.5));            coord = vec2(coord.x*direction.x - coord.y*direction.y,            coord.x*direction.y + coord.y*direction.x);            coord = coord + vec2(0.5, 0.5);                        coord = coord / 4.0;            coord.x = coord.x + vn*0.25;            coord.y = coord.y + hn*0.25;                        dst = texture2D(star1,coord);                        dst.a = dst.a*opacity;            if(reOpacity>1.0)                dst.xyz = dst.xyz*vec3(dst.a);                        gl_FragColor =dst;        }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{var i=this.createCGEGeneralLocker(e);r.m_width==this.m_width&&r.m_height==this.m_height||(this.m_mvp=this.makeOrtho(0,r.m_width,0,r.m_height,-1,1),this.m_width=r.m_width,this.m_height=r.m_height),this.init(t,r.m_width,r.m_height);var s=[];s[0]=r.m_width,s[1]=r.m_height;var a,o,n,_,m,h=this.m_context.context();if(this.genInterpolationPointsAndDirections(this.m_s_vecPoints,s,this.m_pointStride),h.enable(h.BLEND),this.m_model?h.blendFuncSeparate(h.ONE_MINUS_DST_ALPHA,h.ONE,h.ONE_MINUS_DST_ALPHA,h.ONE):h.blendFuncSeparate(h.SRC_ALPHA,h.ONE,h.ONE,h.ONE),this.m_shader||(this.m_shader=new y(this.m_str_vshPointPositionAndSize,this.m_str_fshChooseTexAndDraw,this.m_context.context())),this.m_context.context().bindFramebuffer(h.FRAMEBUFFER,r.m_frameBuffer),this.m_context.context().framebufferTexture2D(h.FRAMEBUFFER,h.COLOR_ATTACHMENT0,h.TEXTURE_2D,e.current(),0),this.m_context.context().useProgram(this.m_shader.m_program),a=h.getAttribLocation(this.m_shader.m_program,"vPosition"),h.enableVertexAttribArray(a),this.m_positionBuffer||(this.m_positionBuffer=h.createBuffer(h.ARRAY_BUFFER)),h.bindBuffer(h.ARRAY_BUFFER,this.m_positionBuffer),h.vertexAttribPointer(a,2,h.FLOAT,!1,0,0),o=h.getAttribLocation(this.m_shader.m_program,"pointSize"),h.enableVertexAttribArray(o),this.m_pointSizeBuffer||(this.m_pointSizeBuffer=h.createBuffer(h.ARRAY_BUFFER)),h.bindBuffer(h.ARRAY_BUFFER,this.m_pointSizeBuffer),h.vertexAttribPointer(o,1,h.FLOAT,!1,0,0),n=h.getAttribLocation(this.m_shader.m_program,"attrOpacity"),h.enableVertexAttribArray(n),this.m_opacityBuffer||(this.m_opacityBuffer=h.createBuffer(h.ARRAY_BUFFER)),h.bindBuffer(h.ARRAY_BUFFER,this.m_opacityBuffer),h.vertexAttribPointer(n,1,h.FLOAT,!1,0,0),_=h.getAttribLocation(this.m_shader.m_program,"attrTexNum"),h.enableVertexAttribArray(_),this.m_texNumBuffer||(this.m_texNumBuffer=h.createBuffer(h.ARRAY_BUFFER)),h.bindBuffer(h.ARRAY_BUFFER,this.m_texNumBuffer),h.vertexAttribPointer(_,1,h.FLOAT,!1,0,0),m=h.getAttribLocation(this.m_shader.m_program,"attrDirection"),h.enableVertexAttribArray(m),this.m_directionBuffer||(this.m_directionBuffer=h.createBuffer(h.ARRAY_BUFFER)),h.bindBuffer(h.ARRAY_BUFFER,this.m_directionBuffer),h.vertexAttribPointer(m,2,h.FLOAT,!1,0,0),h.bindBuffer(h.ARRAY_BUFFER,this.m_positionBuffer),h.bufferData(h.ARRAY_BUFFER,this.m_vecPoints,h.STATIC_DRAW),h.bindBuffer(h.ARRAY_BUFFER,this.m_pointSizeBuffer),h.bufferData(h.ARRAY_BUFFER,this.m_vecSize,h.STATIC_DRAW),h.bindBuffer(h.ARRAY_BUFFER,this.m_opacityBuffer),h.bufferData(h.ARRAY_BUFFER,this.m_vecOpacity,h.STATIC_DRAW),h.bindBuffer(h.ARRAY_BUFFER,this.m_texNumBuffer),h.bufferData(h.ARRAY_BUFFER,this.m_vecTexNum,h.STATIC_DRAW),h.bindBuffer(h.ARRAY_BUFFER,this.m_directionBuffer),h.bufferData(h.ARRAY_BUFFER,this.m_vecDirection,h.STATIC_DRAW),this.m_texturelocker1=this.m_context.get_resource_texture(this.m_texture),!this.m_texturelocker1)throw new Error("magicPainter tex"+this.m_texture);var c={};c.star1=this.m_texturelocker1.texture,this.m_shader.textures(c);var l={};l.uMat=this.m_mvp,this.m_model?l.reOpacity=2:l.reOpacity=0,this.m_shader.uniforms(l),this.m_context.context().viewport(0,0,r.m_width,r.m_height),this.m_context.context().drawArrays(this.m_context.context().POINTS,0,this.m_num),this.m_context.context().disable(this.m_context.context().BLEND);var u=h.getError();if(u)throw new Error("MagicPainter: "+u)}catch(u){throw new Error("MagicPainter process "+u)}finally{i.destroy(),this.m_context.release_resource_texture(this.m_texturelocker1)}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},t.prototype.drawPointInInnerCircle=function(t,e){var r=this.m_outsideRadius,i=(Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-3)*r*.5,s=2*Math.PI*Math.random();this.m_vecPoints[2*e]=t.x+i*Math.cos(s),this.m_vecPoints[2*e+1]=t.y+i*Math.sin(s)},t.prototype.drawPointInOutsideCircle=function(t,e){var r=this.m_innerRadius*Math.random(),i=2*Math.PI*Math.random();this.m_vecPoints[2*e]=t.x+r*Math.cos(i),this.m_vecPoints[2*e+1]=t.y+r*Math.sin(i)},t.prototype.getPointAttribute=function(t,e){var r;if(Math.random()<=this.m_numRatio){this.drawPointInInnerCircle(t,e);var i=(Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-3)*this.m_opacity*.08333333+this.m_opacity;i=Math.min(Math.max(0,i),1),this.m_vecOpacity[e]=i}else this.drawPointInOutsideCircle(t,e),i=(Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-3)*this.m_opacity*.08333333+this.m_opacity,i=Math.min(Math.max(0,i),1),this.m_vecOpacity[e]=i;r=null==this.m_angle?2*Math.PI*Math.random():this.m_angle+(Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-3)*Math.PI*.1666666+Math.PI,this.m_vecDirection[2*e]=Math.cos(r),this.m_vecDirection[2*e+1]=Math.sin(r),this.m_vecSize[e]=this.m_texSize+this.m_texSize*(Math.random()-.5)*.6,this.m_vecTexNum[e]=16*Math.random()},t.prototype.genInterpolationPointsAndDirections=function(t,e,r){var i=t.length;if(i<1||r<1)throw"Invalid Parameters";if(1==i)return this.m_vecPoints=new Float32Array(2),this.m_vecDirection=new Float32Array(2),this.m_vecSize=new Float32Array(1),this.m_vecOpacity=new Float32Array(1),this.m_vecTexNum=new Float32Array(1),this.m_num=1,void this.getPointAttribute(t[0],0);for(var s=[],a=1;a<i;++a)for(var o={x:(t[a].x-t[a-1].x)*e[0],y:(t[a].y-t[a-1].y)*e[1]},n=Math.floor(Math.max(Math.ceil(Math.sqrt(o.x*o.x+o.y*o.y))/r,1)),_={x:o.x/n,y:o.y/n},m={x:t[a-1].x*e[0],y:t[a-1].y*e[1]},h=0;h<n;++h)s.push({x:m.x+_.x*h,y:m.y+_.y*h});this.m_num=s.length,this.m_vecPoints=new Float32Array(2*this.m_num),this.m_vecDirection=new Float32Array(2*this.m_num),this.m_vecSize=new Float32Array(this.m_num),this.m_vecOpacity=new Float32Array(this.m_num),this.m_vecTexNum=new Float32Array(this.m_num);for(var c=0;c<this.m_num;++c)this.getPointAttribute(s[c],c)},t.prototype.init=function(t,e,r){this.m_angle=null,this.m_s_vecPoints=[],this.m_vecPoints=new Float32Array(0),this.m_vecDirection=new Float32Array(0),this.m_vecSize=new Float32Array(0),this.m_vecOpacity=new Float32Array(0),this.m_vecTexNum=new Float32Array(0),this.m_num=0,this.m_opacity=.1,this.m_model=0;this.m_model=t.lookup_symbol(["add","opacity","texture",0],!0);t.assume_symbol("opacity"),this.m_opacity=t.fetch_float(0,1),t.assume_symbol("pointStride"),t.test_symbol("relToWidth")?this.m_pointStride=t.fetch_float()*e:this.m_pointStride=t.fetch_float();if(t.assume_symbol("texSize"),this.m_texSize=t.fetch_float(),t.assume_symbol("outsideRadius"),this.m_outsideRadius=t.fetch_float(),t.assume_symbol("innerRadius"),this.m_innerRadius=t.fetch_float(),t.assume_symbol("numRatio"),this.m_numRatio=t.fetch_float(),t.assume_symbol("file"),this.m_texture=t.fetch_string(),t.test_symbol("angle")&&(this.m_angle=t.fetch_float()),t.lookup_symbol(["coordinate","realPixel",0],!0))for(;t.test_symbol("point");){var i=t.fetch_float()/e,s=t.fetch_float()/r;this.m_s_vecPoints.push({x:i,y:s})}else for(;t.test_symbol("point");)i=t.fetch_float(),s=t.fetch_float(),this.m_s_vecPoints.push({x:i,y:s})},t.prototype.makeOrtho=function(t,e,r,i,s,a){var o=e-t,n=i-r,_=a-s;return[2/o,0,0,0,0,2/n,0,0,0,0,-2/_,0,-(e+t)/o,-(i+r)/n,-(a+s)/_,1]},t.prototype.createCGEGeneralLocker=function(t){var e={};return e.m_taget=t,e.destroy=function(){this.m_taget&&this.m_taget.unlock()},e.lock=function(t){return t==this.m_taget||!!t.lock()&&(this.m_taget=t,!0)},e},t.parcerName="magicPainter",t}(),fr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingDownsizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;        uniform vec2 sft;            vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);        }            void main()        {                vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));                src = src*vec4(0.25);                gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingDownsizeProc,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e[0]);var n={};n.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],n.sft=[1/r,1/i],o.m_shader.uniforms(n),o.draw_to(t);var _=a.getError();if(_)throw new Error("FragImageMattingDownSizeProc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),pr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingForeIterationProc="        varying vec2 textureCoordinate;        uniform sampler2D textureAfterFilter;            void main()        {                vec4 dst = texture2D(textureAfterFilter, textureCoordinate);                        dst.x = clamp(dst.x*1.4 - 0.2,0.0,1.0);                gl_FragColor = dst;            }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingForeIterationProc,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("textureAfterFilter",e[0]),o.draw_to(t);var n=a.getError();if(n)throw new Error("FragImageMattingForeIterationProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),dr=function(t){function e(e){var r=t.call(this)||this;return r.m_rectangle=new Array,r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingDrawProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;            void main()        {            gl_FragColor = texture2D(inputImageTexture, textureCoordinate);        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingDrawProc,a));var o=Math.floor(r/10+.5),n=Math.floor(i/10+.5),_=this.m_context.create_new_texture(o,n,!0),m=new w(a,null,this.m_shader,o,n,s);m.shader_texture("inputImageTexture",e),m.draw_to(_),a.bindFramebuffer(a.FRAMEBUFFER,s),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,_,0);var h=new Uint8Array(o*n*4);a.readPixels(0,0,o,n,a.RGBA,a.UNSIGNED_BYTE,h);for(var c=[65536,65536],l=0,u=0,f=0;f<n;++f)for(var p=0;p<o;++p)h[4*(f*o+p)]>10&&(l<p&&(l=p),u<f&&(u=f),c[0]>p&&(c[0]=p),c[1]>f&&(c[1]=f));l=Math.min(10*(l+2),r),u=Math.min(10*(u+2),i),c[0]=Math.max(10*(c[0]-1),0),c[1]=Math.max(10*(c[1]-1),0),l-=c[0],u-=c[1],this.m_rectangle=[c[0],c[1],l,u],a.deleteTexture(_);var d=a.getError();if(d)throw new Error("FragImageMattingGetRectangleProc: "+d)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),gr=function(t){function e(e){var r=t.call(this)||this;return r.m_fac=0,r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingGuideMapProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D axayImageTexture;        uniform sampler2D azbImageTexture;        uniform float fac;            uniform vec2 sft;        uniform vec4 m;            vec2 get_axay_sample(vec2 cd)        {            vec4 axay = texture2D(axayImageTexture, textureCoordinate*m.xy+m.zw + sft * cd)*            vec4((255.0 / 256.0), 255.0, (255.0 / 256.0), 255.0);            return vec2((axay.x + axay.y)/2.0 - 64.0, (axay.z + axay.w)/2.0 - 64.0);        }                vec2 get_azb_sample(vec2 cd)        {            vec4 azb = texture2D(azbImageTexture, textureCoordinate*m.xy+m.zw + sft * cd)*            vec4((255.0 / 256.0), 255.0, (255.0 / 256.0), 255.0);            return vec2((azb.x + azb.y)/2.0 - 64.0, (azb.z + azb.w)/2.0 - 64.0);        }            void main()        {            float axSum=0.0, aySum=0.0, azSum=0.0, bSum=0.0;            for (float i = -1.0; i <= 1.0;++i)            for (float n = -1.0; n <= 1.0; ++n)            {                vec2 axay = get_axay_sample(vec2(i, n));                vec2 azb = get_azb_sample(vec2(i, n));                axSum += axay.x;                aySum += axay.y;                azSum += azb.x;                bSum += azb.y;            }            float ax = axSum / 9.0;            float ay = aySum / 9.0;            float az = azSum / 9.0;            float b = bSum / 9.0;            vec4 src = texture2D(inputImageTexture, textureCoordinate);                vec4 dst;            dst.x = (ax*src.x + ay*src.y + az*src.z + b);                    gl_FragColor = dst;            if(fac<0.5)return;            dst.x = float(dst.x>0.5);            gl_FragColor = dst;                }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingGuideMapProc,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e[0]),o.shader_texture("axayImageTexture",e[1]),o.shader_texture("azbImageTexture",e[2]);var n={};n.fac=this.m_fac,n.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],n.sft=[1/r,1/i],o.m_shader.uniforms(n),o.draw_to(t);var _=a.getError();if(_)throw new Error("FragImageMattingGuideMapProc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),vr=function(t){function e(e){var r=t.call(this)||this;return r.m_filter_flag=0,r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingIterationProc="\tvarying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D textureAfterFilter;                uniform vec4 m;        uniform vec2 sft;        uniform float filter_flag;            vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);        }        vec4 get_dst_sample(vec2 cd)        {            return texture2D(textureAfterFilter, textureCoordinate * m.xy + m.zw + sft * cd);        }                void main()        {                vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));            src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));            src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));            src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));                src = src*vec4(0.25);            src.r = float(src.r > 0.0);            src.g = float(src.g > 0.0);                vec4 dst = get_dst_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));            dst += get_dst_sample(vec2(1.0 / 4.0, -1.0 / 4.0));            dst += get_dst_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));            dst += get_dst_sample(vec2(1.0 / 4.0, 1.0 / 4.0));                dst = dst*vec4(0.25);                    if (filter_flag > 0.5){                dst.r = float(dst.r>0.5);            }                    src.r = src.r + max(min(dst.r*1.3-0.15, 1.0), 0.0) - src.g;            gl_FragColor = src;            }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingIterationProc,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",this.m_res),o.shader_texture("textureAfterFilter",e[0]);var n={};n.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],n.sft=[1/r,1/i],n.filter_flag=this.m_filter_flag,o.m_shader.uniforms(n),o.draw_to(t);var _=a.getError();if(_)throw new Error("FragImageMattingIterationProc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),xr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingUpsizeProc="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec2 samplerSize;        float large(float a){            return float(a>0.5);        }            void main()        {                vec4 src = texture2D(inputImageTexture, textureCoordinate);                float res00 = texture2D(inputImageTexture, (textureCoordinate + vec2(-1.0, -1.0)*samplerSize)).x;                float res01 = texture2D(inputImageTexture, (textureCoordinate + vec2(-1.0, 0.0)*samplerSize)).x;                float res02 = texture2D(inputImageTexture, (textureCoordinate + vec2(-1.0, 1.0)*samplerSize)).x;                float res10 = texture2D(inputImageTexture, (textureCoordinate + vec2(0.0, -1.0)*samplerSize)).x;                float res12 = texture2D(inputImageTexture, (textureCoordinate + vec2(0.0, 1.0)*samplerSize)).x;                float res20 = texture2D(inputImageTexture, (textureCoordinate + vec2(1.0, -1.0)*samplerSize)).x;                float res21 = texture2D(inputImageTexture, (textureCoordinate + vec2(1.0, 0.0)*samplerSize)).x;                float res22 = texture2D(inputImageTexture, (textureCoordinate + vec2(1.0, 1.0)*samplerSize)).x;               float ux = large(res20) * (1.0) + large(res10) * (2.0) + large(res00) * (1.0)                    + large(res02) * (-1.0) + large(res12) * (-2.0) + large(res22) *(-1.0);                float uy = large(res02) * (1.0) + large(res01) * (2.0) +large(res00) *(1.0)                    + large(res20) * (-1.0) + large(res21) *(-2.0) + large(res22) *(-1.0);                    float fac2 = clamp(pow(ux*ux + uy*uy, 0.5),0.0,1.0);                    gl_FragColor = vec4(vec3(fac2,fac2,fac2), 1.0);                }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingUpsizeProc,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e[0]);var n={};n.samplerSize=[1/r,1/i],o.m_shader.uniforms(n),o.draw_to(t);var _=a.getError();if(_)throw new Error("FragImageMattingLineProc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),yr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingPainterBlend="        varying vec2 textureCoordinate;        uniform sampler2D painted1_0Texture;        uniform sampler2D painted1_1Texture;        uniform sampler2D srcTexture;        float get_painted_sample()        {                float res;        vec4 p1_0Src = texture2D(painted1_0Texture, textureCoordinate)            *vec4((255.0 / (256.0 * 65536.0)), (255.0 / (65536.0)), (255.0 / 256.0), 255.0);        vec4 p1_1Src = texture2D(painted1_1Texture, textureCoordinate)            *vec4((255.0 / (256.0 * 65536.0)), (255.0 / (65536.0)), (255.0 / 256.0), 255.0);            float p1_0 = (p1_0Src.x + p1_0Src.y + p1_0Src.z + p1_0Src.w);        float p1_1 = (p1_1Src.x + p1_1Src.y + p1_1Src.z + p1_1Src.w);            if (p1_1 <= 0.0) return -1.0;            res =floor(p1_0 / p1_1*254.0 + 0.5);                    return res;                }            void main()        {            float res = get_painted_sample();            res = (res+1.0)/255.0;            vec4 dst = vec4(texture2D(srcTexture,textureCoordinate).xyz,res);                gl_FragColor = dst;        }            ",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingPainterBlend,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("painted1_0Texture",e[0]),o.shader_texture("painted1_1Texture",e[1]),o.shader_texture("srcTexture",e[2]),o.draw_to(t);var n=a.getError();if(n)throw new Error("FragImageMattingPainterBlendProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),wr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingPainting1_1DownsizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;        uniform vec2 sft;            vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);        }            void main()        {            vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));                src *= vec4(0.25);            float dlum = clamp(max(src.r,src.g)*65536.0*256.0, 0.0, (65536.0 * 65536.0 - 1.0) / (256.0));            float lum8 = dlum - floor(dlum);                dlum = clamp(max(src.r, src.g)*65536.0, 0.0, (65536.0*256.0 - 1.0) / (256.0));            float lum8_16 = dlum - floor(dlum);                dlum = clamp(max(src.r, src.g)*256.0, 0.0, (65536.0 - 1.0) / (256.0));            float dlum24_32 = floor(dlum);            float lum16_24 = dlum - dlum24_32;                src.x = lum8*(256.0 / 255.0);            src.y = lum8_16*(256.0 / 255.0);            src.z = lum16_24*(256.0 / 255.0);            src.w = dlum24_32 / 255.0;                gl_FragColor = src;                }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingPainting1_1DownsizeProc,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e[0]);var n={};n.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],n.sft=[1/r,1/i],o.m_shader.uniforms(n),o.draw_to(t);var _=a.getError();if(_)throw new Error("FragImageMattingPainting1_1DownSizeProc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),br=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingDownsize32Proc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec2 sft;            vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate + sft * cd);        }            void main()        {            vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));            src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));            src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));            src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));                src *= vec4((255.0 / (256.0*65536.0)), (255.0 / (256.0*256.0)), (255.0 / 256.0), 255.0) * 0.25;                float dlum = (src.x + src.y + src.z + src.w)*65536.0;                float lum8 = dlum - floor(dlum);                        dlum = dlum / 256.0;            float lum8_16 = dlum - floor(dlum);                    dlum = dlum / 256.0;                float lum24_32 = floor(dlum);            float lum16_24 = dlum - lum24_32;                src.x = lum8*(256.0 / 255.0);            src.y = lum8_16*(256.0 / 255.0);            src.z = lum16_24*(256.0 / 255.0);            src.w = lum24_32 / 255.0;                gl_FragColor = src;            }        ",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingDownsize32Proc,a));var o=new w(a,null,this.m_shader,r,i,s);a.bindTexture(a.TEXTURE_2D,e),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.NEAREST),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.NEAREST),o.shader_texture("inputImageTexture",e);var n={};n.sft=[1/r,1/i],o.m_shader.uniforms(n),o.draw_to(t),a.bindTexture(a.TEXTURE_2D,e),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR);var _=a.getError();if(_)throw new Error("FragImageMattingPaintingDown32Proc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),zr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragNewStructureSharpenFator="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;        uniform vec2 sft;            vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);        }            void main()        {                vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));                src *= vec4(0.25);                    float dlum = clamp(src.r*65536.0*256.0, 0.0, (65536.0 * 65536.0 - 1.0) / (256.0));            float lum8 = dlum - floor(dlum);                dlum = clamp(src.r*65536.0, 0.0, (65536.0*256.0 - 1.0) / (256.0));            float lum8_16 = dlum - floor(dlum);                dlum = clamp(src.r*256.0, 0.0, (65536.0 - 1.0) / (256.0));            float dlum24_32 = floor(dlum);            float dlum16_24 = dlum - dlum24_32;                src.x = lum8*(256.0 / 255.0);            src.y = lum8_16*(256.0 / 255.0);            src.z = dlum16_24*(256.0 / 255.0);            src.w = dlum24_32 / 255.0;                gl_FragColor = src;            }        ",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragNewStructureSharpenFator,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e[0]);var n={};n.m=this.m_m,n.sft=[1/r,1/i],o.m_shader.uniforms(n),o.draw_to(t);var _=a.getError();if(_)throw new Error("FragImageMattingPaintingDownSize1_0Proc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Tr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingPaintingDownsizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;        uniform vec2 sft;            vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);        }            void main()        {                vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));            src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));            src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));                src *= vec4(0.25);                vec2 dlum = vec2(src.r, max(src.r, src.g))*256.0;                dlum = clamp(dlum, 0.0, 255.996);                vec2 fdlum = floor(dlum);                    src.x = (dlum.x - fdlum.x)*(256.0 / 255.0);            src.y = fdlum.x / 255.0;                src.z = (dlum.y - fdlum.y)*(256.0 / 255.0);            src.w = fdlum.y / 255.0;                gl_FragColor = src;                }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingPaintingDownsizeProc,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e[0]);var n={};n.m=this.m_m,n.sft=[1/r,1/i],o.m_shader.uniforms(n),o.draw_to(t);var _=a.getError();if(_)throw new Error("FragImageMattingPaintingDownSizeProc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Er=function(t){function e(e){var r=t.call(this)||this;return r.m_shader=new Array,r.m_filter_num=0,r.m_esp=0,r.m_blend_flag=0,r.m_fac=0,r.m_context=e,r.m_str_fshFragImageMattingPyrFator2="        varying vec2 textureCoordinate;            uniform sampler2D srcTexture;        uniform sampler2D subTexture;            uniform vec2 sft;        uniform float esp;        uniform float bf;        uniform float fac;                vec4 get_sample(vec2 cd)        {            return texture2D(srcTexture, textureCoordinate + sft * cd);        }                    float get_painted_sample(vec2 cd,float p)        {                float res = texture2D(subTexture, textureCoordinate + sft * cd).x;        res =  clamp(res*(1.0 + fac) - 0.5*fac, 0.0, 1.0);        p = p*255.0 - 1.0;            if(p>-0.5)res = p/254.0;                    return res;                }            void main()        {            vec4 src1 = get_sample(vec2(-1.0, -1.0));                vec4 src2 = get_sample(vec2(0.0, -1.0));                vec4 src3 = get_sample(vec2(1.0, -1.0));                        vec4 src4 = get_sample(vec2(-1.0, 0.0));                vec4 src5 = get_sample(vec2(0.0, 0.0));                vec4 src6 = get_sample(vec2(1.0, 0.0));                        vec4 src7 = get_sample(vec2(-1.0, 1.0));                vec4 src8 = get_sample(vec2(0.0, 1.0));                vec4 src9 = get_sample(vec2(1.0, 1.0));            float res1 = get_painted_sample(vec2(-1.0, -1.0),src1.a);            float res = res1;                float res2 = get_painted_sample(vec2(0.0, -1.0),src2.a);            res += res2;                float res3 = get_painted_sample(vec2(1.0, -1.0),src3.a);            res += res3;                        float res4 = get_painted_sample(vec2(-1.0, 0.0),src4.a);            res += res4;                float res5 = get_painted_sample(vec2(0.0, 0.0),src5.a);            res += res5;                float res6 = get_painted_sample(vec2(1.0, 0.0),src6.a);            res += res6;                        float res7 = get_painted_sample(vec2(-1.0, 1.0),src7.a);            res += res7;                float res8 = get_painted_sample(vec2(0.0, 1.0),src8.a);            res += res8;                float res9 = get_painted_sample(vec2(1.0, 1.0),src9.a);            res += res9;                            res *=1.0 / 9.0;            float stp = res;                                        vec4 tsrc = src1 + src2 + src3 + src4 + src5 + src6 + src7 + src8 + src9;            tsrc *= vec4(1.0 / 9.0);            float tr = tsrc.r;            float tg = tsrc.g;            float tb = tsrc.b;                float trg = src1.r*src1.g + src2.r*src2.g + src3.r*src3.g + src4.r*src4.g + src5.r*src5.g + src6.r*src6.g + src7.r*src7.g + src8.r*src8.g + src9.r*src9.g;            trg *= (1.0 / 9.0);                float trb = src1.r*src1.b + src2.r*src2.b + src3.r*src3.b + src4.r*src4.b + src5.r*src5.b + src6.r*src6.b + src7.r*src7.b + src8.r*src8.b + src9.r*src9.b;            trb *= (1.0 / 9.0);                float tgb = src1.g*src1.b + src2.g*src2.b + src3.g*src3.b + src4.g*src4.b + src5.g*src5.b + src6.g*src6.b + src7.g*src7.b + src8.g*src8.b + src9.g*src9.b;            tgb *= (1.0 / 9.0);                vec4 tsrc2 = src1* src1 + src2* src2 + src3* src3 + src4* src4 + src5*src5 + src6*src6 + src7*src7 + src8*src8 + src9*src9;            tsrc2 *= vec4(1.0 / 9.0);            float tr2 = tsrc2.x;            float tg2 = tsrc2.y;            float tb2 = tsrc2.z;                vec4 tpsrc = src1*res1 + src2*res2 + src3*res3 + src4*res4+  src5*res5 + src6*res6 + src7*res7 + src8*res8 + src9*res9;            tpsrc *= vec4(1.0 / 9.0);            float tpr = tpsrc.x;            float tpg = tpsrc.y;            float tpb = tpsrc.z;                    float brg = (trg  - tr * tg);            float brb = (trb  - tr * tb);            float bgb = (tgb  - tg * tb);                float br2 = tr2 - tr * tr + esp;            float bg2 = tg2 - tg * tg + esp;            float bb2 = tb2 - tb * tb + esp;                float ur = (tpr - stp * tr);            float ug = (tpg - stp * tg);            float ub = (tpb - stp * tb);                float bs = br2*bgb*bgb + bg2*brb*brb + bb2*brg*brg - 2.0 * bgb*brb*brg - bb2*bg2*br2;                float ar = (bgb*bgb - bb2*bg2)*ur + (bb2*brg - bgb*brb)*ug + (bg2*brb - bgb*brg)*ub;            float ag = (bb2*brg - bgb*brb)*ur + (brb*brb - bb2*br2)*ug + (bgb*br2 - brb*brg)*ub;            float ab = (bg2*brb - bgb*brg)*ur + (bgb*br2 - brb*brg)*ug + (brg*brg - bg2*br2)*ub;                bs = 1.0 / bs;                ar *= bs;            ag *= bs;            ab *= bs;                vec2 arag = vec2((ar + 64.0)*2.0, (ag + 64.0)*2.0);                arag = clamp(arag, 0.0, 255.996);                vec2 farag = floor(arag);                vec4 dst;                dst.xz = arag - farag;                dst.yw = farag;                dst *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);                    if (dst.x > (513.0 / 512.0))                {                    dst.x = 0.0;                    dst.y += (1.0 / 255.0);                }                    if (dst.z > (513.0 / 512.0))            {                dst.z = 0.0;                dst.w += (1.0 / 255.0);                    }                gl_FragColor = dst;        }            ",r.m_str_fshFragImageMattingPyrFator3="        varying vec2 textureCoordinate;                uniform sampler2D srcTexture;        uniform sampler2D subTexture;            uniform vec2 sft;        uniform float esp;        uniform float bf;        uniform float fac;                vec4 get_sample(vec2 cd)        {            return texture2D(srcTexture, textureCoordinate + sft * cd);        }                    float get_painted_sample(vec2 cd,float p)        {                float res = texture2D(subTexture, textureCoordinate + sft * cd).x;        res =  clamp(res*(1.0 + fac) - 0.5*fac, 0.0, 1.0);        p = p*255.0 - 1.0;            if(p>-0.5)res = p/254.0;                    return res;                }            void main()        {            vec4 src1 = get_sample(vec2(-1.0, -1.0));                vec4 src2 = get_sample(vec2(0.0, -1.0));                vec4 src3 = get_sample(vec2(1.0, -1.0));                        vec4 src4 = get_sample(vec2(-1.0, 0.0));                vec4 src5 = get_sample(vec2(0.0, 0.0));                vec4 src6 = get_sample(vec2(1.0, 0.0));                        vec4 src7 = get_sample(vec2(-1.0, 1.0));                vec4 src8 = get_sample(vec2(0.0, 1.0));                vec4 src9 = get_sample(vec2(1.0, 1.0));            float res1 = get_painted_sample(vec2(-1.0, -1.0),src1.a);            float res = res1;                float res2 = get_painted_sample(vec2(0.0, -1.0),src2.a);            res += res2;                float res3 = get_painted_sample(vec2(1.0, -1.0),src3.a);            res += res3;                        float res4 = get_painted_sample(vec2(-1.0, 0.0),src4.a);            res += res4;                float res5 = get_painted_sample(vec2(0.0, 0.0),src5.a);            res += res5;                float res6 = get_painted_sample(vec2(1.0, 0.0),src6.a);            res += res6;                        float res7 = get_painted_sample(vec2(-1.0, 1.0),src7.a);            res += res7;                float res8 = get_painted_sample(vec2(0.0, 1.0),src8.a);            res += res8;                float res9 = get_painted_sample(vec2(1.0, 1.0),src9.a);            res += res9;                            res *=1.0 / 9.0;            float stp = res;                vec4 tsrc = src1 + src2 + src3 + src4 + src5 + src6 + src7 + src8 + src9;            tsrc *= vec4(1.0 / 9.0);            float tr = tsrc.r;            float tg = tsrc.g;            float tb = tsrc.b;                float trg = src1.r*src1.g + src2.r*src2.g + src3.r*src3.g + src4.r*src4.g + src5.r*src5.g + src6.r*src6.g + src7.r*src7.g + src8.r*src8.g + src9.r*src9.g;            trg *= 1.0 / 9.0;                float trb = src1.r*src1.b + src2.r*src2.b + src3.r*src3.b + src4.r*src4.b + src5.r*src5.b + src6.r*src6.b + src7.r*src7.b + src8.r*src8.b + src9.r*src9.b;            trb *= 1.0 / 9.0;                float tgb = src1.g*src1.b + src2.g*src2.b + src3.g*src3.b + src4.g*src4.b + src5.g*src5.b + src6.g*src6.b + src7.g*src7.b + src8.g*src8.b + src9.g*src9.b;            tgb *= 1.0 / 9.0;                vec4 tsrc2 = src1* src1 + src2* src2 + src3* src3 + src4* src4 + src5*src5 + src6*src6 + src7*src7 + src8*src8 + src9*src9;            tsrc2 *= vec4(1.0 / 9.0);            float tr2 = tsrc2.x;            float tg2 = tsrc2.y;            float tb2 = tsrc2.z;                vec4 tpsrc = src1*res1 + src2*res2 + src3*res3 + src4*res4 + src5*res5 + src6*res6 + src7*res7 + src8*res8 + src9*res9;            tpsrc *= vec4(1.0 / 9.0);            float tpr = tpsrc.x;            float tpg = tpsrc.y;            float tpb = tpsrc.z;                        float brg = (trg - tr * tg);            float brb = (trb - tr * tb);            float bgb = (tgb - tg * tb);                float br2 = tr2 - tr * tr + esp;            float bg2 = tg2 - tg * tg + esp;            float bb2 = tb2 - tb * tb + esp;                float ur = (tpr - stp * tr);            float ug = (tpg - stp * tg);            float ub = (tpb - stp * tb);                    float bs = br2*bgb*bgb + bg2*brb*brb + bb2*brg*brg - 2.0 * bgb*brb*brg - bb2*bg2*br2;                float ar = (bgb*bgb - bb2*bg2)*ur + (bb2*brg - bgb*brb)*ug + (bg2*brb - bgb*brg)*ub;            float ag = (bb2*brg - bgb*brb)*ur + (brb*brb - bb2*br2)*ug + (bgb*br2 - brb*brg)*ub;            float ab = (bg2*brb - bgb*brg)*ur + (bgb*br2 - brb*brg)*ug + (brg*brg - bg2*br2)*ub;            bs = 1.0 / bs;                ar *= bs;            ag *= bs;            ab *= bs;                float b = (stp - ar*tr - ag*tg - ab*tb);                vec2 arag = vec2((ab + 64.0)*2.0, (b + 64.0)*2.0);            arag = clamp(arag, 0.0, 255.996);            vec2 farag = floor(arag);                vec4 dst;                dst.xz = arag - farag;                dst.yw = farag;                dst *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);            if (dst.x > (513.0 / 512.0))                {                    dst.x = 0.0;                    dst.y += (1.0 / 255.0);                }                    if (dst.z > (513.0 / 512.0))                {                    dst.z = 0.0;                    dst.w += (1.0 / 255.0);                    }                gl_FragColor = dst;            }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=[this.m_str_fshFragImageMattingPyrFator2,this.m_str_fshFragImageMattingPyrFator3];this.m_shader[this.m_filter_num]||(this.m_shader[this.m_filter_num]=new y(null,a[this.m_filter_num],this.m_context.context()));var o=new w(this.m_context.context(),null,this.m_shader[this.m_filter_num],r,i,s);o.shader_texture("subTexture",e[0]),o.shader_texture("srcTexture",e[1]);var n={};n.bf=this.m_blend_flag,n.esp=this.m_esp,n.sft=[1/r,1/i],n.fac=this.m_fac,o.m_shader.uniforms(n),o.draw_to(t);var _=this.m_context.context().getError();if(_)throw new Error("FragImageMattingPyrFactorProc: "+_)},e.prototype.destroy=function(){this.m_shader[0]&&(this.m_shader[0].destroy(),this.m_shader[0]=null),this.m_shader[1]&&(this.m_shader[1].destroy(),this.m_shader[1]=null)},e}(Jt),Cr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingTempUpProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;                void main()        {            vec4 dst = texture2D(inputImageTexture, textureCoordinate);            dst.x = dst.x*2.0 - 0.5;                    gl_FragColor = dst;        }        ",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingTempUpProc,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e[0]),o.draw_to(t);var n=a.getError();if(n)throw new Error("FragImageMattingTempUpProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Sr=function(t){function e(e){var r=t.call(this)||this;return r.m_shader=new Array,r.m_filter_num=0,r.m_esp=0,r.m_context=e,r.m_str_fshFragImageMattingTopFator2="        varying vec2 textureCoordinate;        uniform sampler2D painted1_0Texture;        uniform sampler2D painted1_1Texture;            uniform sampler2D srcTexture;            uniform vec2 sft;        uniform float esp;                vec4 get_sample(vec2 cd)        {            return texture2D(srcTexture, textureCoordinate + sft * cd);        }                    float get_painted_sample(vec2 cd)        {            vec4 p1_0Src = texture2D(painted1_0Texture, textureCoordinate + sft * cd)*vec4((255.0 / (256.0*65536.0)), (255.0 / 65536.0), (255.0 / 256.0), 255.0);                vec4 p1_1Src = texture2D(painted1_1Texture, textureCoordinate + sft * cd)*vec4((255.0 / (256.0*65536.0)), (255.0 / 65536.0), (255.0 / 256.0), 255.0);                        float p1_0 = (p1_0Src.x + p1_0Src.y + p1_0Src.z + p1_0Src.w);            float p1_1 = (p1_1Src.x + p1_1Src.y + p1_1Src.z + p1_1Src.w);                if (p1_1 <= 0.0) return 0.5;                return p1_0 / p1_1;                }            void main()        {            float res1 = get_painted_sample(vec2(-1.0, -1.0));            float res = res1;                float res2 = get_painted_sample(vec2(0.0, -1.0));            res += res2;                float res3 = get_painted_sample(vec2(1.0, -1.0));            res += res3;                        float res4 = get_painted_sample(vec2(-1.0, 0.0));            res += res4;                float res5 = get_painted_sample(vec2(0.0, 0.0));            res += res5;                float res6 = get_painted_sample(vec2(1.0, 0.0));            res += res6;                        float res7 = get_painted_sample(vec2(-1.0, 1.0));            res += res7;                float res8 = get_painted_sample(vec2(0.0, 1.0));            res += res8;                float res9 = get_painted_sample(vec2(1.0, 1.0));            res += res9;                            res *=1.0 / 9.0;            float stp = res;                            vec4 src1 = get_sample(vec2(-1.0, -1.0));                vec4 src2 = get_sample(vec2(0.0, -1.0));                vec4 src3 = get_sample(vec2(1.0, -1.0));                        vec4 src4 = get_sample(vec2(-1.0, 0.0));                vec4 src5 = get_sample(vec2(0.0, 0.0));                vec4 src6 = get_sample(vec2(1.0, 0.0));                        vec4 src7 = get_sample(vec2(-1.0, 1.0));                vec4 src8 = get_sample(vec2(0.0, 1.0));                vec4 src9 = get_sample(vec2(1.0, 1.0));                        vec4 tsrc = src1 + src2 + src3 + src4 + src5 + src6 + src7 + src8 + src9;            tsrc *= vec4(1.0 / 9.0);            float tr = tsrc.r;            float tg = tsrc.g;            float tb = tsrc.b;                float trg = src1.r*src1.g + src2.r*src2.g + src3.r*src3.g + src4.r*src4.g + src5.r*src5.g + src6.r*src6.g + src7.r*src7.g + src8.r*src8.g + src9.r*src9.g;            trg *= (1.0 / 9.0);                float trb = src1.r*src1.b + src2.r*src2.b + src3.r*src3.b + src4.r*src4.b + src5.r*src5.b + src6.r*src6.b + src7.r*src7.b + src8.r*src8.b + src9.r*src9.b;            trb *= (1.0 / 9.0);                float tgb = src1.g*src1.b + src2.g*src2.b + src3.g*src3.b + src4.g*src4.b + src5.g*src5.b + src6.g*src6.b + src7.g*src7.b + src8.g*src8.b + src9.g*src9.b;            tgb *= (1.0 / 9.0);                vec4 tsrc2 = src1* src1 + src2* src2 + src3* src3 + src4* src4 + src5*src5 + src6*src6 + src7*src7 + src8*src8 + src9*src9;            tsrc2 *= vec4(1.0 / 9.0);            float tr2 = tsrc2.x;            float tg2 = tsrc2.y;            float tb2 = tsrc2.z;                vec4 tpsrc = src1*res1 + src2*res2 + src3*res3 + src4*res4+  src5*res5 + src6*res6 + src7*res7 + src8*res8 + src9*res9;            tpsrc *= vec4(1.0 / 9.0);            float tpr = tpsrc.x;            float tpg = tpsrc.y;            float tpb = tpsrc.z;                    float brg = (trg  - tr * tg);            float brb = (trb  - tr * tb);            float bgb = (tgb  - tg * tb);                float br2 = tr2 - tr * tr + esp;            float bg2 = tg2 - tg * tg + esp;            float bb2 = tb2 - tb * tb + esp;                float ur = (tpr - stp * tr);            float ug = (tpg - stp * tg);            float ub = (tpb - stp * tb);                float bs = br2*bgb*bgb + bg2*brb*brb + bb2*brg*brg - 2.0 * bgb*brb*brg - bb2*bg2*br2;                float ar = (bgb*bgb - bb2*bg2)*ur + (bb2*brg - bgb*brb)*ug + (bg2*brb - bgb*brg)*ub;            float ag = (bb2*brg - bgb*brb)*ur + (brb*brb - bb2*br2)*ug + (bgb*br2 - brb*brg)*ub;            float ab = (bg2*brb - bgb*brg)*ur + (bgb*br2 - brb*brg)*ug + (brg*brg - bg2*br2)*ub;                bs = 1.0 / bs;                ar *= bs;            ag *= bs;            ab *= bs;                vec2 arag = vec2((ar + 64.0)*2.0, (ag + 64.0)*2.0);                arag = clamp(arag, 0.0, 255.996);                vec2 farag = floor(arag);                vec4 dst;                dst.xz = arag - farag;                dst.yw = farag;                dst *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);            if (dst.x > (513.0 / 512.0))            {                dst.x = 0.0;                dst.y += (1.0 / 255.0);            }            if (dst.z > (513.0 / 512.0))            {                dst.z = 0.0;                dst.w += (1.0 / 255.0);            }                gl_FragColor = dst;        }            ",r.m_str_fshFragImageMattingTopFator3="        varying vec2 textureCoordinate;            uniform sampler2D painted1_0Texture;        uniform sampler2D painted1_1Texture;            uniform sampler2D srcTexture;            uniform vec2 sft;        uniform float esp;                vec4 get_sample(vec2 cd)        {            return texture2D(srcTexture, textureCoordinate + sft * cd);        }                    float get_painted_sample(vec2 cd)        {            vec4 p1_0Src = texture2D(painted1_0Texture, textureCoordinate + sft * cd)*vec4((255.0 / (256.0*65536.0)), (255.0 / 65536.0), (255.0 / 256.0), 255.0);            vec4 p1_1Src = texture2D(painted1_1Texture, textureCoordinate + sft * cd)*vec4((255.0 / (256.0*65536.0)), (255.0 / 65536.0), (255.0 / 256.0), 255.0);                    float p1_0 = (p1_0Src.x + p1_0Src.y + p1_0Src.z + p1_0Src.w);            float p1_1 = (p1_1Src.x + p1_1Src.y + p1_1Src.z + p1_1Src.w);                if (p1_1 <= 0.0) return 0.5;                if (p1_0 <= 0.0) return 0.0;                return p1_0 / p1_1;        }            void main()        {            float res1 = get_painted_sample(vec2(-1.0, -1.0));            float res = res1;                float res2 = get_painted_sample(vec2(0.0, -1.0));            res += res2;                float res3 = get_painted_sample(vec2(1.0, -1.0));            res += res3;                        float res4 = get_painted_sample(vec2(-1.0, 0.0));            res += res4;                float res5 = get_painted_sample(vec2(0.0, 0.0));            res += res5;                float res6 = get_painted_sample(vec2(1.0, 0.0));            res += res6;                        float res7 = get_painted_sample(vec2(-1.0, 1.0));            res += res7;                float res8 = get_painted_sample(vec2(0.0, 1.0));            res += res8;                float res9 = get_painted_sample(vec2(1.0, 1.0));            res += res9;                    res *= 1.0 / 9.0;            float stp = res;                        vec4 src1 = get_sample(vec2(-1.0, -1.0));                vec4 src2 = get_sample(vec2(0.0, -1.0));                vec4 src3 = get_sample(vec2(1.0, -1.0));                        vec4 src4 = get_sample(vec2(-1.0, 0.0));                vec4 src5 = get_sample(vec2(0.0, 0.0));                vec4 src6 = get_sample(vec2(1.0, 0.0));            vec4 src7 = get_sample(vec2(-1.0, 1.0));                vec4 src8 = get_sample(vec2(0.0, 1.0));                vec4 src9 = get_sample(vec2(1.0, 1.0));            vec4 tsrc = src1 + src2 + src3 + src4 + src5 + src6 + src7 + src8 + src9;            tsrc *= vec4(1.0 / 9.0);            float tr = tsrc.r;            float tg = tsrc.g;            float tb = tsrc.b;                float trg = src1.r*src1.g + src2.r*src2.g + src3.r*src3.g + src4.r*src4.g + src5.r*src5.g + src6.r*src6.g + src7.r*src7.g + src8.r*src8.g + src9.r*src9.g;            trg *= 1.0 / 9.0;                float trb = src1.r*src1.b + src2.r*src2.b + src3.r*src3.b + src4.r*src4.b + src5.r*src5.b + src6.r*src6.b + src7.r*src7.b + src8.r*src8.b + src9.r*src9.b;            trb *= 1.0 / 9.0;                float tgb = src1.g*src1.b + src2.g*src2.b + src3.g*src3.b + src4.g*src4.b + src5.g*src5.b + src6.g*src6.b + src7.g*src7.b + src8.g*src8.b + src9.g*src9.b;            tgb *= 1.0 / 9.0;                vec4 tsrc2 = src1* src1 + src2* src2 + src3* src3 + src4* src4 + src5*src5 + src6*src6 + src7*src7 + src8*src8 + src9*src9;            tsrc2 *= vec4(1.0 / 9.0);            float tr2 = tsrc2.x;            float tg2 = tsrc2.y;            float tb2 = tsrc2.z;                vec4 tpsrc = src1*res1 + src2*res2 + src3*res3 + src4*res4 + src5*res5 + src6*res6 + src7*res7 + src8*res8 + src9*res9;            tpsrc *= vec4(1.0 / 9.0);            float tpr = tpsrc.x;            float tpg = tpsrc.y;            float tpb = tpsrc.z;                        float brg = (trg - tr * tg);            float brb = (trb - tr * tb);            float bgb = (tgb - tg * tb);                float br2 = tr2 - tr * tr + esp;            float bg2 = tg2 - tg * tg + esp;            float bb2 = tb2 - tb * tb + esp;                float ur = (tpr - stp * tr);            float ug = (tpg - stp * tg);            float ub = (tpb - stp * tb);                    float bs = br2*bgb*bgb + bg2*brb*brb + bb2*brg*brg - 2.0 * bgb*brb*brg - bb2*bg2*br2;                float ar = (bgb*bgb - bb2*bg2)*ur + (bb2*brg - bgb*brb)*ug + (bg2*brb - bgb*brg)*ub;            float ag = (bb2*brg - bgb*brb)*ur + (brb*brb - bb2*br2)*ug + (bgb*br2 - brb*brg)*ub;            float ab = (bg2*brb - bgb*brg)*ur + (bgb*br2 - brb*brg)*ug + (brg*brg - bg2*br2)*ub;            bs = 1.0 / bs;                ar *= bs;            ag *= bs;            ab *= bs;                float b = (stp - ar*tr - ag*tg - ab*tb);                vec2 arag = vec2((ab + 64.0)*2.0, (b + 64.0)*2.0);            arag = clamp(arag, 0.0, 255.996);                vec2 farag = floor(arag);                vec4 dst;                dst.xz = arag - farag;                dst.yw = farag;                dst *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);            if (dst.x > (513.0 / 512.0))            {                dst.x = 0.0;                dst.y += (1.0 / 255.0);            }            if (dst.z > (513.0 / 512.0))            {                dst.z = 0.0;                dst.w += (1.0 / 255.0);            }                gl_FragColor = dst;            }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=[this.m_str_fshFragImageMattingTopFator2,this.m_str_fshFragImageMattingTopFator3];this.m_shader[this.m_filter_num]||(this.m_shader[this.m_filter_num]=new y(null,a[this.m_filter_num],this.m_context.context()));var o=new w(this.m_context.context(),null,this.m_shader[this.m_filter_num],r,i,s);o.shader_texture("painted1_0Texture",e[0]),o.shader_texture("painted1_1Texture",e[1]),o.shader_texture("srcTexture",e[2]);var n={};n.esp=this.m_esp,n.sft=[1/r,1/i],o.m_shader.uniforms(n),o.draw_to(t);var _=this.m_context.context().getError();if(_)throw new Error("FragImageMattingTopFactorProc: "+_)},e.prototype.destroy=function(){this.m_shader[0]&&(this.m_shader[0].destroy(),this.m_shader[0]=null),this.m_shader[1]&&(this.m_shader[1].destroy(),this.m_shader[1]=null)},e}(Jt),Mr=function(t){function e(e){var r=t.call(this)||this;return r.m_amount=0,r.m_end_fac=0,r.m_crop=!1,r.m_rectangle=new Array,r.m_context=e,r.m_shader=null,r.m_str_fshFragImageMattingBlurUpsizeProc="varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D inputMaskTexture;        uniform sampler2D subMaskTextureR;        uniform sampler2D subMaskTextureD;        uniform vec4 m;        uniform float amount;        uniform float end_fac;        uniform vec2 samplerSize;                uniform vec4 rectangle;        uniform float crop;                void main()        {                    vec4 src = texture2D(inputMaskTexture, textureCoordinate);                    vec4 sub_r = texture2D(subMaskTextureR, textureCoordinate * m.xy + m.zw);            vec4 sub_d = texture2D(subMaskTextureD, textureCoordinate * m.xy + m.zw);                    float res = (((src - sub_r) * end_fac + sub_d) *(1.0 - amount) +src * amount).x*src.x;            res = res*res*res;            vec4 src2 = texture2D(inputImageTexture, textureCoordinate);            vec4 dst4 = vec4(src2.rgb, src2.a*res);            gl_FragColor = dst4;                        if(crop<0.5)return;            vec2 rc = textureCoordinate/samplerSize;            rc = rc - rectangle.xy;            float mi = min(rc.x,rc.y);            float mir = min(rectangle.z - rc.x,rectangle.w - rc.y);            mi = min(mi,mir);            if(mi<0.0)return;            if(mi>3.0)return;            vec3 color = vec3(172.0/255.0,151.0/255.0,94.0/255.0);            rc = rc/20.0 - floor(rc/20.0)- vec2(0.5);            float a = 0.0;            if(rc.x*rc.y>0.0)a = 1.0;            gl_FragColor = vec4(mix(dst4.xyz,color,a),a);                    }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();a.disable(a.BLEND),this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingBlurUpsizeProc,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e[0]),o.shader_texture("subMaskTextureR",e[1]),o.shader_texture("subMaskTextureD",e[2]),o.shader_texture("inputMaskTexture",e[3]);var n={};n.m=this.m_m,n.amount=this.m_amount,n.end_fac=this.m_end_fac,n.samplerSize=[1/r,1/i],n.crop=this.m_crop?1:0,n.rectangle=this.m_rectangle,o.m_shader.uniforms(n),o.draw_to(t);var _=a.getError();if(_)throw new Error("FragImageMattingUpsizeBlurProc: "+_)},e.prototype.init=function(t,e){this.m_amount=t,this.m_end_fac=e},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Dr=function(t){function e(e){var r=t.call(this)||this;return r.m_alpha_flag=!1,r.m_crop=!1,r.m_rectangle=new Array,r.m_context=e,r.m_shader=null,r.m_m=[],r.m_str_fshFragImageMattingUpsizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D paintResTexture;        uniform sampler2D tempTexture;        uniform vec4 m;        uniform vec2 samplerSize;        uniform float alpha_flag;                uniform vec4 rectangle;        uniform float crop;            void main()        {                vec4 src = texture2D(inputImageTexture, textureCoordinate);                        float res = texture2D(paintResTexture, textureCoordinate).x;            if (alpha_flag < 0.5){                float line = texture2D(tempTexture, textureCoordinate*m.xy + m.zw).x*1.2 - 0.1;                line = clamp(line,0.0,1.0);                vec2 coord = textureCoordinate/samplerSize;                if(res>0.6&&(coord.x<4.0||coord.x>1.0/samplerSize.x-4.0||coord.y<4.0||coord.y>1.0/samplerSize.y-4.0))                                    line = 0.6;                    vec3 color = vec3(0.0/255.0,255.0/255.0,132.0/255.0);                    vec3 dst = mix(src.xyz, vec3(1.0,0.0,54.0/255.0), (1.0 - res)*0.4);                dst = mix(dst, color, line*0.7);                vec4 dst4 = vec4(dst, mix(src.a,1.0,line));                gl_FragColor = dst4;                if(crop<0.5)return;            vec2 rc = textureCoordinate/samplerSize;            rc = rc - rectangle.xy;            float mi = min(rc.x,rc.y);            float mir = min(rectangle.z - rc.x,rectangle.w - rc.y);            mi = min(mi,mir);            if(mi<0.0)return;            if(mi>1.0)return;            color = vec3(172.0/255.0,151.0/255.0,94.0/255.0);            rc = rc/4.0 - floor(rc/4.0)- vec2(0.5);            float a = 0.0;            if(rc.x*rc.y>0.0)a = 1.0;            gl_FragColor = vec4(mix(dst4.xyz,color,a),1.0);                }            else                gl_FragColor = vec4(src.rgb*(src.a*res), src.a*res);                }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){var a=this.m_context.context();this.m_shader||(this.m_shader=new y(null,this.m_str_fshFragImageMattingUpsizeProc,a));var o=new w(a,null,this.m_shader,r,i,s);o.shader_texture("inputImageTexture",e[0]),o.shader_texture("paintResTexture",e[1]),o.shader_texture("tempTexture",e[2]);var n={};n.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],n.samplerSize=[1/r,1/i],n.alpha_flag=this.m_alpha_flag?1:0,n.crop=this.m_crop?1:0,n.rectangle=this.m_rectangle,o.m_shader.uniforms(n),o.draw_to(t);var _=a.getError();if(_)throw new Error("FragImageMattingUpsizeProc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Rr=function(){function t(t){this.m_pyramid_gpu=null,this.m_width=0,this.m_height=0,this.m_last_src="",this.m_last_blur_view=0,this.m_last_matting_view=0,this.m_view_num=0,this.m_sharpenTimes=0,this.m_esp=0,this.m_iteration_times=0,this.m_alpha_flag=!1,this.m_blurFlag=!1,this.m_crop=!1,this.m_amount=0,this.m_radius=0,this.m_rectangle=new Array,this.m_context=t,this.m_factor=new le,this.m_down_x32_filter=new br(t),this.m_downsize_painter_filter=new Tr(t),this.m_downsize_1_0_painter_filter=new zr(t),this.m_downsize_1_1_painter_filter=new wr(t),this.m_downsize_filter=new fr(t),this.m_8x_down_filter=new Ue(t),this.m_pyr_top_factor_filter=new Sr(t),this.m_matting_guidance_filter=new gr(t),this.m_pyr_factor_filter=new Er(t),this.m_fore_iteration_filter=new pr(t),this.m_iteration_filter=new vr(t),this.m_upsize_filter=new Dr(t),this.m_matting_line_filter=new xr(t),this.m_temp_up_filter=new Cr(t),this.m_pyr_blend_filter=new yr(t),this.m_down_resize_filter=new Le(t),this.m_down_filter=new Ue(t),this.m_up_filter=new Ge(t),this.m_up_blur_filter=new Mr(t),this.m_get_rectangle_filter=new dr(t)}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{if(this.size_change(r.m_width,r.m_height),this.m_pyramid_gpu||(this.m_pyramid_gpu=new Ce(this.m_context,this.m_factor,513,!0,!1,2)),this.init(t),this.m_blurFlag){if(!this.m_painterCache)return;var i=(new Date).getTime();this.process_blur(t,this.m_pyramid_gpu,e.new_temporary(),e.current(),r.m_width,r.m_height,r.m_frameBuffer,this.m_painterCache),e.push_to_current();(new Date).getTime();return}this.m_painterCache||(this.m_painterCache=this.m_context.create_new_texture(r.m_width,r.m_height,!0));var s;s=this.m_view_num<0?this.m_context.lock_image("","matting"):e.load_view(this.m_view_num);(new Date).getTime();this.inner_process(t,this.m_pyramid_gpu,e.new_temporary(),e.current(),r.m_width,r.m_height,r.m_frameBuffer,s,this.m_painterCache);(new Date).getTime();e.push_to_current();var a=this.m_context.context().getError();if(a)throw new Error("ImageMatting: "+a)}catch(a){throw new Error("ImageMatting process: "+a)}},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.m_last_src="",this.m_last_blur_view=0,this.m_last_matting_view=0,this.cal_embed(this.m_factor,this.m_width,this.m_height),this.clear())},t.prototype.destroy=function(){this.clear(),this.m_down_x32_filter&&this.m_down_x32_filter.destroy(),this.m_downsize_painter_filter&&this.m_downsize_painter_filter.destroy(),this.m_downsize_1_0_painter_filter&&this.m_downsize_1_0_painter_filter.destroy(),this.m_downsize_1_1_painter_filter&&this.m_downsize_1_1_painter_filter.destroy(),this.m_downsize_filter&&this.m_downsize_filter.destroy(),this.m_8x_down_filter&&this.m_8x_down_filter.destroy(),this.m_pyr_top_factor_filter&&this.m_pyr_top_factor_filter.destroy(),this.m_matting_guidance_filter&&this.m_matting_guidance_filter.destroy(),this.m_pyr_factor_filter&&this.m_pyr_factor_filter.destroy(),this.m_fore_iteration_filter&&this.m_fore_iteration_filter.destroy(),this.m_iteration_filter&&this.m_iteration_filter.destroy(),this.m_upsize_filter&&this.m_upsize_filter.destroy(),this.m_matting_line_filter&&this.m_matting_line_filter.destroy(),this.m_temp_up_filter&&this.m_temp_up_filter.destroy()},t.prototype.clear=function(){this.m_pyramid_gpu&&(this.m_pyramid_gpu.destroy(),this.m_pyramid_gpu=null),this.m_painterCache&&(this.m_context.context().deleteTexture(this.m_painterCache),this.m_painterCache=null)},t.prototype.init=function(t){t.assume_symbol("used"),t.test_symbol("cache")?this.m_view_num=-1:this.m_view_num=t.fetch_float(),t.assume_symbol("sharpenTimes"),this.m_sharpenTimes=t.fetch_float(0,6),t.assume_symbol("esp"),this.m_esp=.01*t.fetch_float(.001,100),t.test_symbol("iteration")?this.m_iteration_times=t.fetch_float(0,10):this.m_iteration_times=2,t.test_symbol("alpha")?this.m_alpha_flag=!0:this.m_alpha_flag=!1,this.m_blurFlag=!1,this.m_crop=!1,(this.m_blurFlag=t.test_symbol("blurResult"))&&(t.assume_symbol("amount"),this.m_amount=t.fetch_float(-200,500),t.assume_symbol("radius"),this.m_radius=t.fetch_float(0,4)),this.m_crop=t.test_symbol("crop")},t.prototype.draw_up_lineTemp=function(t,e,r,i){void 0===i&&(i=0);for(var s=r+1;s<t.m_images.length;++s)if(t.m_base_level==s){var a=[t.m_images[s-1][i]];this.m_temp_up_filter.process(t.m_base_images[i],a,t.m_size[i].width,t.m_size[i].height,e),t.base_move_up(i,e)}else a=[t.m_images[s-1][i]],this.m_temp_up_filter.process(t.m_images[s][i],a,t.m_size[s].width,t.m_size[s].height,e)},t.prototype.painter_pyr_blend=function(t,e){for(var r=0;r<t.m_images.length;++r){var i=[];t.m_base_level==r?(i[0]=t.m_base_images[1],i[1]=t.m_base_images[2],i[2]=t.m_base_images[0],this.m_pyr_blend_filter.process(t.m_base_images[3],i,t.m_base_size,t.m_base_size,e),t.base_move_up(3,e)):(i[0]=t.m_images[r][1],i[1]=t.m_images[r][2],i[2]=t.m_images[r][0],this.m_pyr_blend_filter.process(t.m_images[r][3],i,t.m_size[r].width,t.m_size[r].height,e))}},t.prototype.inner_process=function(t,e,r,i,s,a,o,n,_){var m=new Array(7);if(this.m_last_matting_view!=this.m_view_num){this.m_matting_guidance_filter.m_fac=0;for(var h=0;h<4;++h)e.map_create(h);e.map_create(4,2),e.map_create(5,2),this.m_factor.get_trans(this.m_downsize_painter_filter.m_m),m[0]=n,this.m_factor.get_trans(this.m_downsize_1_0_painter_filter.m_m),this.m_downsize_1_0_painter_filter.process(e.m_images[e.m_images.length-1][1],m,e.m_size[e.m_size.length-1].width,e.m_size[e.m_size.length-1].height,o),e.draw_downward(this.m_down_x32_filter,o,2,1),this.m_factor.get_trans(this.m_downsize_1_1_painter_filter.m_m),m[0]=n,this.m_downsize_1_1_painter_filter.process(e.m_images[e.m_images.length-1][2],m,e.m_size[e.m_size.length-1].width,e.m_size[e.m_size.length-1].height,o),e.draw_downward(this.m_down_x32_filter,o,2,2),this.m_factor.get_trans(this.m_downsize_filter.m_m),m[0]=i,this.m_downsize_filter.process(e.m_images[e.m_images.length-1][0],m,e.m_size[e.m_size.length-1].width,e.m_size[e.m_size.length-1].height,o),e.draw_downward(this.m_8x_down_filter,o,2),m[0]=e.m_images[2][1],m[1]=e.m_images[2][2],m[2]=e.m_images[2][0],this.m_pyr_top_factor_filter.m_esp=this.m_esp,this.m_pyr_top_factor_filter.m_filter_num=0,this.m_pyr_top_factor_filter.process(e.m_images[2][4],m,e.m_size[2].width,e.m_size[2].height,o),this.m_pyr_top_factor_filter.m_filter_num=1,this.m_pyr_top_factor_filter.process(e.m_images[2][5],m,e.m_size[2].width,e.m_size[2].height,o),this.painter_pyr_blend(e,o),m[0]=e.m_images[2][3],m[1]=e.m_images[2][4],m[2]=e.m_images[2][5],this.m_matting_guidance_filter.m_m[0]=1,this.m_matting_guidance_filter.m_m[1]=1,this.m_matting_guidance_filter.m_m[2]=0,this.m_matting_guidance_filter.m_m[3]=0,this.m_matting_guidance_filter.process(e.m_images[2][0],m,e.m_size[2].width,e.m_size[2].height,o);for(var c=0;c<this.m_iteration_times*(e.m_images.length+1)+1;++c)this.m_pyr_factor_filter.m_fac=.06,this.m_pyr_factor_filter.m_blend_flag=1,m[0]=e.m_images[2][0],m[1]=e.m_images[2][3],this.m_pyr_factor_filter.m_esp=this.m_esp,this.m_pyr_factor_filter.m_filter_num=0,this.m_pyr_factor_filter.process(e.m_images[2][1],m,e.m_size[2].width,e.m_size[2].height,o),this.m_pyr_factor_filter.m_filter_num=1,this.m_pyr_factor_filter.process(e.m_images[2][2],m,e.m_size[2].width,e.m_size[2].height,o),m[0]=e.m_images[2][3],m[1]=e.m_images[2][1],m[2]=e.m_images[2][2],this.m_matting_guidance_filter.process(e.m_images[2][0],m,e.m_size[2].width,e.m_size[2].height,o);for(h=3;h<e.m_images.length;++h){if(this.m_pyr_factor_filter.m_blend_flag=1,e.m_base_level==h){var l=[e.m_images[h-1][0],e.m_base_images[3]];this.m_pyr_factor_filter.m_esp=this.m_esp,this.m_pyr_factor_filter.m_filter_num=0,this.m_pyr_factor_filter.process(e.m_base_images[1],l,e.m_base_size,e.m_base_size,o),this.m_pyr_factor_filter.m_filter_num=1,this.m_pyr_factor_filter.process(e.m_base_images[2],l,e.m_base_size,e.m_base_size,o),l[0]=e.m_base_images[3],l[1]=e.m_base_images[1],l[2]=e.m_base_images[2],this.m_matting_guidance_filter.process(e.m_base_images[0],l,e.m_base_size,e.m_base_size,o),e.base_move_up(0,o)}else m[0]=e.m_images[h-1][0],m[1]=e.m_images[h][3],this.m_pyr_factor_filter.m_esp=this.m_esp,this.m_pyr_factor_filter.m_filter_num=0,this.m_pyr_factor_filter.process(e.m_images[h][1],m,e.m_size[h].width,e.m_size[h].height,o),this.m_pyr_factor_filter.m_filter_num=1,this.m_pyr_factor_filter.process(e.m_images[h][2],m,e.m_size[h].width,e.m_size[h].height,o),m[0]=e.m_images[h][3],m[1]=e.m_images[h][1],m[2]=e.m_images[h][2],this.m_matting_guidance_filter.process(e.m_images[h][0],m,e.m_size[h].width,e.m_size[h].height,o);var u=this.m_iteration_times*(e.m_images.length-h+1)+1;for(c=0;c<u;++c)this.m_pyr_factor_filter.m_blend_flag=1,m[0]=e.m_images[h][0],m[1]=e.m_images[h][3],this.m_pyr_factor_filter.m_esp=this.m_esp,this.m_pyr_factor_filter.m_filter_num=0,this.m_pyr_factor_filter.process(e.m_images[h][1],m,e.m_size[h].width,e.m_size[h].height,o),this.m_pyr_factor_filter.m_filter_num=1,this.m_pyr_factor_filter.process(e.m_images[h][2],m,e.m_size[h].width,e.m_size[h].height,o),m[0]=e.m_images[h][3],m[1]=e.m_images[h][1],m[2]=e.m_images[h][2],this.m_matting_guidance_filter.process(e.m_images[h][0],m,e.m_size[h].width,e.m_size[h].height,o)}for(this.m_pyr_factor_filter.m_fac=.3,this.m_factor.get_trans(this.m_fore_iteration_filter.m_m),m[0]=e.m_images[e.m_images.length-1][0],this.m_fore_iteration_filter.process(e.m_images[e.m_images.length-1][2],m,e.m_size[e.m_size.length-1].width,e.m_size[e.m_size.length-1].height,o),c=0;c<this.m_sharpenTimes;++c)this.m_iteration_filter.m_filter_flag=0,c>0&&(this.m_factor.get_trans(this.m_iteration_filter.m_m),m[0]=_,this.m_iteration_filter.m_res=n,this.m_iteration_filter.process(e.m_images[e.m_images.length-1][2],m,e.m_size[e.m_size.length-1].width,e.m_size[e.m_size.length-1].height,o)),this.m_pyr_factor_filter.m_blend_flag=1,m[0]=e.m_images[e.m_images.length-1][2],m[1]=e.m_images[e.m_images.length-1][3],this.m_pyr_factor_filter.m_esp=8e-5,this.m_pyr_factor_filter.m_filter_num=0,this.m_pyr_factor_filter.process(e.m_images[e.m_images.length-1][0],m,e.m_size[e.m_size.length-1].width,e.m_size[e.m_size.length-1].height,o),this.m_pyr_factor_filter.m_filter_num=1,this.m_pyr_factor_filter.process(e.m_images[e.m_images.length-1][1],m,e.m_size[e.m_size.length-1].width,e.m_size[e.m_size.length-1].height,o),m[0]=i,m[1]=e.m_images[e.m_images.length-1][0],m[2]=e.m_images[e.m_images.length-1][1],this.m_factor.get_rev_trans(this.m_matting_guidance_filter.m_m),c==this.m_sharpenTimes-1&&(this.m_matting_guidance_filter.m_fac=1),this.m_matting_guidance_filter.process(_,m,s,a,o);this.m_last_matting_view=this.m_view_num}if(this.m_factor.get_rev_trans(this.m_upsize_filter.m_m),m[0]=i,m[1]=_,this.m_factor.get_trans(this.m_downsize_filter.m_m),m[0]=_,!this.m_pyramid_gpu)throw new Error("ImageMatting inner process pyr uninit");this.m_downsize_filter.process(this.m_pyramid_gpu.m_images[this.m_pyramid_gpu.m_images.length-1][0],m,this.m_pyramid_gpu.m_size[this.m_pyramid_gpu.m_size.length-1].width,this.m_pyramid_gpu.m_size[this.m_pyramid_gpu.m_size.length-1].height,o),this.m_pyramid_gpu.draw_downward(this.m_8x_down_filter,o,7),this.draw_up_lineTemp(this.m_pyramid_gpu,o,7),m[0]=this.m_pyramid_gpu.m_images[this.m_pyramid_gpu.m_images.length-1][0],this.m_matting_line_filter.process(this.m_pyramid_gpu.m_images[this.m_pyramid_gpu.m_images.length-1][1],m,this.m_pyramid_gpu.m_size[this.m_pyramid_gpu.m_size.length-1].width,this.m_pyramid_gpu.m_size[this.m_pyramid_gpu.m_size.length-1].height,o),this.m_pyramid_gpu.draw_downward(this.m_8x_down_filter,o,7,1),this.draw_up_lineTemp(this.m_pyramid_gpu,o,7,1),m[0]=i,m[2]=this.m_pyramid_gpu.m_images[this.m_pyramid_gpu.m_images.length-1][1],m[1]=_,this.m_alpha_flag&&(this.m_upsize_filter.m_m[0]=1,this.m_upsize_filter.m_m[1]=1,this.m_upsize_filter.m_m[2]=0,this.m_upsize_filter.m_m[3]=0),this.m_upsize_filter.m_alpha_flag=this.m_alpha_flag,this.m_crop?(this.m_get_rectangle_filter.process(r,_,s,a,o),this.m_rectangle=this.m_get_rectangle_filter.m_rectangle,this.m_upsize_filter.m_rectangle=this.m_rectangle):this.m_upsize_filter.m_rectangle=[0,0,0,0],this.m_upsize_filter.m_crop=this.m_crop,this.m_upsize_filter.process(r,m,s,a,o)},t.prototype.draw_temp_textures=function(t,e,r){t.load_from(this.m_down_resize_filter,e,r),t.draw_downward(this.m_down_filter,r)},t.prototype.draw_up_textures=function(t,e,r){t.map_create(1);for(var i=new Array(t.m_images.length),s=0;s<i.length;++s){var a=Math.max(t.m_size[s].width,t.m_size[s].height)/16*this.m_radius;i[s]=Math.exp(-a*a)}for(a=Math.max(t.m_factor.m_src_width,t.m_factor.m_src_height)/16*this.m_radius,r=Math.exp(-a*a),s=1;s<t.m_images.length;++s)if(this.m_up_filter.m_factor=i[s],t.m_base_level==s){var o=[t.m_base_images[0],t.m_images[s-1][0],t.m_images[s-1][1]];1==s&&this.m_context.copy_texture(t.m_images[s-1][1],t.m_images[s-1][0],t.m_size[s-1].width,t.m_size[s-1].height,e),this.m_up_filter.process(t.m_base_images[1],o,t.m_base_size,t.m_base_size,e),t.base_move_up(1,e)}else o=[t.m_images[s][0],t.m_images[s-1][0],t.m_images[s-1][1]],1==s&&this.m_context.copy_texture(t.m_images[s-1][1],t.m_images[s-1][0],t.m_size[s-1].width,t.m_size[s-1].height,e),this.m_up_filter.process(t.m_images[s][1],o,t.m_size[s].width,t.m_size[s].height,e);return r},t.prototype.process_blur=function(t,e,r,i,s,a,o,n){this.m_last_blur_view!=this.m_view_num&&(this.draw_temp_textures(e,n,o),this.m_get_rectangle_filter.process(r,n,s,a,o),this.m_rectangle=this.m_get_rectangle_filter.m_rectangle,this.m_last_blur_view=this.m_view_num);var _=1;_=this.draw_up_textures(e,o,_),this.m_factor.get_rev_trans(this.m_up_blur_filter.m_m),this.m_up_blur_filter.init(.01*this.m_amount+1,_);var m=new Array(3);m[0]=i,m[1]=e.m_images[e.m_images.length-1][0],m[2]=e.m_images[e.m_images.length-1][1],m[3]=n,this.m_up_blur_filter.m_crop=this.m_crop,this.m_crop?this.m_up_blur_filter.m_rectangle=this.m_rectangle:this.m_up_blur_filter.m_rectangle=[0,0,0,0],this.m_up_blur_filter.process(r,m,s,a,o)},t.prototype.cal_embed=function(t,e,r){if(!(r<=0||e<=0)){var i=0,s=0,a=0,o=0;e>r?(i=32,s=32*r/e,32*r%e&&++s,++s,a=32,o=32*r/e):0!=r&&(i=32*e/r,s=32,32*e%r&&++i,++i,a=32*e/r,o=32),t.m_src_width=e,t.m_src_height=r,t.m_dst_width=Math.floor(i),t.m_dst_height=Math.floor(s),t.m_x_start=0,t.m_y_start=0,t.m_emb_width=Math.floor(a),t.m_emb_height=Math.floor(o)}},t.parcerName="imageMatting",t}(),Ar=function(){function t(t){this.m_t_shader=null,this.m_e_shader=null,this.m_width=0,this.m_height=0,this.m_mvp=new Array,this.m_s_vecPoints=new Array,this.m_r=0,this.m_g=0,this.m_b=0,this.m_pointSize=0,this.m_pointStride=0,this.m_opacity=0,this.m_context=t,this.m_str_vshPaintColorRotWithNorm="        attribute vec4 vPosition;        attribute vec2 vPointNorm;        uniform mat4 uMat;        uniform float pointSize;        void main()        {            gl_PointSize = pointSize;            gl_Position = (uMat * vPosition);        }",this.m_str_fshPaintColorRot="        uniform sampler2D brushTexture;        uniform vec4 vColor;        void main()        {            vec2 coord = gl_PointCoord - vec2(0.5);            float radius = coord.x*coord.x + coord.y*coord.y;            radius = sqrt(radius);            if(radius<0.5)gl_FragColor = vColor;            else gl_FragColor = vec4(0.0);        }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{var i=this.m_context.context();r.m_width==this.m_width&&r.m_height==this.m_height||(this.m_mvp=this.makeOrtho(0,r.m_width,0,r.m_height,-1,1),this.m_width=r.m_width,this.m_height=r.m_height),this.init(t,r.m_width,r.m_height),this.m_opacity;var s=this.m_pointSize;i.enable(i.BLEND),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ONE,i.ONE_MINUS_SRC_ALPHA),this.m_t_shader||(this.m_t_shader=new y(this.m_str_vshPaintColorRotWithNorm,this.m_str_fshPaintColorRot,i)),i.bindFramebuffer(i.FRAMEBUFFER,r.m_frameBuffer),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,e.current(),0),i.useProgram(this.m_t_shader.m_program);var a=[],o=[];if(o[0]=r.m_width,o[1]=r.m_height,this.genInterpolationPointsAndDirections(this.m_s_vecPoints,a,[],o,this.m_pointStride),0==a.length)return;this.m_s_vecPoints=[];var n=a.length;null==i.engineVertexBuffer&&(i.engineVertexBuffer=i.createBuffer()),i.bindBuffer(i.ARRAY_BUFFER,i.engineVertexBuffer),i.bufferData(i.ARRAY_BUFFER,new Float32Array(this.vecToData(a)),i.STATIC_DRAW);var _=i.getAttribLocation(this.m_t_shader.m_program,"vPosition");i.vertexAttribPointer(_,2,i.FLOAT,!1,0,new Float32Array(this.vecToData(a))),i.enableVertexAttribArray(_);var m={};m.uMat=this.m_mvp,m.pointSize=s,m.vColor=[this.m_r/255,this.m_g/255,this.m_b/255,1],i.viewport(0,0,r.m_width,r.m_height),this.m_t_shader.uniforms(m),i.drawArrays(i.POINTS,0,n),i.disable(i.BLEND);var h=i.getError();if(h)throw new Error("ColorPainter: "+h)}catch(h){throw new Error("ColorPainter process: "+h)}},t.prototype.destroy=function(){this.m_t_shader&&(this.m_t_shader.destroy(),this.m_t_shader=null),this.m_e_shader&&(this.m_e_shader.destroy(),this.m_e_shader=null)},t.prototype.init=function(t,e,r){this.m_r=1,this.m_g=.1,this.m_b=.05,this.m_opacity=.1;t.assume_symbol("pointSize"),t.test_symbol("relToWidth")?this.m_pointSize=t.fetch_float()*e:this.m_pointSize=t.fetch_float(),t.assume_symbol("pointStride"),t.test_symbol("relToWidth")?this.m_pointStride=t.fetch_float()*e:this.m_pointStride=t.fetch_float(),this.m_r=t.fetch_float(0,255),this.m_g=t.fetch_float(0,255),this.m_b=t.fetch_float(0,255);if(t.lookup_symbol(["coordinate","realPixel",0],!0))for(;t.test_symbol("point");){var i=t.fetch_float()/e,s=t.fetch_float()/r;this.m_s_vecPoints.push({x:i,y:s})}else for(;t.test_symbol("point");)i=t.fetch_float(),s=t.fetch_float(),this.m_s_vecPoints.push({x:i,y:s})},t.prototype.genInterpolationPointsAndDirections=function(t,e,r,i,s){var a=t.length;if(a<1||s<1)throw"Invalid Parameters";if(1==a)return e.push({x:t[0].x*i[0],y:t[0].y*i[1]}),void r.push({x:0,y:0});for(var o=1;o<a;++o)for(var n={x:(t[o].x-t[o-1].x)*i[0],y:(t[o].y-t[o-1].y)*i[1]},_=Math.floor(Math.max(Math.ceil(Math.sqrt(n.x*n.x+n.y*n.y))/s,1)),m={x:n.x/_,y:n.y/_},h={x:t[o-1].x*i[0],y:t[o-1].y*i[1]},c=0;c<_;++c)e.push({x:h.x+m.x*c,y:h.y+m.y*c})},t.prototype.vecToData=function(t){for(var e=[],r=0;r<t.length;++r)e[2*r]=t[r].x,e[2*r+1]=t[r].y;return e},t.prototype.makeOrtho=function(t,e,r,i,s,a){var o=e-t,n=i-r,_=a-s;return[2/o,0,0,0,0,2/n,0,0,0,0,-2/_,0,-(e+t)/o,-(i+r)/n,-(a+s)/_,1]},t.parcerName="colorPainter",t}(),Ir=function(t){function e(e){var r=t.call(this,e)||this;return r.m_vigFac=0,r.m_red=0,r.m_green=0,r.m_blue=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec3 mul;        uniform vec2 a;        vec3 color_limite(vec3 src, float lum)        {            vec3 vc = src - lum;            vec3 fac = min(vec3(1.0 - lum) / max(vc, 0.00001), 1.0);            vc = vc * min(fac.r, min(fac.g, fac.b));            return vc + lum;        }"},e.prototype.shader_procession=function(){return"vec3 lsrc = max(src.rgb * vec3(1.0 / 12.82), pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055), vec3(2.4)));                        vec2 cod = textureCoordinate - 0.5;                float v = dot(a, cod * cod);                v = 1.0 / (1.0 + v);                lsrc *= mul * v * v;                float lum = dot(lsrc, vec3(0.299, 0.587, 0.114));                lsrc = mix(color_limite(lsrc, lum),vec3(1.0),step(1.0,lum));                src.rgb = min(lsrc * 12.82, pow(lsrc, vec3(1.0 / 2.4)) * vec3(1.055) - vec3(0.055));                dst = src;"},e.prototype.init=function(t,e,r){t.assume_symbol("exposure");var i,s,a,o=t.fetch_float(.01,4);if(t.lookup_symbol(["color","temperature",0],!0)){var n=t.fetch_float(1200,12e3);t.assume_symbol("tint");var _,m=t.fetch_float(.02,5);i=(_=this.temp2color(n,m))[0],s=_[1],a=_[2]}else i=t.fetch_float(0,255)*(1/255),s=t.fetch_float(0,255)*(1/255),a=t.fetch_float(0,255)*(1/255),i=Math.max(i*(1/12.82),Math.pow((i+.055)*(1/1.055),2.4)),s=Math.max(s*(1/12.82),Math.pow((s+.055)*(1/1.055),2.4)),a=Math.max(a*(1/12.82),Math.pow((a+.055)*(1/1.055),2.4));var h=o/(.299*(i=1/i)+.587*(s=1/s)+.114*(a=1/a));this.m_red=i*h,this.m_green=s*h,this.m_blue=a*h,this.m_red=Math.min(this.m_red,16),this.m_green=Math.min(this.m_green,16),this.m_blue=Math.min(this.m_blue,16);if(t.lookup_symbol(["focalLength","vignetting",0],!0)){var c=t.fetch_float(0,1);this.m_vigFac=20*c/12}else{var l=t.fetch_float(12,1600);this.m_vigFac=20/l}},e.prototype.shader_setup=function(t){var e={},r=[this.m_red,this.m_green,this.m_blue];e.mul=r;var i=t.m_width,s=t.m_height,a=i*i*.25+s*s*.25,o=i*i/a,n=s*s/a,_=[o*=this.m_vigFac*this.m_vigFac,n*=this.m_vigFac*this.m_vigFac];e.a=_,t.m_shader.uniforms(e)},e.prototype.temp2color=function(t,e){var r,i=-3*(r=(t/=1e3)<4?.27475/(t*t*t)-.98598/(t*t)+1.17444/t+.145986:t<7?-4.607/(t*t*t)+2.9678/(t*t)+.09911/t+.244063:-2.0064/(t*t*t)+1.9018/(t*t)+.24748/t+.23704)*r+2.87*r-.275,s=r/i,a=(1-r-i)/i,o=[];return o[0]=3.24074*s-1.53726-.498571*a,o[1]=.969258*-s+1.87599+.0415557*a,o[2]=.0556352*s-.203996+1.05707*a,o[1]/=e,o},e.parcerName="opticsAdjust",e}(ft),kr=function(t){function e(e){var r=t.call(this,e)||this;return r.red=new Array,r.green=new Array,r.blue=new Array,r.cyan=new Array,r.magenta=new Array,r.yellow=new Array,r.white=new Array,r.gray=new Array,r.black=new Array,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec4 red;                uniform vec4 yellow;                uniform vec4 green;                uniform vec4 cyan;                uniform vec4 blue;                uniform vec4 magenta;                uniform vec4 white;                uniform vec4 gray;                uniform vec4 black;                vec4 getFac(vec4 facPre,vec4 facNex,float h,float s,float v)                {                    vec4 ret = mix(facPre,facNex,h);                    vec4 rets0;                    v = v * 2.0 - 1.0;                    if(v > 0.0)                    {                        rets0 = mix(gray,white,v);                    }                    else                    {                        rets0 = mix(gray,black,-v);                    }                    s = 1.0 - s;                    s = s * s * s;                    s = 1.0 - s;                    return mix(rets0,ret,s);                }                vec3 adjColor(vec3 src,float a,vec4 fac)                {                    vec3 tfac = fac.xyz *  vec3(fac.w,fac.w,fac.w);                    tfac = min(tfac,vec3(2.0,2.0,2.0));                    vec3 tfc1 = clamp(tfac - vec3(1.0,1.0,1.0),0.0,0.5);                    vec3 tfc2 = max(tfac - vec3(1.5,1.5,1.5),0.0);                    src = vec3(1.0,1.0,1.0) - src;                    src = src * (tfac -  src * (src * (tfc1 - tfc2) + vec3(2.0,2.0,2.0) * tfc2));                    return vec3(1.0,1.0,1.0) - src;                }                vec3 hsvAdjust(vec3 src)                {                    vec3 temp;                    vec4 color1, color2;                    if(src.r > src.g)                    {                        if(src.g > src.b)                        {                            temp = src.rgb;                            color1 = red;                            color2 = yellow;                        }                        else if(src.b > src.r)                        {                            temp = src.brg;                            color1 = blue;                            color2 = magenta;                        }                        else                            {                            temp = src.rbg;                            color1 = red;                            color2 = magenta;                        }                    }                    else                    {                        if(src.r > src.b)                        {                            temp = src.grb;                            color1 = green;                            color2 = yellow;                        }                        else if(src.b > src.g)                        {                            temp = src.bgr;                            color1 = blue;                            color2 = cyan;                        }                        else                        {                            temp = src.gbr;                            color1 = green;                            color2 = cyan;                        }                    }                    float d = temp.x - temp.z + 0.0001;                    float s = temp.y - temp.z;                    vec4 fac = getFac(color1, color2, s/d, d, temp.x);                    return adjColor(src, temp.x, fac);                }"},e.prototype.shader_procession=function(){return"src.rgb = hsvAdjust(src.rgb);        dst = src;"},e.prototype.init=function(t,e,r){for(var i=0;i<4;++i)this.red[i]=0,this.green[i]=0,this.blue[i]=0,this.cyan[i]=0,this.magenta[i]=0,this.yellow[i]=0,this.white[i]=0,this.gray[i]=0,this.black[i]=0;var s,a,o=["red","green","blue","cyan","magenta","yellow","white","gray","black",0],n=!0,_=!0,m=!0,h=!0,c=!0,l=!0,u=!0,f=!0,p=!0;for(s=0;s<9;++s){var d=t.lookup_symbol(o,!1);switch(d){case 0:for(0==n&&t.error("parameter red has been input"),a=0;a<4;++a)this.red[a]=.01*t.fetch_float();n=!1;break;case 1:for(0==_&&t.error("parameter green has been input"),a=0;a<4;++a)this.green[a]=.01*t.fetch_float();_=!1;break;case 2:for(0==m&&t.error("parameter blue has been input"),a=0;a<4;++a)this.blue[a]=.01*t.fetch_float();m=!1;break;case 3:for(0==h&&t.error("parameter cyan has been input"),a=0;a<4;++a)this.cyan[a]=.01*t.fetch_float();h=!1;break;case 4:for(0==c&&t.error("parameter magenta has been input"),a=0;a<4;++a)this.magenta[a]=.01*t.fetch_float();c=!1;break;case 5:for(0==l&&t.error("parameter yellow has been input"),a=0;a<4;++a)this.yellow[a]=.01*t.fetch_float();l=!1;break;case 6:for(0==u&&t.error("parameter white has been input"),a=0;a<4;++a)this.white[a]=.01*t.fetch_float();u=!1;break;case 7:for(0==f&&t.error("parameter has been input"),a=0;a<4;++a)this.gray[a]=.01*t.fetch_float();f=!1;break;case 8:for(0==p&&t.error("parameter black has been input"),a=0;a<4;++a)this.black[a]=.01*t.fetch_float();p=!1}if(-1==d)break}},e.prototype.shader_setup=function(t){var e={};e.red=[this.red[0]+1,this.red[1]+1,this.red[2]+1,this.red[3]+1],e.green=[this.green[0]+1,this.green[1]+1,this.green[2]+1,this.green[3]+1],e.blue=[this.blue[0]+1,this.blue[1]+1,this.blue[2]+1,this.blue[3]+1],e.cyan=[this.cyan[0]+1,this.cyan[1]+1,this.cyan[2]+1,this.cyan[3]+1],e.magenta=[this.magenta[0]+1,this.magenta[1]+1,this.magenta[2]+1,this.magenta[3]+1],e.yellow=[this.yellow[0]+1,this.yellow[1]+1,this.yellow[2]+1,this.yellow[3]+1],e.white=[this.white[0]+1,this.white[1]+1,this.white[2]+1,this.white[3]+1],e.gray=[this.gray[0]+1,this.gray[1]+1,this.gray[2]+1,this.gray[3]+1],e.black=[this.black[0]+1,this.black[1]+1,this.black[2]+1,this.black[3]+1],t.m_shader.uniforms(e)},e.parcerName="selectiveColor",e}(ft),Fr=function(t){function e(e){var r=t.call(this,e)||this;return r.m_red=0,r.m_green=0,r.m_blue=0,r.m_opacity=0,r.m_intensity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec4 blendColor;        uniform float intensity;        float getLumValue(vec3 src)        {            return 0.299 * src.r + 0.587 * src.g + 0.114 * src.b;        }        vec3 blend(vec3 src1, vec3 src2, float alpha)        {            return mix(src1, getLumValue(src1) - getLumValue(src2) + src2, alpha);        }"},e.prototype.shader_procession=function(){return"dst = vec4(blend(src.rgb, blendColor.rgb, intensity * blendColor.a), src.a);"},e.prototype.init=function(t,e,r){this.m_red=t.fetch_float(0,256),this.m_green=t.fetch_float(0,256),this.m_blue=t.fetch_float(0,256),this.m_opacity=t.fetch_float(0,256),this.m_intensity=t.fetch_float(0,100)},e.prototype.shader_setup=function(t){var e={};e.blendColor=[this.m_red/255,this.m_green/255,this.m_blue/255,this.m_opacity/255],e.intensity=this.m_intensity/100,t.m_shader.uniforms(e)},e.parcerName="color",e}(ft),Pr=function(t){function e(e){var r=t.call(this,e)||this;return r.m_red=0,r.m_green=0,r.m_blue=0,r.m_opacity=0,r.m_intensity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec4 blendColor;        uniform float intensity;        vec3 blend(vec3 src1, vec3 src2, float alpha)        {            vec3 dst = dot(src1, vec3(0.299, 0.587, 0.114)) > dot(src2, vec3(0.299, 0.587, 0.114)) ? src1 : src2;            return mix(src1, dst, alpha);        }"},e.prototype.shader_procession=function(){return"dst = vec4(blend(src.rgb, blendColor.rgb, intensity * blendColor.a), src.a);"},e.prototype.init=function(t,e,r){this.m_red=t.fetch_float(0,256),this.m_green=t.fetch_float(0,256),this.m_blue=t.fetch_float(0,256),this.m_opacity=t.fetch_float(0,256),this.m_intensity=t.fetch_float(0,100)},e.prototype.shader_setup=function(t){var e={};e.blendColor=[this.m_red/255,this.m_green/255,this.m_blue/255,this.m_opacity/255],e.intensity=this.m_intensity/100,t.m_shader.uniforms(e)},e.parcerName="lighterColor",e}(ft),Nr=function(t){function e(e){var r=t.call(this,e)||this;return r.m_red=0,r.m_green=0,r.m_blue=0,r.m_opacity=0,r.m_intensity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform vec4 blendColor;        uniform float intensity;        vec3 blend(vec3 src1, vec3 src2, float alpha)        {            vec3 dst = dot(src1, vec3(0.299, 0.587, 0.114)) < dot(src2, vec3(0.299, 0.587, 0.114)) ? src1 : src2;            return mix(src1, dst, alpha);        }"},e.prototype.shader_procession=function(){return"dst = vec4(blend(src.rgb, blendColor.rgb, intensity * blendColor.a), src.a);"},e.prototype.init=function(t,e,r){this.m_red=t.fetch_float(0,256),this.m_green=t.fetch_float(0,256),this.m_blue=t.fetch_float(0,256),this.m_opacity=t.fetch_float(0,256),this.m_intensity=t.fetch_float(0,100)},e.prototype.shader_setup=function(t){var e={};e.blendColor=[this.m_red/255,this.m_green/255,this.m_blue/255,this.m_opacity/255],e.intensity=this.m_intensity/100,t.m_shader.uniforms(e)},e.parcerName="darkerColor",e}(ft),qr=function(){function t(){}return t.create=function(t){return new wi(t,wi.special_mix_color_list)},t.parcerName="specialMixColor",t}(),Br=function(){function t(){}return t.create=function(t){return new wi(t,wi.border_list)},t.parcerName="border",t}(),Ur=function(t){function e(e){var r=t.call(this,e)||this;return r.texturelocker=null,r.m_color=null,r.m_file_name_vec=new Array,r.m_res_name="",r.m_x1=0,r.m_x2=0,r.m_x3=0,r.m_y1=0,r.m_y2=0,r.m_y3=0,r.m_thk=0,r.m_ms=0,r.thicken=!1,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D border;        uniform vec4 my;        uniform vec3 py;        uniform vec3 ky;        uniform vec4 mx;        uniform vec3 px;        uniform vec3 kx;        uniform vec4 color;        "},e.prototype.shader_procession=function(){return"vec3 bx = (vec3(textureCoordinate.x) - kx) * mx.xyz;        bx.y = fract(bx.y)*mx.w;        bx += px;        vec3 by = (vec3(textureCoordinate.y) - ky) * my.xyz;        by.y = fract(by.y)*my.w;        by += py;        vec2 borderCord;        if(textureCoordinate.x > kx.z)        {            borderCord.x = bx.z;        }        else if(textureCoordinate.x > kx.y)        {            borderCord.x = bx.y;        }        else        {            borderCord.x = bx.x;        }        if(textureCoordinate.y > ky.z)        {            borderCord.y = by.z;        }        else if(textureCoordinate.y > ky.y)        {            borderCord.y = by.y;        }        else        {            borderCord.y = by.x;        }        vec4 bp = texture2D(border, borderCord);        if(color.w==1.0)            bp = vec4(color.xyz,bp.w);        dst.rgb = mix(src.rgb,bp.rgb,bp.a);        dst.a = 1.0;"},e.prototype.init=function(t,e,r){this.m_color=null,this.m_file_name_vec=[],this.thicken=!1;for(;t.test_symbol("file");){var i={size:0,file_name:""};i.file_name=t.fetch_string(),g.Number==t.get_parcer_status()&&(i.size=t.fetch_float()),i.size*=i.size,this.m_file_name_vec.push(i)}if(this.m_res_name=this.m_file_name_vec[0].file_name,t.assume_symbol("resourceLayoutH"),this.m_x1=t.fetch_float()+1e-5,this.m_x2=t.fetch_float()+1e-5,this.m_x3=t.fetch_float()+1e-5,this.m_x2=Math.max(this.m_x2,.008*(this.m_x1+this.m_x3)),t.assume_symbol("resourceLayoutV"),this.m_y1=t.fetch_float()+1e-5,this.m_y2=t.fetch_float()+1e-5,this.m_y3=t.fetch_float()+1e-5,this.m_y2=Math.max(this.m_y2,.008*(this.m_y1+this.m_y3)),t.assume_symbol("thickness"),-1==(this.m_ms=t.lookup_symbol(["pixel","width","height","perimeter",0]))&&(this.m_ms=3),this.m_thk=t.fetch_float(.01,.5),t.test_symbol("thicken")&&(this.thicken=!0),t.test_symbol("color")){this.m_color=new Array(3);for(var s=0;s<3;++s)this.m_color[s]=t.fetch_float()/255}},e.prototype.shader_setup=function(t){var e=t.m_width*t.m_height;if(this.thicken){var r=Math.min(t.m_width,t.m_height),i=void 0;r<=331&&(i=.9*(1-r/331),this.m_thk=this.m_thk+i,this.m_thk>.48&&(this.m_thk=.48))}else if(this.m_file_name_vec.length>1)for(var s=0;s<this.m_file_name_vec.length;++s)if(e<this.m_file_name_vec[s].size||0==this.m_file_name_vec[s].size){this.m_res_name=this.m_file_name_vec[s].file_name;break}if(this.texturelocker=this.m_context.get_resource_texture(this.m_res_name),!this.texturelocker)throw new Error("corner "+this.m_res_name);t.shader_texture("border",this.texturelocker.texture);var a=new Array(3),o=new Array(3),n=new Array(4),_=new Array(4),m=new Array(3),h=new Array(3);this.cal_uniform(t.m_width,t.m_height,a,o,n,_,m,h);var c={};this.m_color?c.color=[this.m_color[0],this.m_color[1],this.m_color[2],1]:c.color=[0,0,0,0],c.kx=a,c.ky=o,c.mx=n,c.my=_,c.px=m,c.py=h,t.m_shader.uniforms(c)},e.prototype.cal_uniform=function(t,e,r,i,s,a,o,n){var _,m;switch(this.m_ms){case 0:_=4*this.m_thk*(this.m_x1+this.m_x3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*t),m=4*this.m_thk*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*e);break;case 1:m=(_=2*this.m_thk)*t*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3)*e);break;case 2:_=(m=2*this.m_thk)*e*(this.m_x1+this.m_x2)/((this.m_y1+this.m_y3)*t);break;default:var h=2*t+2*e;_=this.m_thk*h*(this.m_x1+this.m_x3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*t),m=this.m_thk*h*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*e)}var c=Math.max(m,_);if(c>.99){var l=.99/c;m*=l,_*=l}var u=this.m_x1+this.m_x2+this.m_x3,f=this.m_y1+this.m_y2+this.m_y3,p=m*e/(this.m_y1+this.m_y3),d=_*t/(this.m_x1+this.m_x3),g=(1-_)*t/this.m_x2,v=(1-m)*e/this.m_y2,x=Math.max(Math.floor(g/p+.5),1),y=Math.max(Math.floor(v/d+.5),1),w=this.m_x1/u,b=this.m_x2/u,z=this.m_x3/u,T=this.m_y1/f,E=this.m_y2/f,C=this.m_y3/f,S=1/(w+z),M=1/(T+C);r[0]=0,r[1]=_*w*S,r[2]=1-_*z*S,i[0]=0,i[1]=m*T*M,i[2]=1-m*C*M,s[0]=(w+z)/_,s[1]=x/(1-_),s[2]=s[0],s[3]=b,a[0]=(T+C)/m,a[1]=y/(1-m),a[2]=a[0],a[3]=E,o[0]=0,o[1]=w,o[2]=w+b,n[0]=0,n[1]=T,n[2]=T+E},e.parcerName="corner",e}(ft),Lr=function(t){function e(e){var r=t.call(this,e)||this;return r.texturelocker=null,r.i_blocks=new Array,r.m_blocks=new Array,r.m_res_name="",r.m_ms=0,r.m_thk=0,r.m_texAspectRatio=0,r.m_TexUDAspectRatio=0,r.m_texArea=new Array,r.model="",r.m_align="",r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D borderTexture;        uniform vec4 borderBlocks[3];        uniform vec4 texArea;        uniform float lengthH;        uniform float borderThickness;        vec3 blend(vec3 src, vec3 dst, float alpha)        {            return mix(src, dst, alpha);        }        "},e.prototype.shader_procession=function(){return"vec2 tc = textureCoordinate;        vec2 coord;        if(tc.y <= borderThickness)        {            coord = vec2(mod(tc.x, lengthH) / lengthH, tc.y / borderThickness) * borderBlocks[0].zw + borderBlocks[0].xy;            vec4 frameTop = texture2D(borderTexture, coord);            src.rgb = blend(src.rgb, frameTop.rgb, frameTop.a);        }        else if(tc.y >= 1.0 - borderThickness)        {            coord = vec2(mod(tc.x, lengthH) / lengthH, (tc.y - 1.0 + borderThickness) / borderThickness) * borderBlocks[1].zw + borderBlocks[1].xy;            vec4 frameBottom = texture2D(borderTexture, coord);            src.rgb = blend(src.rgb, frameBottom.rgb, frameBottom.a);        }        if(tc.x >= texArea.x && tc.x <= texArea.x + texArea.z            && tc.y >= texArea.y && tc.y <= texArea.y + texArea.w)        {            coord = (tc - texArea.xy) / texArea.zw * borderBlocks[2].zw + borderBlocks[2].xy;            vec4 texText = texture2D(borderTexture, coord);            src.rgb = blend(src.rgb, texText.rgb, texText.a);        }        dst = src;"},e.prototype.init=function(t,e,r){var i,s;t.assume_symbol("file"),this.m_res_name=t.fetch_string(),i=t.fetch_float(),s=t.fetch_float();for(var a=0;12!=a;++a)this.i_blocks[a]=t.fetch_float(),this.m_blocks[a]=a%2==0?this.i_blocks[a]/i:this.i_blocks[a]/s;this.model=t.fetch_symbol(),this.m_align=this.model,this.m_texArea[0]=t.fetch_float(),this.m_texArea[1]=t.fetch_float(),t.assume_symbol("thickness"),g.Symbol==t.get_parcer_status()?this.m_ms=t.lookup_symbol(["pixel","width","height","perimeter",0],!0):this.m_ms=3,this.m_thk=t.fetch_float(),this.m_texAspectRatio=i/s,this.m_TexUDAspectRatio=this.m_blocks[2]/this.m_blocks[3]},e.prototype.shader_setup=function(t){if(this.texturelocker=this.m_context.get_resource_texture(this.m_res_name),!this.texturelocker)throw new Error("plan "+this.m_res_name);t.shader_texture("borderTexture",this.texturelocker.texture);var e=this.m_context.context().getUniformLocation(t.m_shader.m_program,"borderBlocks");if(e<0)throw new Error("CGEBorderCoverudtProcess::shader_setup");this.m_context.context().uniform4fv(e,this.m_blocks);var r=this.cal_uniform(t.m_width,t.m_height,this.m_align,this.m_thk,this.m_texArea),i={};i.borderThickness=r.thk,i.lengthH=r.lengthH,i.texArea=r.dst_texArea,t.m_shader.uniforms(i)},e.prototype.cal_uniform=function(t,e,r,i,s){var a,o=[],n=t/e;n<1&&(i*=n);var _=s[0],m=s[1];a=i/n*this.m_TexUDAspectRatio*this.m_texAspectRatio,n>=1?_/=n:m*=n;var h=0,c=0;return"LB"==r?(h=0,c=1-this.m_thk-m):"CB"==r?(h=.5-_/2,c=1-this.m_thk-m):"RB"==r?(h=1-_,c=1-this.m_thk-m):"LT"==r?(h=0,c=this.m_thk):"CT"==r?(h=.5-_/2,c=this.m_thk):"RT"==r?(h=1-_,c=this.m_thk):"CX"==r?(h=.5-_/2,c=-1):"XC"==r?(h=-1,c=.5-m/2):"CC"==r?(h=.5-_/2,c=.5-m/2):"XX"==r&&(h=-1,c=-1),o[0]=h,o[1]=c,o[2]=_,o[3]=m,{dst_texArea:o,thk:i,lengthH:a}},e.parcerName="Plan",e}(ft),Or=function(t){function e(e){var r=t.call(this,e)||this;return r.texturelocker=null,r.m_file_name_vec=new Array,r.m_res_name="",r.m_x1=0,r.m_x2=0,r.m_x3=0,r.m_y1=0,r.m_y2=0,r.m_y3=0,r.m_thk=0,r.m_ms=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform sampler2D border;        uniform vec4 my;        uniform vec3 py;        uniform vec3 ky;        uniform vec4 mx;        uniform vec3 px;        uniform vec3 kx;        uniform vec4 color;        "},e.prototype.shader_procession=function(){return"vec3 bx = (vec3(textureCoordinate.x) - kx) * mx.xyz;        bx.y = fract(bx.y)*mx.w;        bx += px;        vec3 by = (vec3(textureCoordinate.y) - ky) * my.xyz;        by.y = fract(by.y)*my.w;        by += py;        vec2 borderCord;        if(textureCoordinate.x > kx.z)        {            borderCord.x = bx.z;        }        else if(textureCoordinate.x > kx.y)        {            borderCord.x = bx.y;        }        else        {            borderCord.x = bx.x;        }        if(textureCoordinate.y > ky.z)        {            borderCord.y = by.z;        }        else if(textureCoordinate.y > ky.y)        {            borderCord.y = by.y;        }        else        {            borderCord.y = by.x;        }        vec4 bp = texture2D(border, borderCord);        dst = vec4(src.rgb,bp.a);"},e.prototype.init=function(t,e,r){this.m_file_name_vec=[];for(;t.test_symbol("file");){var i={size:0,file_name:""};i.file_name=t.fetch_string(),g.Number==t.get_parcer_status()&&(i.size=t.fetch_float()),i.size*=i.size,this.m_file_name_vec.push(i)}this.m_res_name=this.m_file_name_vec[0].file_name,t.assume_symbol("resourceLayoutH"),this.m_x1=t.fetch_float()+1e-5,this.m_x2=t.fetch_float()+1e-5,this.m_x3=t.fetch_float()+1e-5,this.m_x2=Math.max(this.m_x2,.008*(this.m_x1+this.m_x3)),t.assume_symbol("resourceLayoutV"),this.m_y1=t.fetch_float()+1e-5,this.m_y2=t.fetch_float()+1e-5,this.m_y3=t.fetch_float()+1e-5,this.m_y2=Math.max(this.m_y2,.008*(this.m_y1+this.m_y3)),t.assume_symbol("thickness"),-1==(this.m_ms=t.lookup_symbol(["pixel","width","height","perimeter",0]))&&(this.m_ms=3),this.m_thk=t.fetch_float(.01,.5)},e.prototype.shader_setup=function(t){for(var e=t.m_width*t.m_height,r=0;r<this.m_file_name_vec.length;++r)if(e<this.m_file_name_vec[r].size||0==this.m_file_name_vec[r].size){this.m_res_name=this.m_file_name_vec[r].file_name;break}if(this.texturelocker=this.m_context.get_resource_texture(this.m_res_name),!this.texturelocker)throw new Error("inner "+this.m_res_name);t.shader_texture("border",this.texturelocker.texture);var i=new Array(3),s=new Array(3),a=new Array(4),o=new Array(4),n=new Array(3),_=new Array(3);this.cal_uniform(t.m_width,t.m_height,i,s,a,o,n,_);var m={};m.kx=i,m.ky=s,m.mx=a,m.my=o,m.px=n,m.py=_,t.m_shader.uniforms(m)},e.prototype.cal_uniform=function(t,e,r,i,s,a,o,n){var _,m;switch(this.m_ms){case 0:_=4*this.m_thk*(this.m_x1+this.m_x3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*t),m=4*this.m_thk*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*e);break;case 1:m=(_=2*this.m_thk)*t*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3)*e);break;case 2:_=(m=2*this.m_thk)*e*(this.m_x1+this.m_x2)/((this.m_y1+this.m_y3)*t);break;default:var h=2*t+2*e;_=this.m_thk*h*(this.m_x1+this.m_x3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*t),m=this.m_thk*h*(this.m_y1+this.m_y3)/((this.m_x1+this.m_x3+this.m_y1+this.m_y3)*e)}var c=Math.max(m,_);if(c>.99){var l=.99/c;m*=l,_*=l}var u=this.m_x1+this.m_x2+this.m_x3,f=this.m_y1+this.m_y2+this.m_y3,p=m*e/(this.m_y1+this.m_y3),d=_*t/(this.m_x1+this.m_x3),g=(1-_)*t/this.m_x2,v=(1-m)*e/this.m_y2,x=Math.max(Math.floor(g/p+.5),1),y=Math.max(Math.floor(v/d+.5),1),w=this.m_x1/u,b=this.m_x2/u,z=this.m_x3/u,T=this.m_y1/f,E=this.m_y2/f,C=this.m_y3/f,S=1/(w+z),M=1/(T+C);r[0]=0,r[1]=_*w*S,r[2]=1-_*z*S,i[0]=0,i[1]=m*T*M,i[2]=1-m*C*M,s[0]=(w+z)/_,s[1]=x/(1-_),s[2]=s[0],s[3]=b,a[0]=(T+C)/m,a[1]=y/(1-m),a[2]=a[0],a[3]=E,o[0]=0,o[1]=w,o[2]=w+b,n[0]=0,n[1]=T,n[2]=T+E},e.parcerName="inner",e}(ft),Gr=function(){function t(t){this.m_shader=null,this.m_map_shader=null,this.m_str_fshChromeMap="",this.m_str_fshChromeAlpha="",this.m_factor=0,this.m_red=0,this.m_blue=0,this.m_context=t,this.m_str_fshChromeMap="        varying vec2 textureCoordinate;        uniform float m_red;        uniform float m_blue;        uniform float m_factor;                void main()        {        float red = textureCoordinate.x-0.299;        float blue = textureCoordinate.y-0.114;        float cr = red;        float cb = blue;        float n = 1.0/sqrt(cr*cr+cb*cb);        cr *=n;        cb *=n;        float vp = cr*m_red+cb*m_blue;        float fac;        if(vp>0.0)        {            float vs = (cr*m_blue - cb*m_red)*m_factor;            fac = vp/(vp*vp+vs*vs);            }            else                fac = 0.0;            float ratio =0.125*25.0/8192.0;            float dst = fac;                if((red*red*0.3 + blue*blue)<ratio)                {                    float x = (red*red*0.3 + blue*blue) / ratio;                    dst = (1.0 - (x*x - 2.0*x + 1.0))*fac;                }            gl_FragColor = vec4(0.0,0.0,0.0,dst);            }",this.m_str_fshChromeAlpha="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D chrome;        void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate);            vec3 lsrc = max(src.rgb * vec3(1.0 / 12.82), pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055), vec3(2.4)));            vec3 csrc = lsrc * vec3(0.299, 0.587, 0.114);            float lum = csrc.r + csrc.g + csrc.b;            csrc /= vec3(lum + 0.000001);            src.a = src.a - texture2D(chrome, vec2(csrc.r, csrc.b)).w;            gl_FragColor = src;        }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{this.init(t),this.m_shader||(this.m_shader=new y(null,this.m_str_fshChromeAlpha,this.m_context.context())),this.get_chrome(r);var i=new w(this.m_context.context(),r,this.m_shader);i.shader_texture("inputImageTexture",e.current()),i.shader_texture("chrome",this.m_chrome),i.draw_to(e.new_temporary());var s=this.m_context.context().getError();if(s)throw new Error("HueAlphaAdjust: "+s);e.push_to_current()}catch(t){throw new Error("HueAlphaAdjust process "+t)}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null),this.m_map_shader&&(this.m_map_shader.destroy(),this.m_map_shader=null),this.m_chrome&&(this.m_context.context().deleteTexture(this.m_chrome),this.m_chrome=null)},t.prototype.get_chrome=function(t){this.m_map_shader||(this.m_map_shader=new y(null,this.m_str_fshChromeMap,this.m_context.context())),this.m_chrome||(this.m_chrome=this.m_context.create_new_texture(256,256,!0));var e=new w(this.m_context.context(),null,this.m_map_shader,256,256,t.m_frameBuffer),r={};r.m_red=this.m_red,r.m_blue=this.m_blue,r.m_factor=this.m_factor,this.m_map_shader.uniforms(r),e.draw_to(this.m_chrome)},t.prototype.init=function(t){t.assume_symbol("factor");var e=t.fetch_float(0,1);this.m_factor=Math.pow(20,1-e);if(0==t.lookup_symbol(["hue","color",0],!0)){var r=t.fetch_float();r=r/180*Math.PI,this.m_red=Math.sin(r),this.m_blue=Math.cos(r)}else{var i=t.fetch_float(0,256);i=this.encode(i),i*=.299;var s=t.fetch_float(0,256);s=this.encode(s),s*=.587;var a=t.fetch_float(0,256);a=this.encode(a);var o=1/(i+s+(a*=.114));i*=o,s*=o,a*=o,i-=.299,a-=.114,o=1/Math.sqrt(i*i+a*a),this.m_red=i*o,this.m_blue=a*o}},t.prototype.encode=function(t){var e=(t+.5)*(1/256);return 256*(e=e<.04045?e/12.92:Math.pow((e+.055)/1.055,2.4))},t.parcerName="hueAlphaAdjust",t}(),jr=function(){function t(t){this.m_shader=null,this.m_intensityArray=new Array,this.m_chrome=new Array,this.m_angleArray=[0,0,0,0,0,0,0,0],this.m_width=0,this.m_height=0,this.M_PI=3.141592653589793,this.RLUM=9798,this.GLUM=19234,this.BLUM=3736,this.m_context=t,this.m_s_fshChromeHSLAdjustProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D chrome;                vec3 color_limite(vec3 src, float lum)\t    {\t        lum *= 0.7;\t        \t        vec3 vc = src - lum;\t        \t        vec3 fac = min((1.0 - lum) / max(vc, vec3(0.00001)), vec3(1.0));\t        \t        vc = vc * vec3(min(fac.r, min(fac.g, fac.b)));\t        \t        return lum + vc;        }                vec3 rgb2luv(vec3 src) {\t        vec3 lsrc = max(src.rgb * vec3(1.0 / 12.82), pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055), vec3(2.4)));\t        \t        vec3 csrc = lsrc * vec3(0.299, 0.587, 0.114);\t        \t        float lum = csrc.r + csrc.g + csrc.b;\t        \t        csrc /= vec3(lum + 0.00001);\t        \t        return vec3(lum, csrc.rb);        }                vec3 luv2rgb(vec3 luv){\t        float lum = luv.x;\t        \t        vec3 csrc;\t        \t        csrc.rb = luv.yz;\t        \t        csrc.g = 1.0 - csrc.r - csrc.b;\t        \t        csrc *= vec3(lum + 0.00001);\t        \t        vec3 lsrc = csrc * vec3(1.0 / 0.299, 1.0 / 0.587, 1.0 / 0.114);\t        \t        lsrc = color_limite(lsrc, lum);\t        \t        return min(lsrc * 12.82, pow(lsrc, vec3(1.0 / 2.4)) * vec3(1.055) - vec3(0.055));        }                void main()\t    {            vec4 src = texture2D(inputImageTexture, textureCoordinate);            \t\t    vec3 luv = rgb2luv(src.rgb);            \t\t    vec2 satv = luv.yz - vec2(0.299, 0.114);            \t\t    float sat = sqrt(dot(satv, satv)) * luv.x;            \t\t    vec3 chrome_fac = texture2D(chrome, vec2(luv.y, luv.z)).rgb;            \t\t    {                float lum = luv.x;                \t\t\t    float fac = chrome_fac.b - 0.5;                \t\t\t    float dlum = fac > 0.0 ?\t\t\t\t    1.0 - lum - (1.41421 / 1.41421) + sqrt(1.0 - 1.4121*1.41421 + (2.0*1.41421)*lum*1.41421 + 0.5*1.41421*1.41421):\t\t\t\t    1.0 - lum + (1.41421 / 1.41421) - sqrt(1.0 + 1.41421*1.41421 - (2.0*1.41421)*lum*1.41421 + 0.5*1.41421*1.41421);                \t\t\t    fac = clamp(abs(fac*2.0)*sat*15.0, 0.0, 1.0);\t\t\t    lum = mix(lum, dlum, fac);\t\t\t    lum = clamp(lum, 0.0, 1.0);                \t\t\t    luv.x = lum;\t\t    }            \t\t    luv.yz = chrome_fac.rg;            \t\t    src.rgb = luv2rgb(luv);            \t\t    gl_FragColor = src;\t    }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){this.init(t),this.get_chrome(),this.m_shader||(this.m_shader=new y(null,this.m_s_fshChromeHSLAdjustProc,this.m_context.context()));var i=new w(this.m_context.context(),r,this.m_shader);i.shader_texture("inputImageTexture",e.current());var s=0;s||(s=this.m_context.create_new_texture(256,256,!0)),i.shader_texture("chrome",s);for(var a=[],o=0;o<256;++o)for(var n=0;n<256;++n){for(var _=0;_<3;++_)a.push(this.m_chrome[o][n][_]>>7);a.push(135)}var m=this.m_context.context();m.texSubImage2D(this.m_context.context().TEXTURE_2D,0,0,0,256,256,m.RGBA,m.UNSIGNED_BYTE,new Uint8Array(a)),i.draw_to(e.new_temporary());var h=this.m_context.context().getError();if(h)throw new Error("HueAlphaAdjust: "+h);e.push_to_current()},t.prototype.catch=function(t){throw new Error("HueAlphaAdjust process "+t)},t.prototype.get_chrome=function(){for(var t=0;t<256;++t)for(var e=0;e<256;++e){0==t&&199==e&&(e+=1,e-=1);var r=64+(e<<7),i=64+(t<<7),s=(r-=this.RLUM)/32768,a=(i-=this.BLUM)/32768,o=Math.atan2(s,a);o=o>0?o:o+2*this.M_PI;var n=this.get_fac(this.m_angleArray,this.m_intensityArray[0],o);this.m_chrome[t][e][2]=Math.floor(32768*(.5*n+.5)+.5),n=this.get_fac(this.m_angleArray,this.m_intensityArray[1],o);var _=this.get_sat(r,i),m=Math.floor(4096*(n+1)+.5);m>4096&&(m=8192-m+((65536-_)*(m-4096)>>15)),r=this.round_shift(12,r*m),i=this.round_shift(12,i*m),_=this.get_sat(r,i),n=this.get_hue_fac(this.m_angleArray,this.m_intensityArray[2],o);var h=Math.floor(32768*Math.cos(n)+.5),c=Math.floor(32768*Math.sin(n)+.5),l=Math.floor(32768*-Math.sin(n)+.5),u=Math.floor(32768*Math.cos(n)+.5);_=Math.min(_,32752);var f=this.round_shift(15,r*h+i*c),p=this.round_shift(15,r*l+i*u);r=f,i=p,i=Math.max(Math.min(29864,i),-29864);var d=Math.floor(2048.5),g=this.get_sat(r,i);g>>1>(_=this.round_shift(12,g*d+_*(4096-d)))&&(_=g>>1),_=Math.min(_,32752),m=Math.floor(4096*_/g+.5),m=Math.min(m,8192),r=this.round_shift(12,r*m),i=this.round_shift(12,i*m),r+=this.RLUM,i+=this.BLUM,this.m_chrome[t][e][0]=r,this.m_chrome[t][e][1]=i}},t.prototype.round_shift=function(t,e){return(e+=1<<t-1)>>t},t.prototype.get_hue_fac=function(t,e,r){for(var i,s,a=0,o=0;o<8&&!(r<t[o]);++o);0==o?(a=7,i=t[7]-2*this.M_PI,s=t[0]):8==o?(o=0,a=7,i=t[7],s=t[0]+2*this.M_PI):(a=o-1,s=t[o],i=t[a]);var n,_,m=s-i,h=(r-i)/m,c=1-h,l=e[a]*c+e[o]*h;return l<0?(n=0!=a?t[a]-t[a-1]:t[0]+2*this.M_PI-t[7],_=m):(_=7!=o?t[o+1]-t[o]:t[0]+2*this.M_PI-t[7],n=m),l*=h*_+c*n},t.prototype.get_fac=function(t,e,r){for(var i=0,s=0,a=0,o=0;s<8&&!(r<t[s]);++s);0==s?(i=7,a=t[7]-2*this.M_PI,o=t[0]):8==s?(s=0,i=7,a=t[7],o=t[0]+2*this.M_PI):(i=s-1,o=t[s],a=t[i]);var n=(r-a)/(o-a),_=1-n;return e[i]*_+e[s]*n},t.prototype.get_sat=function(t,e){var r=t*Math.ceil(Math.floor(134217728)/(3-this.RLUM))>>12,i=e*Math.ceil(Math.floor(268435456)/(3-this.BLUM))>>13,s=(t+e)*Math.floor(Math.floor(33554432)/(this.GLUM-3))>>10;return Math.max(Math.max(r,i),s)},t.prototype.init=function(t){for(var e=["brightness","saturation","hue"],r=0;r<3;++r){t.assume_symbol(e[r]);var i=[];t.assume_symbol("red"),i[2]=t.fetch_float(-1,1),t.assume_symbol("orange"),i[3]=t.fetch_float(-1,1),t.assume_symbol("yellow"),i[4]=t.fetch_float(-1,1),t.assume_symbol("green"),i[5]=t.fetch_float(-1,1),t.assume_symbol("lightGreen"),i[6]=t.fetch_float(-1,1),t.assume_symbol("blue"),i[7]=t.fetch_float(-1,1),t.assume_symbol("purple"),i[0]=t.fetch_float(-1,1),t.assume_symbol("magenta"),i[1]=t.fetch_float(-1,1),this.m_intensityArray[r]=i;this.m_angleArray[0]=this.get_color_angle([235,0,254]);this.m_angleArray[1]=this.get_color_angle([255,0,165]);this.m_angleArray[2]=this.get_color_angle([255,0,92]);this.m_angleArray[3]=this.get_color_angle([255,141,0]);this.m_angleArray[4]=this.get_color_angle([254,206,0]);this.m_angleArray[5]=this.get_color_angle([131,254,0]);this.m_angleArray[6]=this.get_color_angle([0,255,223]);this.m_angleArray[7]=this.get_color_angle([0,165,255])}for(r=0;r<256;r++){for(var s=new Array(256),a=0;a<256;a++)s[a]=[0,0,0];this.m_chrome[r]=s}},t.prototype.get_color_angle=function(t){var e=t[0];e=this.encode(e),e*=.299;var r=t[1];r=this.encode(r),r*=.587;var i=t[2];i=this.encode(i);var s=1/(e+r+(i*=.114)+.00256);r*=s;var a=(e*=s)-.299,o=(i*=s)-.114;return Math.atan2(a,o)>0?Math.atan2(a,o):Math.atan2(a,o)+2*this.M_PI},t.prototype.encode=function(t){var e=(t+.5)*(1/256);return e=e<.04045?e/12.82:Math.pow((e+.055)/1.055,2.4),Math.floor(256*e+.5)},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null),this.m_chrome&&(this.m_chrome=[])},t.parcerName="hslAdjust",t}(),Xr=function(t){function e(e){var r=t.call(this,e)||this;return r.mid_tone=0,r.l_red=0,r.l_blue=0,r.d_red=0,r.d_blue=0,r.m_red=0,r.m_blue=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float d_red;                uniform float d_blue;                uniform float l_red;                uniform float l_blue;                uniform float m_red;                uniform float m_blue;                uniform float mid_tone;                                vec3 color_limite(vec3 src,float lum)                {                    lum *= 0.5;                        vec3 vl = vec3(lum);                        vec3 vc = src - vl;                        vec3 fac = min((vec3(1.0) - vl) / max(vc, vec3(0.00001)), vec3(1.0));                        vc = vc * vec3(min(fac.r, min(fac.g, fac.b)));                        return vl + vc;                }"},e.prototype.shader_procession=function(){return"        vec3 lsrc = max(src.rgb * vec3(1.0 / 12.82),pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055),vec3(2.4)));                vec3 csrc = lsrc * vec3(0.299,0.587,0.114);        float lum = csrc.r + csrc.g + csrc.b;        csrc /= vec3(lum);        csrc.rb = csrc.rb - vec2(0.299,0.114);        float p_lum;        if(lum<mid_tone)        {            p_lum = lum/mid_tone;            p_lum = p_lum*p_lum*(3.0 - 2.0 * p_lum);            csrc.rb = (csrc.rb + vec2(d_red,d_blue)) * vec2(1.0 - p_lum) + (csrc.rb + vec2(m_red,m_blue)) * vec2(p_lum);        }        else        {            p_lum = (lum - mid_tone)/(1.0 - mid_tone);            p_lum = p_lum*p_lum*(3.0 - 2.0 * p_lum);            csrc.rb = (csrc.rb + vec2(m_red,m_blue)) * vec2(1.0 - p_lum) + (csrc.rb + vec2(l_red,l_blue)) * vec2(p_lum);        }        {            float sr,sb,sg,smax;            sr = csrc.r * (1.0 / -0.299);            sb = csrc.b * (1.0 / -0.114);            sg = (csrc.r+csrc.b) * (1.0/0.587);            smax = max(max(sr,sb),sg);            if(smax > 1.0)                csrc.rb = csrc.rb * vec2(1.0/smax);            csrc.rb = csrc.rb + vec2(0.299,0.114);        }        csrc.g = 1.0 - csrc.r - csrc.b;        csrc *= vec3(lum);        lsrc = csrc * vec3(1.0/0.299,1.0/0.587,1.0/0.114);        lsrc = color_limite(lsrc,lum);        src.rgb = min(lsrc * 12.82,pow(lsrc,vec3(1.0 / 2.4)) * vec3(1.055) - vec3(0.055));        dst = src;"},e.prototype.init=function(t,e,r){this.d_red=0,this.d_blue=0,this.l_red=0,this.l_blue=0,this.m_red=0,this.m_blue=0,this.mid_tone=.5;for(var i=["dark","light","middle","midTone",0],s=-1;-1!=(s=t.lookup_symbol(i));)switch(s){case 0:this.d_red=t.fetch_float(),this.d_blue=t.fetch_float();break;case 1:this.l_red=t.fetch_float(),this.l_blue=t.fetch_float();break;case 2:this.m_red=t.fetch_float(),this.m_blue=t.fetch_float();break;case 3:this.mid_tone=t.fetch_float()}this.d_red=3*this.d_red/1e3,this.d_blue=3*this.d_blue/1e3,this.l_red=3*this.l_red/1e3,this.l_blue=3*this.l_blue/1e3,this.m_red=3*this.m_red/1e3,this.m_blue=3*this.m_blue/1e3},e.prototype.get_name=function(){return e.parcerName},e.prototype.shader_setup=function(t){var e={};e.mid_tone=this.mid_tone,e.l_red=this.l_red,e.l_blue=this.l_blue,e.d_red=this.d_red,e.d_blue=this.d_blue,e.m_red=this.m_red,e.m_blue=this.m_blue,this.m_shader.uniforms(e)},e.parcerName="RGB",e}(ft),Hr=function(){function t(t){this.t_shader=null,this.e_shader=null,this.m_model=0,this.m_opacity=0,this.m_pointSize=0,this.m_pointStride=0,this.m_rectangle=null,this.m_width=0,this.m_height=0,this.m_mvp=new Array,this.s_vecPoints=new Array,this.r=0,this.g=0,this.b=0,this.m_context=t,this.m_str_vshPaintRotWithNorm="        attribute vec4 vPosition;        attribute vec2 vPointNorm;        uniform mat4 uMat;        uniform float pointSize;        void main()        {            gl_PointSize = pointSize;            gl_Position = (uMat * vPosition);        }",this.m_str_fshPaintRot="        uniform vec4 vColor;                void main()        {                    vec2 pos = gl_PointCoord*2.0 - 1.0;                    float dis =  sqrt(pos.x*pos.x + pos.y*pos.y);                    float a=0.0;                if(dis<0.2){                    float fac = dis/0.2;                    a = 0.64*(1.0-fac)+0.41*fac;                }                else if(dis<0.4){                        float fac = (dis-0.2) / 0.2;                        a = 0.41*(1.0-fac)+0.24*fac;                }                else if(dis<0.7){                        float fac = (dis-0.4) / 0.3;                        a = 0.24*(1.0-fac)+0.08*fac;                }                else if(dis<0.83){                        float fac = (dis-0.7) / 0.13;                        a = 0.08*(1.0-fac)+0.06*fac;                }                else if(dis<0.89){                        float fac = (dis-0.83) / 0.03;                        a = 0.06*(1.0-fac)+0.008*fac;                }                else if(dis<1.0){                        float fac = (dis-0.89) / 0.11;                        a = 0.008*(1.0-fac);                }            gl_FragColor =vColor*vec4(0.0, 0.0, 0.0, a);        }",this.m_str_fshEraserRot="        uniform vec4 vColor;                void main()        {                    vec2 pos = gl_PointCoord*2.0 - 1.0;                    float dis =  sqrt(pos.x*pos.x + pos.y*pos.y);                    float a=0.0;                    if(dis<0.89){                        float fac = (dis) / 0.89;                    a = 0.9*(1.0-fac)+0.1*fac;                    }                    else if(dis<1.0){                    float fac = (dis - 0.89) / 0.11;                    a = 0.1*(1.0 - fac);            }            gl_FragColor =vColor*vec4(0.0, 0.0, 0.0, a);        }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){try{var i=this.m_context.context();r.m_width==this.m_width&&r.m_height==this.m_height||(this.m_mvp=this.makeOrtho(0,r.m_width,0,r.m_height,-1,1),this.m_width=r.m_width,this.m_height=r.m_height),this.init(t,r.m_width,r.m_height);var s=this.m_opacity,a=this.m_pointSize;i.enable(i.BLEND),this.m_model?(i.blendEquation(i.FUNC_ADD),i.blendFuncSeparate(i.ONE,i.ONE,i.ONE,i.ONE_MINUS_SRC_ALPHA),s=2==this.m_model?10:1,a=this.m_pointSize):(i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ZERO,i.ONE_MINUS_SRC_COLOR),a=1.15*this.m_pointSize),this.t_shader||(this.t_shader=new y(this.m_str_vshPaintRotWithNorm,this.m_str_fshPaintRot,i)),this.e_shader||(this.e_shader=new y(this.m_str_vshPaintRotWithNorm,this.m_str_fshEraserRot,i)),i.bindFramebuffer(i.FRAMEBUFFER,r.m_frameBuffer),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,e.current(),0);var o=void 0;o=this.m_model?this.e_shader:this.t_shader,i.useProgram(o.m_program);var n=[],_=[];if(_[0]=r.m_width,_[1]=r.m_height,this.genInterpolationPointsAndDirections(this.s_vecPoints,n,[],_,this.m_pointStride),0==n.length)return;this.s_vecPoints=[];var m=n.length;null==i.engineVertexBuffer&&(i.engineVertexBuffer=i.createBuffer()),i.bindBuffer(i.ARRAY_BUFFER,i.engineVertexBuffer),i.bufferData(i.ARRAY_BUFFER,new Float32Array(this.vecToData(n)),i.STATIC_DRAW);var h=i.getAttribLocation(o.m_program,"vPosition");i.vertexAttribPointer(h,2,i.FLOAT,!1,0,new Float32Array(this.vecToData(n))),i.enableVertexAttribArray(h);var c={};c.uMat=this.m_mvp,c.pointSize=a,c.vColor=[this.r,this.g,this.b,s],this.m_rectangle?(c.trans=[r.m_width/this.m_rectangle.size[0],r.m_height/this.m_rectangle.size[1],-this.m_rectangle.position[0]*(r.m_width/this.m_rectangle.size[0]),-this.m_rectangle.position[1]*(r.m_height/this.m_rectangle.size[1])],i.viewport(this.m_rectangle.position[0],this.m_rectangle.position[1],this.m_rectangle.size[0],this.m_rectangle.size[1])):i.viewport(0,0,r.m_width,r.m_height),o.uniforms(c),i.drawArrays(i.POINTS,0,m),i.disable(i.BLEND);var l=i.getError();if(l)throw new Error("painter "+l)}catch(t){throw new Error("painter process: "+t)}},t.prototype.destroy=function(){this.t_shader&&(this.t_shader.destroy(),this.t_shader=null),this.e_shader&&(this.e_shader.destroy(),this.e_shader=null)},t.prototype.createRectangleObject=function(){return{position:[],size:[]}},t.prototype.genInterpolationPointsAndDirections=function(t,e,r,i,s){var a=t.length;if(a<1||s<1)throw"Invalid Parameters";if(1==a)return e.push({x:t[0].x*i[0],y:t[0].y*i[1]}),void r.push({x:0,y:0});for(var o=1;o<a;++o)for(var n={x:(t[o].x-t[o-1].x)*i[0],y:(t[o].y-t[o-1].y)*i[1]},_=Math.floor(Math.max(Math.ceil(Math.sqrt(n.x*n.x+n.y*n.y))/s,1)),m={x:n.x/_,y:n.y/_},h={x:t[o-1].x*i[0],y:t[o-1].y*i[1]},c=0;c<_;++c)e.push({x:h.x+m.x*c,y:h.y+m.y*c})},t.prototype.makeOrtho=function(t,e,r,i,s,a){var o=e-t,n=i-r,_=a-s;return[2/o,0,0,0,0,2/n,0,0,0,0,-2/_,0,-(e+t)/o,-(i+r)/n,-(a+s)/_,1]},t.prototype.vecToData=function(t){for(var e=[],r=0;r<t.length;++r)e[2*r]=t[r].x,e[2*r+1]=t[r].y;return e},t.prototype.init=function(t,e,r){this.m_rectangle=null,this.r=1,this.g=.1,this.b=.05,this.m_opacity=.1,this.m_model=0;this.m_model=t.lookup_symbol(["lucency","eraser","hardEraser","texture",0],!0);t.assume_symbol("opacity"),this.m_opacity=t.fetch_float(0,1),t.assume_symbol("pointSize"),t.test_symbol("relToWidth")?this.m_pointSize=t.fetch_float()*e:this.m_pointSize=t.fetch_float(),t.assume_symbol("pointStride"),t.test_symbol("relToWidth")?this.m_pointStride=t.fetch_float()*e:this.m_pointStride=t.fetch_float();if(t.lookup_symbol(["coordinate","realPixel",0],!0))for(;t.test_symbol("point");){var i=t.fetch_float()/e,s=t.fetch_float()/r;this.s_vecPoints.push({x:i,y:s})}else for(;t.test_symbol("point");)i=t.fetch_float(),s=t.fetch_float(),this.s_vecPoints.push({x:i,y:s});t.test_symbol("rectangle")&&(this.m_rectangle=this.createRectangleObject(),this.m_rectangle.position[0]=t.fetch_float(),this.m_rectangle.position[1]=t.fetch_float(),this.m_rectangle.size[0]=t.fetch_float(),this.m_rectangle.size[1]=t.fetch_float())},t.parcerName="painter",t}(),Vr=function(t){function e(e){var r=t.call(this)||this;return r.m_factor=0,r.m_channel=0,r.m_m=[0,0,0,0],r.m_context=e,r.m_shader=null,r.m_s_fshFragDenoiseDownResizeProc="        precision highp float;\t\tvarying vec2 textureCoordinate;\t    uniform sampler2D inputImageTexture;\t    uniform vec4 m;\t    uniform vec2 sft;\t    uniform vec4 channel;        \t    vec4 get_sample(vec2 cd)\t    {\t\t    return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);\t    }        \t    void main()\t    {            vec4 src = get_sample(vec2(-3.0/8.0,-3.0/8.0));\t\t    src += get_sample(vec2( 3.0/8.0,-3.0/8.0));\t\t    src += get_sample(vec2(-3.0/8.0, 3.0/8.0));            src += get_sample(vec2( 3.0/8.0, 3.0/8.0));                        float slum = dot(src,channel)*0.25;                        slum = max(slum * 1.0 / 12.82, pow((slum + 0.055) * (1.0 / 1.055), 2.4));            \t\t    vec2 dlum = vec2(slum, slum * slum) * 256.0;            \t\t    dlum = clamp(dlum, 0.0, 255.996);            \t\t    vec2 fdlum = floor(dlum);            \t\t    src.x = (dlum.x - fdlum.x)*(256.0 / 255.0);\t\t    src.y = fdlum.x / 255.0;            \t\t    src.z = (dlum.y - fdlum.y)*(256.0 / 255.0);\t\t    src.w = fdlum.y / 255.0;            \t\t    gl_FragColor = src;\t    }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragDenoiseDownResizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e);var o={};o.m=this.m_m,o.sft=[1/r,1/i];var n=[0,0,0,0];this.set_channel(n,this.m_channel),o.channel=n,a.m_shader.uniforms(o),a.draw_to(t);var _=this.m_context.context().getError();if(_)throw new Error("DenoiseDownResizeProc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e.prototype.set_channel=function(t,e){t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[e]=1},e}(Jt),Wr=function(t){function e(e){var r=t.call(this)||this;return r.m_factor=0,r.m_channel=0,r.m_m=[0,0,0,0],r.m_context=e,r.m_shader=null,r.m_s_fshDenoiseUpResizeProc="\t\tvarying vec2 textureCoordinate;\t    uniform sampler2D inputImageTexture;\t    uniform sampler2D subImageTexture;\t    uniform vec4 m;\t    uniform vec4 channel;        \t    void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate);                        float slum = dot(src,channel);            \t\t    slum = max(slum * 1.0 / 12.82, pow((slum + 0.055) * (1.0 / 1.055), 2.4));            \t\t    vec4 sub = texture2D(subImageTexture, textureCoordinate * m.xy + m.zw)* vec4(255.0 / 65536.0, 255.0 / 256.0, 255.0 / 65536.0, 255.0 / 256.0);            \t\t    float a = sub.y + sub.x;\t\t    float b = sub.w + sub.z;            \t\t    slum = a *  slum + b;            \t\t    slum = min(slum * 12.82, pow(slum, 1.0 / 2.4) * 1.055 - 0.055);            \t\t    gl_FragColor = src * (1.0 - channel) + slum * channel;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshDenoiseUpResizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTexture",e[1]);var o={};o.m=this.m_m;var n=[0,0,0,0];this.set_channel(n,this.m_channel),o.channel=n,a.m_shader.uniforms(o),a.draw_to(t);var _=this.m_context.context().getError();if(_)throw new Error("DenoiseUpResizeProc: "+_)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e.prototype.set_channel=function(t,e){t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[e]=1},e}(Jt),Yr=function(t){function e(e){var r=t.call(this)||this;return r.m_factor=0,r.m_channel=0,r.m_m=[0,0,0,0],r.m_color=0,r.m_luminance=0,r.m_context=e,r.m_shader=null,r.m_s_fshFragDenoiseMix="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTextureR;        uniform sampler2D inputImageTextureD;        uniform float color;        uniform float luminance;                void main()        {            vec4 src = texture2D(inputImageTextureR, textureCoordinate);                        vec3 lsrc = max(src.rgb * (1.0 / 12.82), pow((src.rgb + 0.055) * (1.0 / 1.055), vec3(2.4)));                        float slum = dot(lsrc, vec3(0.299, 0.587, 0.114));                        lsrc /= slum + 0.00001;                        vec4 dst = texture2D(inputImageTextureD, textureCoordinate);                        vec3 ldst = max(dst.rgb * (1.0 / 12.82), pow((dst.rgb + 0.055) * (1.0 / 1.055), vec3(2.4)));                        float dlum = dot(ldst, vec3(0.299, 0.587, 0.114));                        ldst /= dlum + 0.00001;                        lsrc = mix(lsrc, ldst, color);            slum = mix(slum, dlum, luminance);                        lsrc *= slum;                        src.rgb = min(lsrc * 12.82, pow(lsrc, vec3(1.0 / 2.4)) * 1.055 - 0.055);                        gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragDenoiseMix,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTextureR",e[0]),a.shader_texture("inputImageTextureD",e[1]);var o={};o.color=this.m_color,o.luminance=this.m_luminance,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("DenoiseMixProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e.prototype.set_channel=function(t,e){t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[e]=1},e}(Jt),Jr=function(){function t(t){this.m_shader=null,this.m_fast=!1,this.m_radius=0,this.m_esp=0,this.m_luminance=0,this.m_color=0,this.m_width=0,this.m_height=0,this.m_pyramid_gpu=null,this.m_context=t,this.m_factor=new le,this.m_down_resize_filter=new Vr(this.m_context),this.m_up_resize_filter=new Wr(this.m_context),this.m_mix_filter=new Yr(this.m_context),this.m_fator_filter=new mr(this.m_context),this.m_down_filter=new nr(this.m_context),this.m_up_filter=new hr(this.m_context)}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.init=function(t){this.m_fast=t.test_symbol("fast"),t.assume_symbol("radius"),this.m_radius=t.fetch_float(1e-4,16),t.assume_symbol("esp"),this.m_esp=.01*t.fetch_float(.001,100),t.assume_symbol("luminance"),this.m_luminance=.01*t.fetch_float(0,100),t.assume_symbol("color"),this.m_color=.01*t.fetch_float(0,100)},t.prototype.inner_process=function(t,e,r,i,s,a,o){if(this.init(t),!(this.m_color<.01&&this.m_luminance<.01)){var n,_,m,h=this.m_color<.99||this.m_luminance<.99;if(n=r.current(),h&&(m=r.new_temporary(),this.m_context.copy_texture(m,n,s,a,o)),_=i?n:r.new_temporary(),this.process_channel(e,_,n,s,a,0,o),this.process_channel(e,n,_,s,a,1,o),this.process_channel(e,_,n,s,a,2,o),h){this.m_mix_filter.m_color=this.m_color,this.m_mix_filter.m_luminance=this.m_luminance;var c=new Array(2);c[0]=m,c[1]=_,this.m_mix_filter.process(n,c,s,a,o)}else i||r.push_to_current()}},t.prototype.process=function(t,e,r){try{this.size_change(r.m_width,r.m_height),this.m_pyramid_gpu||(this.m_pyramid_gpu=new Ce(this.m_context,this.m_factor,4099,!0,!1,2)),this.inner_process(t,this.m_pyramid_gpu,e,!1,r.m_width,r.m_height,r.m_frameBuffer);var i=this.m_context.context().getError();if(i)throw new Error("Denoise : "+i)}catch(t){throw new Error("Denoise process "+t)}},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},t.prototype.process_channel=function(t,e,r,i,s,a,o){this.m_down_resize_filter.m_channel=a,t.load_from(this.m_down_resize_filter,r,o),this.draw_textures(t,o),this.m_fator_filter.m_esp=this.m_esp,this.m_fator_filter.process(t.m_images[t.m_images.length-1][0],t.m_images[t.m_images.length-1][1],t.m_size[t.m_size.length-1].width,t.m_size[t.m_size.length-1].height,o),this.draw_textures(t,o),this.m_factor.get_rev_trans(this.m_up_resize_filter.m_m),this.m_up_resize_filter.m_channel=a;var n=new Array(2);n[0]=r,n[1]=t.m_images[t.m_images.length-1][1],this.m_up_resize_filter.process(e,n,i,s,o)},t.prototype.draw_textures=function(t,e){t.draw_downward(this.m_down_filter,e),t.map_create(1);for(var r=new Array(t.m_images.length),i=0;i<r.length;++i){var s=Math.max(t.m_size[i].width,t.m_size[i].height)/16*this.m_radius;r[i]=Math.exp(-s*s)}for(i=1;i<t.m_images.length;++i)if(this.m_up_filter.m_factor=r[i],t.m_base_level==i){var a=[t.m_base_images[0],t.m_images[i-1][0],t.m_images[i-1][1]];this.m_up_filter.process(t.m_base_images[1],a,t.m_base_size,t.m_base_size,e),t.base_move_up(1,e)}else a=[t.m_images[i][0],t.m_images[i-1][0],t.m_images[i-1][1]],1==i&&this.m_context.copy_texture(t.m_images[i-1][1],t.m_images[i-1][0],t.m_size[i-1].width,t.m_size[i-1].height,e),this.m_up_filter.process(t.m_images[i][1],a,t.m_size[i].width,t.m_size[i].height,e)},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.cal_embed(this.m_factor,this.m_width,this.m_height),this.clear())},t.prototype.cal_embed=function(t,e,r){var i,s,a,o;r<=0||e<=0||(e>r?(i=32,s=Math.floor(32*r/e),32*r%e&&++s,++s,a=32,o=32*r/e):(i=Math.floor(32*e/r),s=32,32*e%r&&++i,++i,a=32*e/r,o=32),t.m_src_width=e,t.m_src_height=r,t.m_dst_width=i,t.m_dst_height=s,t.m_x_start=0,t.m_y_start=0,t.m_emb_width=a,t.m_emb_height=o)},t.prototype.clear=function(){this.m_pyramid_gpu&&(this.m_pyramid_gpu.destroy(),this.m_pyramid_gpu=null)},t.parcerName="denoise",t}(),Qr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_s_fshFragHazeRemoveMap1Proc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;                float filter_window = 0.01;        vec3 minimumFilter(sampler2D tex, vec2 uv)        {            float wsize = filter_window / 28.0;            vec3 res = vec3(1000.0, 1000.0, 1000.0);                        for (float i = -14.0; i <= 14.0; i++) {                                vec2 coord_sample = uv + vec2(float(i), 0.0)*wsize;                                vec3 tmp = texture2D(tex, coord_sample).rgb;                                res = min(res, tmp);            }                        return res;        }                void main() {            vec3 res_t = minimumFilter(inputImageTexture, textureCoordinate);            gl_FragColor = vec4(res_t, 1.0);        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragHazeRemoveMap1Proc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.draw_to(t);var o=this.m_context.context().getError();if(o)throw new Error("HazeRemoveMap1Proc: "+o)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Kr=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_s_fshFragHazeRemoveMap2Proc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;                float filter_window = 0.01;        float minimumFilter(sampler2D tex, vec2 uv)        {            float wsize = filter_window / 28.0;            vec3 res = vec3(1000.0, 1000.0, 1000.0);                        for (float j = -14.0; j <= 14.0; j++) {                                vec2 coord_sample = uv + vec2(0.0, float(j))*wsize;                vec3 tmp = texture2D(tex, coord_sample).rgb;                res = min(res, tmp);                            }            return min(min(res[0], res[1]), res[2]);        }                void main() {                        vec3 base = texture2D(inputImageTexture, textureCoordinate).rgb;            float res_t = 1.0 - 0.95*minimumFilter(inputImageTexture, textureCoordinate);            res_t = max(0.0, min(1.0, res_t));            gl_FragColor = vec4(vec3(res_t, res_t, res_t), 1.0);        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragHazeRemoveMap2Proc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.draw_to(t);var o=this.m_context.context().getError();if(o)throw new Error("HazeRemoveMap2Proc: "+o)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),Zr=function(t){function e(e){var r=t.call(this)||this;return r.m_m=[0,0,0,0],r.filter_num=0,r.m_context=e,r.m_shader=[0,0,0,0,0,0,0,0],r.m_s_fshFragHazeRemoveDownsize2Proc="\t\tvarying vec2 textureCoordinate;\t    uniform sampler2D inputImageTexture;\t    uniform sampler2D guidanceImage;\t    uniform vec4 m;\t    uniform vec2 sft;        \t    vec4 get_sample(vec2 cd)\t    {\t\t    return texture2D(guidanceImage, textureCoordinate * m.xy + m.zw + sft * cd);\t    }        \t    void main()\t    {\t\t    vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));            \t\t    float res = texture2D(inputImageTexture, textureCoordinate).x;            \t\t    float dlum;            \t\t    dlum = (src.r * 0.299 + src.g * 0.587 + src.b * 0.114)*res;\t\t    dlum = (256.0*dlum)*0.25;            \t\t    float fdlum = floor(dlum);            \t\t    src.x = dlum - fdlum;\t\t    src.y = fdlum;            \t\t    float u = res*256.0;\t\t    float fu = floor(u);            \t\t    src.z = u - fu;\t\t    src.w = fu;            \t\t    src *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);            \t\t    gl_FragColor = src;\t    }",r.m_s_fshFragHazeRemoveDownsize2_1Proc="\t\tvarying vec2 textureCoordinate;\t    uniform sampler2D inputImageTexture;\t    uniform sampler2D guidanceImage;\t    uniform vec4 m;\t    uniform vec2 sft;        \t    vec4 get_sample(vec2 cd)\t    {\t\t    return texture2D(guidanceImage, textureCoordinate * m.xy + m.zw + sft * cd);\t    }        \t    void main()\t    {\t\t    vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));                        float res = texture2D(inputImageTexture, textureCoordinate).x;            \t\t    vec3 src_c = src.xyz*256.0*0.25;            \t\t    src_c = clamp(src_c, 0.0, 255.996);            \t\t    vec3 fsrc_c = floor(src_c);            \t\t    vec4 dst;            \t\t    dst.x = (src_c.x - fsrc_c.x)*(256.0 / 255.0);\t\t    dst.y = fsrc_c.x / 255.0;            \t\t    dst.z = (src_c.y - fsrc_c.y)*(256.0 / 255.0);            dst.w = fsrc_c.y / 255.0;            \t\t    gl_FragColor = dst;        }",r.m_s_fshFragHazeRemoveDownsize2_2Proc="\t\tvarying vec2 textureCoordinate;\t    uniform sampler2D inputImageTexture;\t    uniform sampler2D guidanceImage;\t    uniform vec4 m;\t    uniform vec2 sft;        \t    vec4 get_sample(vec2 cd)\t    {\t\t    return texture2D(guidanceImage, textureCoordinate * m.xy + m.zw + sft * cd);\t    }        \t    void main()\t    {\t\t    vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));            \t\t    float res = texture2D(inputImageTexture, textureCoordinate).x*256.0;            \t\t    res = clamp(res, 0.0, 255.996);            \t\t    float fres = floor(res);            \t\t    vec3 src_c = src.xyz*256.0*0.25;            \t\t    src_c = clamp(src_c, 0.0, 255.996);            \t\t    vec3 fsrc_c = floor(src_c);                        vec4 dst;            \t\t    dst.x = (src_c.z - fsrc_c.z)*(256.0 / 255.0);\t\t    dst.y = fsrc_c.z / 255.0;            \t\t    dst.z = (res - fres)*(256.0 / 255.0);\t\t    dst.w = fres / 255.0;            \t\t    gl_FragColor = dst;        }",r.m_s_fshFragHazeRemoveDownsize2_3Proc="\t\tvarying vec2 textureCoordinate;\t    uniform sampler2D inputImageTexture;\t    uniform sampler2D guidanceImage;\t    uniform vec4 m;\t    uniform vec2 sft;        \t    vec4 get_sample(vec2 cd)\t    {\t\t    return texture2D(guidanceImage, textureCoordinate * m.xy + m.zw + sft * cd);\t    }        \t    void main()\t    {\t\t    vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));            \t\t    float res = texture2D(inputImageTexture, textureCoordinate).x;            \t\t    vec3 ip_c = src.xyz*res*256.0*0.25;            \t\t    ip_c = clamp(ip_c, 0.0, 255.996);            \t\t    vec3 fip_c = floor(ip_c);            \t\t    vec4 dst;            \t\t    dst.x = (ip_c.x - fip_c.x)*(256.0 / 255.0);\t\t    dst.y = fip_c.x / 255.0;            \t\t    dst.z = (ip_c.y - fip_c.y)*(256.0 / 255.0);\t\t    dst.w = fip_c.y / 255.0;                        gl_FragColor = dst;        }",r.m_s_fshFragHazeRemoveDownsize2_4Proc="\t\tvarying vec2 textureCoordinate;\t    uniform sampler2D inputImageTexture;\t    uniform sampler2D guidanceImage;\t    uniform vec4 m;\t    uniform vec2 sft;        \t    vec4 get_sample(vec2 cd)\t    {\t\t    return texture2D(guidanceImage, textureCoordinate * m.xy + m.zw + sft * cd);\t    }        \t    void main()\t    {\t\t    vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));            \t\t    float res = texture2D(inputImageTexture, textureCoordinate).x;            \t\t    vec3 ip_c = src.xyz*res*256.0*0.25;            \t\t    ip_c = clamp(ip_c, 0.0, 255.996);            \t    \tvec3 fip_c = floor(ip_c);            \t\t    vec4 dst;            \t\t    dst.x = (ip_c.z - fip_c.z)*(256.0 / 255.0);\t\t    dst.y = fip_c.z / 255.0;            \t\t    dst.z = 0.0;            dst.w = 0.0;            \t\t    gl_FragColor = dst;        }",r.m_s_fshFragHazeRemoveDownsize2_5Proc="\t\tvarying vec2 textureCoordinate;\t    uniform sampler2D guidanceImage;\t    uniform vec4 m;\t    uniform vec2 sft;        \t    vec4 get_sample(vec2 cd)\t    {\t\t    return texture2D(guidanceImage, textureCoordinate * m.xy + m.zw + sft * cd);\t    }        \t    void main()\t    {\t\t    vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));            \t\t    vec2 rggb = vec2(src.x*src.y*256.0*0.0625, src.y*src.z*256.0*0.0625);            \t\t    rggb = clamp(rggb, 0.0, 255.996);            \t\t    vec2 frggb = floor(rggb);            \t\t    vec4 dst;            \t\t    dst.x = (rggb.x - frggb.x)*(256.0 / 255.0);\t\t    dst.y = frggb.x / 255.0;            \t\t    dst.z = (rggb.y - frggb.y)*(256.0 / 255.0);            dst.w = frggb.y / 255.0;            \t\t    gl_FragColor = dst;\t    }",r.m_s_fshFragHazeRemoveDownsize2_6Proc="\t\tvarying vec2 textureCoordinate;\t    uniform sampler2D guidanceImage;\t    uniform vec4 m;\t    uniform vec2 sft;        \t    vec4 get_sample(vec2 cd)\t    {\t\t    return texture2D(guidanceImage, textureCoordinate * m.xy + m.zw + sft * cd);\t    }        \t    void main()\t    {\t\t    vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));            \t\t    float rb = src.x*src.z*256.0*0.0625;            \t\t    rb = clamp(rb, 0.0, 255.996);            \t\t    float frb = floor(rb);            \t\t    float r2 = src.x*src.x*256.0*0.0625;            \t\t    float fr2 = floor(r2);            \t\t    vec4 dst;            \t\t    dst.x = (rb - frb)*(256.0 / 255.0);\t\t    dst.y = frb / 255.0;            \t\t    dst.z = (r2 - fr2)*(256.0 / 255.0);            dst.w = fr2 / 255.0;            \t\t    gl_FragColor = dst;\t    }",r.m_s_fshFragHazeRemoveDownsize2_7Proc="\t\tvarying vec2 textureCoordinate;\t    uniform sampler2D guidanceImage;\t    uniform vec4 m;\t    uniform vec2 sft;        \t    vec4 get_sample(vec2 cd)\t    {\t    \treturn texture2D(guidanceImage, textureCoordinate * m.xy + m.zw + sft * cd);\t    }        \t    void main()\t    {\t    \tvec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));            src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));\t\t    src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));            \t\t    vec2 g2b2 = vec2(src.y*src.y*256.0*0.0625, src.z*src.z*256.0*0.0625);            \t\t    g2b2 = clamp(g2b2, 0.0, 255.996);            \t\t    vec2 fg2b2 = floor(g2b2);            \t\t    vec4 dst;            \t\t    dst.x = (g2b2.x - fg2b2.x)*(256.0 / 255.0);\t\t    dst.y = fg2b2.x / 255.0;            \t\t    dst.z = (g2b2.y - fg2b2.y)*(256.0 / 255.0);\t\t    dst.w = fg2b2.y / 255.0;            \t\t    gl_FragColor = dst;\t\t}",r.shader_list=[r.m_s_fshFragHazeRemoveDownsize2Proc,r.m_s_fshFragHazeRemoveDownsize2_1Proc,r.m_s_fshFragHazeRemoveDownsize2_2Proc,r.m_s_fshFragHazeRemoveDownsize2_3Proc,r.m_s_fshFragHazeRemoveDownsize2_4Proc,r.m_s_fshFragHazeRemoveDownsize2_5Proc,r.m_s_fshFragHazeRemoveDownsize2_6Proc,r.m_s_fshFragHazeRemoveDownsize2_7Proc],r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader[this.filter_num]||(this.m_shader[this.filter_num]=new y(null,this.shader_list[this.filter_num],this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader[this.filter_num],r,i,s);this.filter_num<5&&a.shader_texture("inputImageTexture",e[0]),a.shader_texture("guidanceImage",e[1]);var o={};o.m=this.m_m,o.sft=[1/r,1/i],a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("HazeRemoveDownsize2Proc: "+n)},e.prototype.destroy=function(){this.m_shader[this.filter_num]&&(this.m_shader[this.filter_num].destroy(),this.m_shader[this.filter_num]=null)},e.prototype.init=function(){},e}(Jt),$r=function(t){function e(e){var r=t.call(this)||this;return r.m_atFlag=!1,r.m_atLight=0,r.m_amount=0,r.m_contrast=0,r.m_context=e,r.m_shader=null,r.m_s_fshFragHazeDownsizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;        uniform vec2 sft;                vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);        }                void main()        {            vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));            src = min(get_sample(vec2(1.0 / 4.0, -1.0 / 4.0)),src);            src = min(get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0)),src);            src = min(get_sample(vec2(1.0 / 4.0, 1.0 / 4.0)),src);                        gl_FragColor = src;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragHazeDownsizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e);var o={};o.m=this.m_m,o.sft=[1/r,1/i],a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("HazeRemoveDownsizeProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),ti=function(t){function e(e){var r=t.call(this)||this;return r.m_esp=0,r.filter_num=0,r.m_context=e,r.m_shader=[0,0,0],r.m_s_fshFragNewStructureSharpenFator="        varying vec2 textureCoordinate;        uniform sampler2D IPTexture;        uniform sampler2D lumTexture;        uniform float esp;                void main()        {            vec4 dst = texture2D(lumTexture, textureCoordinate)*vec4((255.0 / 256.0), 255.0, (255.0 / 256.0), 255.0);                        vec4 dst2 = texture2D(IPTexture,textureCoordinate)*vec4((255.0 / 256.0), 255.0, (255.0 / 256.0), 255.0);                        vec2 lum = dst.yw + dst.xz;            vec2 ip = dst2.yw + dst2.xz;                        float var = lum.y * 256.0 - lum.x * lum.x;                        var = max(var, 0.0);                        float mo = (ip.x * 256.0 - lum.x * ip.y);                        float a = mo /(var + esp * (65536.0 * 4.0));                        float b = ip.y - a*lum.x;                        vec2 dlum = vec2((a+32.0)*4.0, b);                        vec2 fdlum = floor(dlum);                        dst.xz = dlum - fdlum;            dst.yw = fdlum;                        dst *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);                        gl_FragColor = dst;        }",r.m_s_fshFragNewStructureSharpenFator2="        varying vec2 textureCoordinate;        uniform sampler2D rgTexture;        uniform sampler2D bpTexture;        uniform sampler2D ipripgTexture;        uniform sampler2D ipbTexture;        uniform sampler2D rggbTexture;        uniform sampler2D rbr2Texture;        uniform sampler2D g2b2Texture;                uniform float esp;                void main()        {            vec4 rgDst = texture2D(rgTexture, textureCoordinate);                        vec4 bpDst = texture2D(bpTexture, textureCoordinate);                        vec4 prpgDst = texture2D(ipripgTexture, textureCoordinate);                        vec4 pbDst = texture2D(ipbTexture, textureCoordinate);                        vec4 rggbDst = texture2D(rggbTexture, textureCoordinate);                        vec4 rbr2Dst = texture2D(rbr2Texture, textureCoordinate);                        vec4 g2b2Dst = texture2D(g2b2Texture, textureCoordinate);                        float tr = rgDst.x*(255.0 / 256.0) + rgDst.y*255.0;            float tg = rgDst.z*(255.0 / 256.0) + rgDst.w*255.0;            float tb = bpDst.x*(255.0 / 256.0) + bpDst.y*255.0;                        float trg = rggbDst.x*(255.0 / 256.0) + rggbDst.y*255.0;            float trb = rbr2Dst.x*(255.0 / 256.0) + rbr2Dst.y*255.0;            float tgb = rggbDst.z*(255.0 / 256.0) + rggbDst.w*255.0;                        float tr2 = rbr2Dst.z*(255.0 / 256.0) + rbr2Dst.w*255.0;            float tg2 = g2b2Dst.x*(255.0 / 256.0) + g2b2Dst.y*255.0;            float tb2 = g2b2Dst.z*(255.0 / 256.0) + g2b2Dst.w*255.0;                        float stp = bpDst.z*(255.0 / 256.0) + bpDst.w*255.0;            float tpr = prpgDst.x*(255.0 / 256.0) + prpgDst.y*255.0;            float tpg = prpgDst.z*(255.0 / 256.0) + prpgDst.w*255.0;            float tpb = pbDst.x*(255.0 / 256.0) + pbDst.y*255.0;                        float brg = (trg * 256.0 - tr * tg);            float brb = (trb * 256.0 - tr * tb);            float bgb = (tgb * 256.0 - tg * tb);                        float br2 = (tr2 * 256.0 - tr * tr + esp*65536.0);            float bg2 = (tg2 * 256.0 - tg * tg + esp*65536.0);            float bb2 = (tb2 * 256.0 - tb * tb + esp*65536.0);                        float ur = (tpr * 256.0 - stp * tr);            float ug = (tpg * 256.0 - stp * tg);            float ub = (tpb * 256.0 - stp * tb);                        float bs = br2*bgb*bgb + bg2*brb*brb + bb2*brg*brg - 2.0 * bgb*brb*brg - bb2*bg2*br2;                        float ar = (bgb*bgb - bb2*bg2)*ur + (bb2*brg - bgb*brb)*ug + (bg2*brb - bgb*brg)*ub;            float ag = (bb2*brg - bgb*brb)*ur + (brb*brb - bb2*br2)*ug + (bgb*br2 - brb*brg)*ub;                        bs = 1.0 / bs;                        bs = min(0.0, bs);                        ar *= bs;            ag *= bs;                        vec2 arag = vec2((ar + 64.0)*2.0, (ag + 64.0)*2.0);                        vec2 farag = floor(arag);                        vec4 dst;            dst.x = (arag.x - farag.x)*(256.0 / 255.0);            dst.y = farag.x / 255.0;            dst.z = (arag.y - farag.y)*(256.0 / 255.0);            dst.w = farag.y / 255.0;                        gl_FragColor = dst;        }",r.m_s_fshFragNewStructureSharpenFator3="        varying vec2 textureCoordinate;        uniform sampler2D rgTexture;        uniform sampler2D bpTexture;        uniform sampler2D ipripgTexture;        uniform sampler2D ipbTexture;        uniform sampler2D rggbTexture;        uniform sampler2D rbr2Texture;        uniform sampler2D g2b2Texture;                uniform float esp;        void main()        {            vec4 rgDst = texture2D(rgTexture, textureCoordinate);                        vec4 bpDst = texture2D(bpTexture, textureCoordinate);                        vec4 prpgDst = texture2D(ipripgTexture, textureCoordinate);                        vec4 pbDst = texture2D(ipbTexture, textureCoordinate);                        vec4 rggbDst = texture2D(rggbTexture, textureCoordinate);                        vec4 rbr2Dst = texture2D(rbr2Texture, textureCoordinate);                        vec4 g2b2Dst = texture2D(g2b2Texture, textureCoordinate);                        float tr = rgDst.x*(255.0 / 256.0) + rgDst.y*255.0;            float tg = rgDst.z*(255.0 / 256.0) + rgDst.w*255.0;            float tb = bpDst.x*(255.0 / 256.0) + bpDst.y*255.0;                        float trg = rggbDst.x*(255.0 / 256.0) + rggbDst.y*255.0;            float trb = rbr2Dst.x*(255.0 / 256.0) + rbr2Dst.y*255.0;            float tgb = rggbDst.z*(255.0 / 256.0) + rggbDst.w*255.0;                        float tr2 = rbr2Dst.z*(255.0 / 256.0) + rbr2Dst.w*255.0;            float tg2 = g2b2Dst.x*(255.0 / 256.0) + g2b2Dst.y*255.0;            float tb2 = g2b2Dst.z*(255.0 / 256.0) + g2b2Dst.w*255.0;                        float stp = bpDst.z*(255.0 / 256.0) + bpDst.w*255.0;            float tpr = prpgDst.x*(255.0 / 256.0) + prpgDst.y*255.0;            float tpg = prpgDst.z*(255.0 / 256.0) + prpgDst.w*255.0;            float tpb = pbDst.x*(255.0 / 256.0) + pbDst.y*255.0;                        float brg = (trg * 256.0 - tr * tg);            float brb = (trb * 256.0 - tr * tb);            float bgb = (tgb * 256.0 - tg * tb);                        float br2 = (tr2 * 256.0 - tr * tr + esp*65536.0) ;            float bg2 = (tg2 * 256.0 - tg * tg + esp*65536.0) ;            float bb2 = (tb2 * 256.0 - tb * tb + esp*65536.0) ;                        float ur = (tpr * 256.0 - stp * tr);            float ug = (tpg * 256.0 - stp * tg);            float ub = (tpb * 256.0 - stp * tb);                        float bs = br2*bgb*bgb + bg2*brb*brb + bb2*brg*brg - 2.0 * bgb*brb*brg - bb2*bg2*br2;                        float ar = (bgb*bgb - bb2*bg2)*ur + (bb2*brg - bgb*brb)*ug + (bg2*brb - bgb*brg)*ub;            float ag = (bb2*brg - bgb*brb)*ur + (brb*brb - bb2*br2)*ug + (bgb*br2 - brb*brg)*ub;            float ab = (bg2*brb - bgb*brg)*ur + (bgb*br2 - brb*brg)*ug + (brg*brg - bg2*br2)*ub;                        bs = 1.0 / bs;                        bs = min(0.0, bs);                        ar *= bs;            ag *= bs;            ab *= bs;                        float b = stp - ar*tr - ag*tg - ab*tb;                        b = b / 256.0;                        vec2 abb = vec2((ab + 64.0)*2.0, (b + 32.0)*4.0);                        vec2 fabb = floor(abb);                        vec4 dst;                        dst.x = (abb.x - fabb.x)*(256.0 / 255.0);            dst.y = fabb.x / 255.0;            dst.z = (abb.y - fabb.y)*(256.0 / 255.0);            dst.w = fabb.y / 255.0;                        gl_FragColor = dst;        }",r.factor_shader_list=[r.m_s_fshFragNewStructureSharpenFator,r.m_s_fshFragNewStructureSharpenFator2,r.m_s_fshFragNewStructureSharpenFator3],r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader[this.filter_num]||(this.m_shader[this.filter_num]=new y(null,this.factor_shader_list[this.filter_num],this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader[this.filter_num],r,i,s);a.shader_texture("rgTexture",e[0]),a.shader_texture("bpTexture",e[1]),a.shader_texture("ipripgTexture",e[2]),a.shader_texture("ipbTexture",e[3]),a.shader_texture("rggbTexture",e[4]),a.shader_texture("rbr2Texture",e[5]),a.shader_texture("g2b2Texture",e[6]);var o={};o.esp=this.m_esp,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("HazeRemoveFactorProc: "+n)},e.prototype.destroy=function(){this.m_shader[this.filter_num]&&(this.m_shader[this.filter_num].destroy(),this.m_shader[this.filter_num]=null)},e.prototype.init=function(){},e}(Jt),ei=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"        vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));        src = min(get_sample(vec2(1.0 / 4.0, -1.0 / 4.0)), src);        src = min(get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0)), src);        src = min(get_sample(vec2(1.0 / 4.0, 1.0 / 4.0)), src);                dst = src;"},e}(ue),ri=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"        vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));                src *= vec4(0.25);        vec2 dlum;        dlum.x = src.w*255.0 + src.z*(255.0 / 256.0);        dlum.y = src.y*255.0 + src.x*(255.0 / 256.0);                vec2 fdlum = floor(dlum);                src.z = (dlum.x - fdlum.x)*(256.0 / 255.0);        src.w = fdlum.x / 255.0;                src.x = (dlum.y - fdlum.y)*(256.0 / 255.0);        src.y = fdlum.y / 255.0;                dst = src;"},e}(ue),ii=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_s_fshFragHazeRemoveGuideMapProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D axayImageTexture;        uniform sampler2D azbImageTexture;        uniform vec4 m;                void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate* m.xy+m.zw);                        vec4 axay = texture2D(axayImageTexture, textureCoordinate)*vec4((255.0 / 256.0), 255.0, (255.0 / 256.0), 255.0);                        vec4 azb = texture2D(azbImageTexture, textureCoordinate)*vec4((255.0 / 256.0), 255.0, (255.0 / 256.0), 255.0);                        vec3 a = vec3(axay.x + axay.y, axay.z + axay.w, azb.x + azb.y);            a = a/2.0 - 64.0;                        float b = azb.z + azb.w;            b = b/4.0 - 32.0;                        float res = a.x*src.x + a.y*src.y + a.z*src.z + b;                        gl_FragColor = vec4(vec3(res),1.0);        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragHazeRemoveGuideMapProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("axayImageTexture",e[1]),a.shader_texture("azbImageTexture",e[2]);var o={};o.m=this.m_m,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("HazeRemoveGuideMapProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),si=function(t){function e(e){var r=t.call(this)||this;return r.m_atFlag=!1,r.m_atLight=0,r.m_amount=0,r.m_contrast=0,r.m_context=e,r.m_shader=null,r.m_s_fshFragHazeRemoveUpsizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D axayImageTexture;        uniform sampler2D azbImageTexture;                uniform vec4 m;        uniform float amount;        uniform float atLight;        uniform float atFlag;                void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate);                        vec4 axay = texture2D(axayImageTexture, textureCoordinate*m.xy + m.zw);            vec4 azb = texture2D(azbImageTexture, textureCoordinate*m.xy + m.zw);                        vec3 a = vec3(axay.x*(255.0 / 256.0) + axay.y* 255.0, axay.z*(255.0 / 256.0) + axay.w* 255.0, azb.x*(255.0 / 256.0) + azb.y* 255.0);            a = a/2.0 - 64.0;                        float b = azb.z *(255.0 / 256.0) + azb.w* 255.0;            b = b/4.0 -32.0;                        float res = a.x*src.x + a.y*src.y + a.z*src.z + b;                        vec3 color_A = vec3(atLight);            float dehaze_adjust = clamp(1.0 / res, 1.0, 10.0) - 1.0;                        if (atFlag<0.1)                dehaze_adjust = float(dehaze_adjust < 1.0)*dehaze_adjust + float(dehaze_adjust >= 1.0)*pow(dehaze_adjust, 0.2);                        dehaze_adjust = dehaze_adjust + 1.0;            vec3 J = clamp(((src.rgb - color_A)*dehaze_adjust + color_A), 0.0, 1.0);                        float d = 1.0 - amount;            float mixv = pow(res, d);            vec3 result = mix(color_A, J, mixv);                        result = mix(src.rgb, result, abs(amount));                        gl_FragColor = vec4(result, 1.0);        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragHazeRemoveUpsizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("axayImageTexture",e[1]),a.shader_texture("azbImageTexture",e[2]);var o={};o.atLight=this.m_atLight,this.m_atFlag?o.atFlag=1:o.atFlag=0,o.m=this.m_m,o.amount=this.m_amount,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("HazeRemoveUpsizeProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),ai=function(){function t(t){this.m_pixel1=new Uint8Array(4),this.m_pixel2=new Uint8Array(4),this.m_pixel3=new Uint8Array(4),this.m_context=t}return t.prototype.process=function(t,e,r,i,s){var a=Math.floor(.3*r),o=Math.floor(.3*i),n=Math.floor(.5*r),_=Math.floor(.5*i),m=Math.floor(.8*r),h=Math.floor(.8*i),c=this.m_context.context();c.bindFramebuffer(c.FRAMEBUFFER,s),c.framebufferTexture2D(c.FRAMEBUFFER,c.COLOR_ATTACHMENT0,c.TEXTURE_2D,e[0],0),c.readPixels(a,o,1,1,c.RGBA,c.UNSIGNED_BYTE,this.m_pixel1),c.readPixels(n,_,1,1,c.RGBA,c.UNSIGNED_BYTE,this.m_pixel2),c.readPixels(m,h,1,1,c.RGBA,c.UNSIGNED_BYTE,this.m_pixel3);var l=this.m_context.context().getError();if(l)throw new Error("HazeMapUpProc: "+l)},t.prototype.pixelTest=function(t,e,r){return!(Math.abs(Math.floor(t[0])-Math.floor(this.m_pixel1[0]))>2||Math.abs(Math.floor(t[1])-Math.floor(this.m_pixel1[1]))>2||Math.abs(Math.floor(t[2])-Math.floor(this.m_pixel1[2]))>2||Math.abs(Math.floor(t[3])-Math.floor(this.m_pixel1[3]))>2||Math.abs(Math.floor(e[0])-Math.floor(this.m_pixel2[0]))>2||Math.abs(Math.floor(e[1])-Math.floor(this.m_pixel2[1]))>2||Math.abs(Math.floor(e[2])-Math.floor(this.m_pixel2[2]))>2||Math.abs(Math.floor(e[3])-Math.floor(this.m_pixel2[3]))>2||Math.abs(Math.floor(r[0])-Math.floor(this.m_pixel3[0]))>2||Math.abs(Math.floor(r[1])-Math.floor(this.m_pixel3[1]))>2||Math.abs(Math.floor(r[2])-Math.floor(this.m_pixel3[2]))>2||Math.abs(Math.floor(r[3])-Math.floor(this.m_pixel3[3]))>2)},t}(),oi=function(t){function e(e){var r=t.call(this)||this;return r.m_atFlag=!1,r.m_atLight=0,r.m_amount=0,r.m_contrast=0,r.m_context=e,r.m_shader=null,r.m_s_fshFragHazeRemoveHistProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;                void main()        {            vec2 cod = textureCoordinate * m.xy + m.zw;                        vec4 src = texture2D(inputImageTexture, cod);                        vec4 hst = vec4(src.x);                        hst = (hst - vec4(-0.25, 0.0, 0.5, 0.75)) * vec4(8.0);                        hst = min(max(hst, 0.0), 4.0);                        hst = abs(hst - vec4(2.0));                        hst = hst - vec4(1.0);                        hst = hst * (hst * hst - vec4(3.0))* vec4(0.25) + vec4(0.5);                        gl_FragColor = hst;        }",r}return s(e,t),e.prototype.process=function(t,e,r){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragHazeRemoveHistProc,this.m_context.context()));var i=new w(this.m_context.context(),null,this.m_shader,t.width,t.height,r);i.shader_texture("inputImageTexture",e[0]);var s={};s.m=this.m_m,i.m_shader.uniforms(s),i.draw_to(t);var a=this.m_context.context().getError();if(a)throw new Error("HazeRemoveHistProc: "+a)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),ni=function(t){function e(e){var r=t.call(this)||this;return r.m_atFlag=!1,r.m_atLight=0,r.m_amount=0,r.m_contrast=0,r.m_context=e,r.m_shader=null,r.m_need_fac=!0,r.m_s_fshFragHazeRemoveGetALProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D hazeResTexture;        uniform vec4 m;        uniform float fac;                void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate*m.xy + m.zw);                        float res = texture2D(hazeResTexture, textureCoordinate).x;                        float _fac = float(res < fac);                        gl_FragColor = src*vec4(_fac);        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragHazeRemoveGetALProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("hazeResTexture",e[2]);var o=new Uint8Array(16),n=this.m_context.context();n.bindFramebuffer(n.FRAMEBUFFER,s),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e[1],0),n.readPixels(0,0,2,2,n.RGBA,n.UNSIGNED_BYTE,o),this.m_need_fac&&(this.m_fac=this.get_fac(o));var _={};_.m=this.m_m,_.fac=this.m_fac,a.m_shader.uniforms(_),a.draw_to(t);var m=this.m_context.context().getError();if(m)throw new Error("HazeRemoveGetAtmosphericLightProc: "+m)},e.prototype.get_fac=function(t){var e=[t[0]+t[4]+t[8]+t[12]/1024,t[1]+t[5]+t[9]+t[13]/1024,0,t[2]+t[6]+t[10]+t[14]/1024,t[3]+t[7]+t[11]+t[15]/1024];e[2]=1-e[0]-e[1]-e[3]-e[4];for(var r=0,i=0,s=0;r<5&&(i+=e[r],r>0&&(s+=e[r-1]),!(i>=.05));++r);return r?(.05-s)/(i-s)*.25+.25*(r-1):0},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),_i=function(t){function e(e){return t.call(this,e)||this}return s(e,t),e.prototype.shader_procession=function(){return"        vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));        src = max(get_sample(vec2(1.0 / 4.0, -1.0 / 4.0)), src);        src = max(get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0)), src);        src = max(get_sample(vec2(1.0 / 4.0, 1.0 / 4.0)), src);                dst = src;"},e}(ue),mi=function(){function t(t){this.m_context=t}return t.prototype.process=function(t,e,r){var i=new Uint8Array(16),s=this.m_context.context();s.bindFramebuffer(s.FRAMEBUFFER,r),s.framebufferTexture2D(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.TEXTURE_2D,e[1],0),s.readPixels(0,0,2,2,s.RGBA,s.UNSIGNED_BYTE,i),this.m_al=0;for(var a=0;a<4;a++){var o=(.299*i[4*a]+.587*i[4*a+1]+.114*i[4*a+2])/256;this.m_al<o&&(this.m_al=o)}var n=this.m_context.context().getError();if(n)throw new Error("HazeRemoveAtmosphericLightTestProc: "+n)},t}(),hi=function(t){function e(e){var r=t.call(this)||this;return r.m_factor=0,r.m_context=e,r.m_shader=null,r.m_s_fshFragHazeRemoveIPUpProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D subImageTextureR;        uniform sampler2D subImageTextureD;        uniform float fac;                void main()        {            vec4 dst = texture2D(inputImageTexture, textureCoordinate);            vec2 slum;            slum.y = dst.w*255.0 + dst.z*(255.0 / 256.0);            slum.x = dst.y*255.0 + dst.x*(255.0 / 256.0);                        vec4 sub_r = texture2D(subImageTextureR, textureCoordinate);            vec2 rlum;            rlum.y = sub_r.w*255.0 + sub_r.z*(255.0 / 256.0);            rlum.x = sub_r.y*255.0 + sub_r.x*(255.0 / 256.0);                        vec4 sub_d = texture2D(subImageTextureD, textureCoordinate);            vec2 dlum;            dlum.y = sub_d.w*255.0 + sub_d.z*(255.0 / 256.0);            dlum.x = sub_d.y*255.0 + sub_d.x*(255.0 / 256.0);                        dlum = (slum - rlum)*fac + dlum;                        vec2 fdlum = floor(dlum);                        dst.x = (dlum.x - fdlum.x)*(256.0 / 255.0);            dst.y = fdlum.x / 255.0;                        dst.z = (dlum.y - fdlum.y)*(256.0 / 255.0);            dst.w = fdlum.y / 255.0;                        gl_FragColor = dst;        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragHazeRemoveIPUpProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("subImageTextureR",e[1]),a.shader_texture("subImageTextureD",e[2]);var o={};o.fac=this.m_factor,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("HazeRemoveIPUpProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),ci=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.s_fshFragHazeRemoveCoarseDownsizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 m;        uniform vec2 sft;                vec4 get_sample(vec2 cd)        {            return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);        }                void main()        {                        vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));            src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));            src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));            src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));                        gl_FragColor = src*vec4(0.25);        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.s_fshFragHazeRemoveCoarseDownsizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]);var o={};o.m=this.m_m,o.sft=[1/r,1/i],a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("HazeRemoveCoarseUpsizeProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),li=function(t){function e(e){var r=t.call(this)||this;return r.m_dehaze=0,r.m_atFlag=!1,r.m_atLight=0,r.m_context=e,r.m_shader=null,r.m_s_fshFragHazeRemoveCoarseUpsizeProc="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D map_t;                uniform vec4 m;        uniform float dehaze;        uniform float atLight;        uniform float atFlag;                float mix_scale = 0.5;                void main() {                        vec3 color_A = vec3(atLight);            vec3 base = texture2D(inputImageTexture, textureCoordinate).rgb;                        float res_t = texture2D(map_t, textureCoordinate*m.xy + m.zw).r;                        float dehaze_adjust = clamp(1.0 / res_t, 1.0, 10.0) - 1.0;            if (atFlag < 0.1)                dehaze_adjust = float(dehaze_adjust < 1.0)*dehaze_adjust + float(dehaze_adjust >= 1.0)*pow(dehaze_adjust, 0.2);            dehaze_adjust = dehaze_adjust + 1.0;            vec3 J = clamp(((base - color_A)*dehaze_adjust + color_A), 0.0, 1.0);                        float d = 1.0 - dehaze;            float mixv = pow(res_t, d);            vec3 result = mix(color_A, J, mixv);                        gl_FragColor = vec4(result, 1.0);        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragHazeRemoveCoarseUpsizeProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("inputImageTexture",e[0]),a.shader_texture("map_t",e[1]);var o={};o.m=this.m_m,o.dehaze=this.m_dehaze,o.atLight=this.m_atLight,this.m_atFlag?o.atFlag=1:o.atFlag=0,a.m_shader.uniforms(o),a.draw_to(t);var n=this.m_context.context().getError();if(n)throw new Error("HazeRemoveCoarseUpsizeProc: "+n)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),ui=function(t){function e(e){var r=t.call(this)||this;return r.m_context=e,r.m_shader=null,r.m_s_fshFragHazeRemoveBilateralHProc="        varying vec2 textureCoordinate;        uniform sampler2D hazeMapTexture;        uniform sampler2D inputImageTexture;                float random(vec3 scale, float seed) {            return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);        }                float sigma_s = 0.02;        float sigma_c = 0.2;        float filter_window = 0.1;        float guidedFilter(vec2 uv)        {                        float wsize = filter_window / 14.0;            float res_v = 0.0;            float res_w = 0.0;            vec3 center_g = texture2D(inputImageTexture, uv).rgb;            float sigma_i = 0.5*wsize*wsize / sigma_s / sigma_s;            float offset2 = random(vec3(12.9898, 78.233, 151.7182), 0.0);            float offset = random(vec3(151.7182, 12.9898, 78.233), 0.0);            for (float i = -7.0; i <= 7.0; i++) {                for (float j = -7.0; j <= 7.0; j++) {                    vec2 coord_sample = uv + vec2(float(i) + offset - 0.5, float(j) + offset2 - 0.5)*wsize;                    float tmp_v = texture2D(hazeMapTexture, coord_sample).r;                                        vec3 tmp_g = texture2D(inputImageTexture, coord_sample).rgb;                    vec3 diff_g = (tmp_g - center_g);                                        float tmp_w = exp(-(i*i + j*j)*sigma_i);                    tmp_w *= exp(-(dot(diff_g, diff_g) / 2.0 / sigma_c / sigma_c));                                        res_v += tmp_v*tmp_w;                    res_w += tmp_w;                }            }            float res = res_v / res_w;            return res;        }                void main() {                        float res_t = guidedFilter(textureCoordinate);            res_t = max(1e-3, min(1.0 - 1e-3, res_t));            gl_FragColor = vec4(res_t, res_t, res_t, res_t);        }",r}return s(e,t),e.prototype.process=function(t,e,r,i,s){this.m_shader||(this.m_shader=new y(null,this.m_s_fshFragHazeRemoveBilateralHProc,this.m_context.context()));var a=new w(this.m_context.context(),null,this.m_shader,r,i,s);a.shader_texture("hazeMapTexture",e[0]),a.shader_texture("inputImageTexture",e[1]),a.draw_to(t);var o=this.m_context.context().getError();if(o)throw new Error("HazeRemoveBilateralHProc: "+o)},e.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null)},e}(Jt),fi=function(){function t(t){this.m_atFlag=!1,this.m_atLight=0,this.m_radius=0,this.m_esp=0,this.m_flushed=!1,this.m_intensity=0,this.m_contrast=0,this.m_last_src="",this.m_precessing="",this.m_width=0,this.m_height=0,this.m_pyramid_gpu=null,this.m_pixel1=new Uint8Array(4),this.m_pixel2=new Uint8Array(4),this.m_pixel3=new Uint8Array(4),this.m_context=t,this.m_factor=new le,this.m_image_change_test_filter=new ai(this.m_context),this.m_downsize_filter=new $r(this.m_context),this.m_map1_filter=new Qr(this.m_context),this.m_map2_filter=new Kr(this.m_context),this.m_downsize2_filter=new Zr(this.m_context),this.m_fator_filter=new ti(this.m_context),this.m_down_filter=new ei(this.m_context),this.m_down2_filter=new ri(this.m_context),this.m_guidance_filter=new ii(this.m_context),this.m_upsize_filter=new si(this.m_context),this.m_hst_filter=new oi(this.m_context),this.m_hst_down_filter=new He(this.m_context),this.m_al_filter=new ni(this.m_context),this.m_al_max_down_filter=new _i(this.m_context),this.m_al_test_filter=new mi(this.m_context),this.m_up2_filter=new hi(this.m_context),this.m_coarse_downsize_filter=new ci(this.m_context),this.m_coarse_upsize_filter=new li(this.m_context),this.m_bilateral_filter=new ui(this.m_context)}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.init=function(t){this.m_atFlag=t.test_symbol("atmosphericLight"),t.assume_symbol("radius"),this.m_radius=t.fetch_float(1e-4,16),t.assume_symbol("esp"),this.m_esp=.01*t.fetch_float(.001,100),t.get_log()!=this.m_last_src?(this.m_flushed=!0,this.m_precessing=t.get_log()):this.m_flushed=!1,t.assume_symbol("intensity"),this.m_intensity=t.fetch_float(-1,1),this.m_contrast=50,t.test_symbol("contrast")&&(this.m_contrast=100*t.fetch_float(0,1))},t.prototype.process=function(t,e,r){try{this.size_change(r.m_width,r.m_height),this.m_pyramid_gpu||(this.m_pyramid_gpu=new Ce(this.m_context,this.m_factor,1024,!0,!1,2),this.m_last_src="");var i=e.new_temporary(),s=e.current();this.inner_process(t,this.m_pyramid_gpu,i,s,r.m_width,r.m_height,r.m_frameBuffer),e.push_to_current();var a=this.m_context.context().getError();if(a)throw new Error("HazeRemove : "+a)}catch(t){throw new Error("HazeRemove process "+t)}},t.prototype.coarse_process=function(t,e,r,i,s,a,o){this.init(t);var n=new Array(7);if(this.m_flushed){n[0]=i,this.m_last_src="",e.load_from(this.m_coarse_downsize_filter,n,o),e.map_create(1),e.m_start=e.m_images.length-1,e.m_end=e.m_images.length,e.map_create(2),n[0]=e.m_images[e.m_images.length-1][0],this.m_map1_filter.process(e.m_images[e.m_images.length-1][1],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),n[0]=e.m_images[e.m_images.length-1][1],this.m_map2_filter.process(e.m_images[e.m_images.length-1][2],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),n[0]=e.m_images[e.m_images.length-1][2],n[1]=e.m_images[e.m_images.length-1][0],this.m_bilateral_filter.process(e.m_images[e.m_images.length-1][1],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),n[0]=e.m_images[e.m_images.length-1][1],n[1]=e.m_images[e.m_images.length-1][0],e.map_create(3),this.m_bilateral_filter.process(e.m_images[e.m_images.length-1][3],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),this.m_atLight=this.get_atmospheric_light(e,i,o);var _=this.m_last_src;this.m_last_src=this.m_precessing,this.m_precessing=_}this.m_factor.get_rev_trans(this.m_coarse_upsize_filter.m_m),this.m_atFlag?this.m_coarse_upsize_filter.m_atLight=this.m_atLight:this.m_coarse_upsize_filter.m_atLight=1,n[0]=i,n[1]=e.m_images[e.m_images.length-1][3],this.m_coarse_upsize_filter.m_dehaze=this.m_intensity,this.m_coarse_upsize_filter.m_atFlag=this.m_atFlag,this.m_coarse_upsize_filter.process(r,n,s,a,o)},t.prototype.inner_process=function(t,e,r,i,s,a,o){this.init(t);var n=new Array(7);if(!this.m_flushed&&(n[0]=i,this.m_image_change_test_filter.process(e.m_images[e.m_images.length-1][0],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),!this.m_image_change_test_filter.pixelTest(this.m_pixel1,this.m_pixel2,this.m_pixel3))){for(var _=0;_<4;++_)this.m_pixel1[_]=this.m_image_change_test_filter.m_pixel1[_],this.m_pixel2[_]=this.m_image_change_test_filter.m_pixel2[_],this.m_pixel3[_]=this.m_image_change_test_filter.m_pixel3[_];this.m_flushed=!this.m_flushed}if(this.m_flushed){for(n[0]=i,this.m_image_change_test_filter.process(e.m_images[e.m_images.length-1][0],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),_=0;_<4;++_)this.m_pixel1[_]=this.m_image_change_test_filter.m_pixel1[_],this.m_pixel2[_]=this.m_image_change_test_filter.m_pixel2[_],this.m_pixel3[_]=this.m_image_change_test_filter.m_pixel3[_];for(this.m_last_src="",e.load_from(this.m_downsize_filter,i,o),e.map_create(1),e.m_start=e.m_images.length-1,e.m_end=e.m_images.length,e.map_create(2),n[0]=e.m_images[e.m_images.length-1][0],this.m_map1_filter.process(e.m_images[e.m_images.length-1][1],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),n[0]=e.m_images[e.m_images.length-1][1],this.m_map2_filter.process(e.m_images[e.m_images.length-1][2],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),n[0]=e.m_images[e.m_images.length-1][2],n[1]=i,this.m_factor.get_trans(this.m_downsize2_filter.m_m),_=0;_<7;++_)this.m_downsize2_filter.filter_num=_+1,this.m_downsize2_filter.process(e.m_images[e.m_images.length-1][0],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),this.draw_IP_image(e,o,this.m_down2_filter),e.m_start=e.m_images.length-1,e.m_end=e.m_images.length,e.map_create(3+_),this.m_context.copy_texture(e.m_images[e.m_images.length-1][3+_],e.m_images[e.m_images.length-1][1],e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o);for(n[0]=e.m_images[e.m_images.length-1][3],n[1]=e.m_images[e.m_images.length-1][4],n[2]=e.m_images[e.m_images.length-1][5],n[3]=e.m_images[e.m_images.length-1][6],n[4]=e.m_images[e.m_images.length-1][7],n[5]=e.m_images[e.m_images.length-1][8],n[6]=e.m_images[e.m_images.length-1][9],this.m_fator_filter.m_esp=this.m_esp,this.m_fator_filter.filter_num=1,this.m_fator_filter.process(e.m_images[e.m_images.length-1][0],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),this.draw_IP_image(e,o,this.m_down2_filter),this.m_fator_filter.filter_num=2,this.m_fator_filter.process(e.m_images[e.m_images.length-1][0],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),this.m_context.copy_texture(e.m_images[e.m_images.length-1][2],e.m_images[e.m_images.length-1][1],e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),this.draw_IP_image(e,o,this.m_down2_filter),this.m_factor.get_trans(this.m_guidance_filter.m_m),n[0]=i,n[1]=e.m_images[e.m_images.length-1][2],n[2]=e.m_images[e.m_images.length-1][1],this.m_guidance_filter.process(e.m_images[e.m_images.length-1][3],n,e.m_size[e.m_images.length-1].width,e.m_size[e.m_images.length-1].height,o),this.m_atLight=this.get_atmospheric_light(e,i,o),_=0;_<7;++_)e.m_start=e.m_images.length-1,e.m_end=e.m_images.length;var m=this.m_last_src;this.m_last_src=this.m_precessing,this.m_precessing=m}this.m_factor.get_rev_trans(this.m_upsize_filter.m_m),this.m_atFlag?this.m_upsize_filter.m_atLight=this.m_atLight:this.m_upsize_filter.m_atLight=1,n[0]=i,n[1]=e.m_images[e.m_images.length-1][2],n[2]=e.m_images[e.m_images.length-1][1],this.m_upsize_filter.m_contrast=this.m_contrast,this.m_upsize_filter.m_amount=this.m_intensity,this.m_upsize_filter.m_atFlag=this.m_atFlag,this.m_upsize_filter.process(r,n,s,a,o)},t.prototype.draw_IP_image=function(t,e,r){t.draw_downward(r,e);for(var i=new Array(t.m_images.length),s=0;s<t.m_images.length;++s){var a=Math.floor(Math.max(t.m_size[s].width,t.m_size[s].height)/16)*this.m_radius;i[s]=Math.exp(-a*a)}for(s=1;s<t.m_images.length;++s)if(this.m_up2_filter.m_factor=i[s],t.m_base_level==s){var o=[t.m_base_images[0],t.m_images[s-1][0],t.m_images[s-1][1]];this.m_up2_filter.process(t.m_base_images[1],o,t.m_base_size,t.m_base_size,e),t.base_move_up(1,e)}else o=[t.m_images[s][0],t.m_images[s-1][0],t.m_images[s-1][1]],1==s&&this.m_context.copy_texture(t.m_images[s-1][1],t.m_images[s-1][0],t.m_size[s-1].width,t.m_size[s-1].height,e),this.m_up2_filter.process(t.m_images[s][1],o,t.m_size[s].width,t.m_size[s].height,e)},t.prototype.size_change=function(t,e){this.m_width==t&&this.m_height==e||(this.m_width=t,this.m_height=e,this.m_last_src="",this.cal_embed(this.m_factor,this.m_width,this.m_height),this.clear())},t.prototype.destroy=function(){},t.prototype.clear=function(){this.m_pyramid_gpu&&(this.m_pyramid_gpu.destroy(),this.m_pyramid_gpu=null)},t.prototype.get_atmospheric_light=function(t,e,r){var i=new Array(3);if(i[0]=t.m_images[t.m_images.length-1][3],this.m_factor.get_rev_trans(this.m_hst_filter.m_m),this.m_image_change_test_filter.process(t.m_images[t.m_images.length-1][0],i,t.m_size[t.m_images.length-1].width,t.m_size[t.m_images.length-1].height,r),t.draw_downward(this.m_hst_down_filter,r),this.m_factor.get_trans(this.m_al_filter.m_m),i[0]=e,i[1]=t.m_images[0][0],i[2]=t.m_images[t.m_images.length-1][3],this.m_al_filter.process(t.m_images[t.m_images.length-1][0],i,t.m_size[t.m_images.length-1].width,t.m_size[t.m_images.length-1].height,r),t.draw_downward(this.m_al_max_down_filter,r),this.m_al_test_filter.process(t.m_images[t.m_images.length-1][0],i,r),0!=this.m_al_test_filter.m_al)return this.m_al_test_filter.m_al;var s=.01,a=this.m_al_filter.m_fac,o=Math.floor(4*a)/4+.5+s;for(a+=s;a<o&&(this.m_al_filter.m_need_fac=!1,this.m_al_filter.m_fac=a,this.m_al_filter.process(t.m_images[t.m_images.length-1][0],i,t.m_size[t.m_images.length-1].width,t.m_size[t.m_images.length-1].height,r),t.draw_downward(this.m_al_max_down_filter,r),this.m_al_test_filter.process(t.m_images[t.m_images.length-1][0],i,r),0==this.m_al_test_filter.m_al);a+=s);return this.m_al_filter.m_need_fac=!0,this.m_al_test_filter.m_al},t.prototype.cal_embed=function(t,e,r){var i,s,a,o;r<=0||e<=0||(e>r?(i=32,s=Math.floor(32*r/e),32*r%e&&++s,a=32,o=Math.floor(32*r/e)):(i=Math.floor(32*e/r),s=32,32*e%r&&++i,a=Math.floor(32*e/r),o=32),t.m_src_width=e,t.m_src_height=r,t.m_dst_width=i,t.m_dst_height=s,t.m_x_start=0,t.m_y_start=0,t.m_emb_width=a,t.m_emb_height=o)},t.parcerName="hazeRemove",t}(),pi=function(){function t(t){this.m_shader=null,this.m_factor=0,this.m_repair=0,this.m_focalLength=0,this.m_horizontal=0,this.m_vertical=0,this.m_keepCamera=0,this.keepVertical=-1,this.m_rotate_mode=0,this.m_rotate=0,this.m_keepCenter=!1,this.m_context=t,this.m_s_fshDistortionShader="        varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform float factor;        uniform vec2 ratio;        uniform float repair;        uniform float m_cal;                void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate);                        vec2 realCoordinate = (textureCoordinate - 0.5) * m_cal;                        vec2 rad_r = realCoordinate * ratio;                        float radius2 = dot(rad_r,rad_r);                        realCoordinate = realCoordinate * (1.0 / (1.0 + factor*radius2 - repair*radius2*radius2));                        realCoordinate += vec2(0.5);                        gl_FragColor = texture2D(inputImageTexture, realCoordinate);        }",this.m_s_fshTangentialDistortionShader="        varying vec2 textureCoordinate;\t    uniform sampler2D inputImageTexture;\t    uniform mat3 m;        \t    void main()\t    {\t\t    vec3 cod = vec3(textureCoordinate, 1.0);            \t\t    cod = cod * m;                        cod = cod / cod.z;            \t\t\tgl_FragColor = texture2D(inputImageTexture, cod.xy / cod.z);\t    }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.lens_init=function(t){this.m_factor=t.fetch_float(),this.m_repair=t.fetch_float()},t.prototype.tang_init=function(t){t.assume_symbol("focalLength"),this.m_focalLength=t.fetch_float(9,500),t.assume_symbol("horizontal"),this.m_horizontal=t.fetch_float(-1,1),t.assume_symbol("vertical"),this.m_vertical=t.fetch_float(-1,1),t.test_symbol("keepCamera")?this.m_keepCamera=.5*t.fetch_float(-1,1)+.5:this.m_keepCamera=.5;switch(this.m_rotate_mode=t.lookup_symbol(["keepVertical","keepHorizontal",0]),t.lookup_symbol(["rotateRad","rotateAng",0])){case 0:this.m_rotate=t.fetch_float(-3.141592653,3.141592653);break;case 1:this.m_rotate=3.141592653*t.fetch_float(-180,180)/180;break;default:this.m_rotate=0}this.m_keepCenter=t.test_symbol("keepCenter")},t.prototype.process=function(t,e,r){if(t.test_symbol("lens")){this.lens_init(t),this.m_shader||(this.m_shader=new y(null,this.m_s_fshDistortionShader,this.m_context.context()));var i=new w(this.m_context.context(),r,this.m_shader);i.shader_texture("inputImageTexture",e.current());var s=Math.sqrt(r.m_width*r.m_width+r.m_height*r.m_height),a=this.cal_embed(r.m_width,r.m_height),o={};o.factor=this.m_factor,o.ratio=[r.m_width/s,r.m_height/s],o.repair=this.m_repair,o.m_cal=a,i.m_shader.uniforms(o),i.draw_to(e.new_temporary())}else{t.assume_symbol("tangential"),this.m_shader||(this.m_shader=new y(null,this.m_s_fshTangentialDistortionShader,this.m_context.context())),this.tang_init(t);for(var n=[],_=0;_<3;++_){for(var m=[],h=0;h<3;++h)m.push(0);n.push(m)}n=this.get_mat(n,r.m_width,r.m_height,!1),(i=new w(this.m_context.context(),r,this.m_shader)).shader_texture("inputImageTexture",e.current());var c=[];for(_=0;_<3;++_)for(h=0;h<3;++h)c.push(n[_][h]);(o={}).m=c,i.m_shader.uniforms(o),i.draw_to(e.new_temporary())}var l=this.m_context.context().getError();if(l)throw new Error("Distortion: "+l);e.push_to_current()},t.prototype.catch=function(t){throw new Error("Distortion process "+t)},t.prototype.get_mat=function(t,e,r,i){var s,a=Math.sqrt(e*e+r*r),o=this.m_focalLength/43.3*a,n=this.m_keepCamera,_=Math.sqrt(this.m_vertical*this.m_vertical+this.m_horizontal*this.m_horizontal),m=Math.sqrt(1/(_*_+1)),h=Math.sqrt((1-m)/2),c=Math.sqrt((1+m)/2),l=this.m_vertical*h/(_+1e-8),u=-this.m_horizontal*h/(_+1e-8);c=Math.sqrt(1-l*l-u*u);var f=Math.sin(this.m_rotate/2),p=Math.cos(this.m_rotate/2);if(this.m_rotate_mode>-1){var d;d=this.keepVertical==this.m_rotate_mode?-l*u*(4*n-2)/(2*(n-1)*u*u-2*n*l*l+1):l*u*(4*n-2)/(2*(n-1)*l*l-2*n*u*u+1);var g=Math.sqrt(1/(d*d+1)),v=Math.sqrt((1-g)/2);d<0&&(v=-v);var x=Math.sqrt((1+g)/2),y=p*x-f*v;f=p*v+x*f,p=y}var w=p*u-f*l,b=(l=p*l+f*u)*l+(u=w)*u,z=2*(n*u*u+(1-n)*l*l+(s=f*c)*s)-1,T=2*((1-2*n)*l*u-(c*=p)*s),E=2*((1-2*n)*l*u+c*s),C=2*(n*l*l+(1-n)*u*u+s*s)-1,S=-2*(c*u+l*s)/o,M=2*(c*l-u*s)/o;z/=b=1-2*(b-1)/(2*n*b-1),T/=b,E/=b,C/=b,S/=b,M/=b;var D=r/2,R=e/2,A=0,I=0,k=0,F=this.test_wh(k,A,I,R,D,z,T,E,C,S,M);k=F[0],A=F[1],I=F[2],R=-R;var P=this.test_wh(k,A,I,R,D,z,T,E,C,S,M);k=P[0],A=P[1],I=P[2],D=-D;var N=this.test_wh(k,A,I,R,D,z,T,E,C,S,M);k=N[0],A=N[1],I=N[2],R=-R;var q=this.test_wh(k,A,I,R,D,z,T,E,C,S,M);k=q[0],A=q[1],I=q[2],z*=k=1/k,T*=k,E*=k,C*=k,S*=k,M*=k;for(var B=[],U=0;U<3;++U){for(var L=[],O=0;O<3;++O)L.push(0);B.push(L)}var G=r/2,j=e/2;if(this.m_keepCenter){var X=1-(S*j+G*M);X=1/X,B[0][0]=(z+S*j)*X,B[0][1]=(T+M*j)*X,B[0][2]=(-G*T-z*j-S*j*j-G*M*j+j)*X,B[1][0]=(E+G*S)*X,B[1][1]=(C+G*M)*X,B[1][2]=(-G*C-E*j-G*G*M-G*S*j+G)*X,B[2][0]=S*X,B[2][1]=M*X,B[2][2]=1}else{for(var H=[-j,0,j,j,j,0,-j,-j],V=[-G,-G,-G,0,G,G,G,0],W=(k=1e6,0),Y=0,J=0;J<8;++J){var Q=0;k>(Q=this.expand_wh(Q,H[J],V[J],j,G,z,T,E,C,S,M))&&(k=Q,W=H[J],Y=V[J])}b=1/(b=(-W*S-Y*M-G*M-S*j)*(k=1/k)+W*S+Y*M+1),B[0][0]=(z+S*j)*k*b,B[0][1]=(T+M*j)*k*b,B[0][2]=((-W*z-Y*T-G*T-z*j-S*j*j-W*S*j-Y*M*j-G*M*j)*k+j+W*z+Y*T+W*S*j+Y*M*j)*b,B[1][0]=(E+G*S)*k*b,B[1][1]=(C+G*M)*k*b,B[1][2]=((-W*E-Y*C-G*C-E*j-G*G*M-W*G*S-Y*G*M-G*S*j)*k+G+W*E+Y*C+W*G*S+Y*G*M)*b,B[2][0]=S*k*b,B[2][1]=M*k*b,B[2][2]=1}if(i)t[0][0]=B[0][0],t[0][1]=B[0][1],t[0][2]=B[0][2],t[1][0]=B[1][0],t[1][1]=B[1][1],t[1][2]=B[1][2],t[2][0]=B[2][0],t[2][1]=B[2][1],t[2][2]=1;else{var K=r,Z=e;t[0][0]=B[0][0],t[0][1]=B[0][1]*K/Z,t[0][2]=B[0][2]/Z,t[1][0]=B[1][0]*Z/K,t[1][1]=B[1][1],t[1][2]=B[1][2]/K,t[2][0]=B[2][0]*Z,t[2][1]=B[2][1]*K,t[2][2]=1}return t},t.prototype.test_wh=function(t,e,r,i,s,a,o,n,_,m,h){var c=a-s*h-m*i+s/i*o;return c>t&&(t=c,e=i,r=s),(c=_-s*h-m*i+i/s*n)>t&&(t=c,e=i,r=s),(c=-a-s*h-m*i-s/i*o)>t&&(t=c,e=i,r=s),(c=-_-s*h-m*i-i/s*n)>t&&(t=c,e=i,r=s),[t,e,r]},t.prototype.expand_wh=function(t,e,r,i,s,a,o,n,_,m,h){return t=this.expand_wh_test(t,e,r,i,s,a,o,n,_,m,h),s=-s,t=this.expand_wh_test(t,e,r,i,s,a,o,n,_,m,h),i=-i,t=this.expand_wh_test(t,e,r,i,s,a,o,n,_,m,h),s=-s,t=this.expand_wh_test(t,e,r,i,s,a,o,n,_,m,h)},t.prototype.expand_wh_test=function(t,e,r,i,s,a,o,n,_,m,h){if(Math.abs(e*m+r*h+1)<1e-7&&Math.abs(s*h-r*h-e*m+m*i)<1e-7)return t;var c=e*a-i+r*o-e*m*i-r*h*i;return Math.abs(c)>1e-7&&((c=-((i-e)*a+(s-r)*o+(-i*i+e*i)*m+(r*i-s*i)*h)/c)>t&&(t=c)),c=e*n-s+r*_-e*s*m-r*s*h,Math.abs(c)>1e-7&&((c=-((i-e)*n+(s-r)*_+(e*s-s*i)*m+(-s*s+r*s)*h)/c)>t&&(t=c)),c=i+e*a+r*o+e*m*i+r*h*i,Math.abs(c)>1e-7&&((c=-((i-e)*a+(s-r)*o+(i*i-e*i)*m+(s*i-r*i)*h)/c)>t&&(t=c)),c=s+e*n+r*_+e*s*m+r*s*h,Math.abs(c)>1e-7&&((c=-((i-e)*n+(s-r)*_+(s*i-e*s)*m+(s*s-r*s)*h)/c)>t&&(t=c)),t},t.prototype.destroy=function(){},t.prototype.cal_embed=function(t,e){var r=Math.sqrt(t*t+e*e),i=t/r,s=e/r,a=.5*Math.min(i,s),o=this.cal_scale(a);return o=Math.min(o,this.cal_scale(.66*a+.17)),o=Math.min(o,this.cal_scale(.34*a+.33)),o=Math.min(o,this.cal_scale(.5))},t.prototype.cal_scale=function(t){var e,r,i=-2,s=Math.exp(i);if(this.cal(t,s)>t)return s;for(var a=0;a<40;++a){if(e=i+.1,r=Math.exp(e),this.cal(t,r)>t)return this.cal_i(t,s,r);i=e,s=r}return s},t.prototype.cal=function(t,e){var r=(t*=e)*t;return t/(1+this.m_factor*r-this.m_repair*r*r)},t.prototype.cal_i=function(t,e,r){for(var i=0;i<12;++i){var s=.5*(e+r);this.cal(t,s)<t?e=s:r=s}return r},t.parcerName="distortion",t}(),di=function(t){function e(e){var r=t.call(this,e)||this;return r.m_intensity=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float intensity;                     "},e.prototype.shader_procession=function(){return"                 vec3 finalColor = abs(1.0 - src.rgb);                              dst = vec4(src.rgb * (1.0 - intensity) + finalColor * intensity, src.a);                      "},e.prototype.init=function(t,e,r){t.assume_symbol("intensity"),this.m_intensity=t.fetch_float()},e.prototype.shader_setup=function(t){var e={};e.intensity=this.m_intensity,t.m_shader.uniforms(e)},e.parcerName="invertColor",e}(ft),gi=function(){function t(t){this.m_shader=null,this.m_lut=new Array,this.m_encoded_lut="",this.lut_size=0,this.strength=0,this.m_context=t,this.m_s_filterGeneratorProc="           varying vec2 textureCoordinate;           uniform sampler2D inputImageTexture;           uniform sampler2D lut;           uniform float lut_size;         uniform float strength;           void main(){               vec4 src = texture2D(inputImageTexture, textureCoordinate);               float r0 = floor(src.r * (lut_size - 1.0));               float r1 = ceil(src.r * (lut_size - 1.0));               float g0 = floor(src.g * (lut_size - 1.0));              float g1 = ceil(src.g * (lut_size - 1.0));              float b0 = floor(src.b * (lut_size - 1.0));             float b1 = ceil(src.b * (lut_size - 1.0));             float rd = src.r * (lut_size - 1.0) - r0;            float gd = src.g * (lut_size - 1.0) - g0;            float bd = src.b * (lut_size - 1.0) - b0;            float row000 = r0 + g0*lut_size + b0*lut_size*lut_size;            float row001 = r0 + g0*lut_size + b1*lut_size*lut_size;            float row010 = r0 + g1*lut_size + b0*lut_size*lut_size;            float row011 = r0 + g1*lut_size + b1*lut_size*lut_size;            float row100 = r1 + g0*lut_size + b0*lut_size*lut_size;            float row101 = r1 + g0*lut_size + b1*lut_size*lut_size;            float row110 = r1 + g1*lut_size + b0*lut_size*lut_size;            float row111 = r1 + g1*lut_size + b1*lut_size*lut_size;            float x1 = floor(row000/(lut_size*lut_size));            float y1 = row000 - lut_size * lut_size * x1;            vec3 c000 = texture2D(lut, vec2(y1/(lut_size*lut_size - 1.0), x1/(lut_size*lut_size - 1.0))).rgb;            float x2 = floor(row001/(lut_size*lut_size));            float y2 = row001 - lut_size * lut_size * x2;            vec3 c001 = texture2D(lut, vec2(y2/(lut_size*lut_size - 1.0), x2/(lut_size*lut_size - 1.0))).rgb;            float x3 = floor(row010/(lut_size*lut_size));            float y3 = row010 - lut_size * lut_size * x3;            vec3 c010 = texture2D(lut, vec2(y3/(lut_size*lut_size - 1.0), x3/(lut_size*lut_size - 1.0))).rgb;            float x4 = floor(row011/(lut_size*lut_size));            float y4 = row011 - lut_size * lut_size * x4;            vec3 c011 = texture2D(lut, vec2(y4/(lut_size*lut_size - 1.0), x4/(lut_size*lut_size - 1.0))).rgb;            float x5 = floor(row100/(lut_size*lut_size));            float y5 = row100 - lut_size * lut_size * x5;            vec3 c100 = texture2D(lut, vec2(y5/(lut_size*lut_size - 1.0), x5/(lut_size*lut_size - 1.0))).rgb;            float x6 = floor(row101/(lut_size*lut_size));            float y6 = row101 - lut_size * lut_size * x6;            vec3 c101 = texture2D(lut, vec2(y6/(lut_size*lut_size - 1.0), x6/(lut_size*lut_size - 1.0))).rgb;            float x7 = floor(row110/(lut_size*lut_size));            float y7 = row110 - lut_size * lut_size * x7;            vec3 c110 = texture2D(lut, vec2(y7/(lut_size*lut_size - 1.0), x7/(lut_size*lut_size - 1.0))).rgb;            float x8 = floor(row111/(lut_size*lut_size));            float y8 = row111 - lut_size * lut_size * x8;            vec3 c111 = texture2D(lut, vec2(y8/(lut_size*lut_size - 1.0), x8/(lut_size*lut_size - 1.0))).rgb;            vec3 c00 = c000 + (c100 - c000) * rd;            vec3 c10 = c010 + (c110 - c010) * rd;            vec3 c01 = c001 + (c101 - c001) * rd;            vec3 c11 = c011 + (c111 - c011) * rd;            vec3 c0 = c00 + (c10 - c00) * gd;            vec3 c1 = c01 + (c11 - c01) * gd;            vec3 c = c0 + (c1 - c0) * bd;            gl_FragColor = vec4(src.rgb * (1.0 - strength) + c.rgb * strength, src.a);    }"}return t.create=function(e){return new t(e)},t.prototype.get_name=function(){return t.parcerName},t.prototype.process=function(t,e,r){this.init(t),this.m_shader||(this.m_shader=new y(null,this.m_s_filterGeneratorProc,this.m_context.context()));var i=new w(this.m_context.context(),r,this.m_shader);i.shader_texture("inputImageTexture",e.current());var s={};s.lut_size=this.lut_size,s.strength=this.strength,i.m_shader.uniforms(s);var a=this.m_encoded_lut.substring(0,13)+this.m_encoded_lut.substring(41);a=atob(a);for(var o=0;o<this.lut_size*this.lut_size*this.lut_size;o++)this.m_lut.push(Math.floor((parseFloat(a.substring(24*o,24*o+8))-19930922)/3.7/1e7*255+.5)),this.m_lut.push(Math.floor((parseFloat(a.substring(24*o+8,24*o+16))-19930922)/3.7/1e7*255+.5)),this.m_lut.push(Math.floor((parseFloat(a.substring(24*o+16,24*o+24))-19930922)/3.7/1e7*255+.5)),this.m_lut.push(0);for(o=0;o<this.lut_size*this.lut_size*this.lut_size*(4*this.lut_size-4);o++)this.m_lut.push(0);var n=0;n||(n=this.m_context.create_new_texture_for_lut(this.lut_size*this.lut_size,this.lut_size*this.lut_size)),i.shader_texture("lut",n);var _=this.m_context.context();try{_.texSubImage2D(_.TEXTURE_2D,0,0,0,this.lut_size*this.lut_size,this.lut_size*this.lut_size,_.RGBA,_.UNSIGNED_BYTE,new Uint8Array(this.m_lut))}catch(t){}i.draw_to(e.new_temporary());var m=this.m_context.context().getError();if(m)throw new Error("FilterGenerator: "+m);e.push_to_current(),this.m_context.context().deleteTexture(n)},t.prototype.catch=function(t){throw new Error("FilterGenerator process "+t)},t.prototype.init=function(t){this.m_encoded_lut=t.fetch_string(),t.assume_symbol("lutSize"),this.lut_size=t.fetch_float(),t.assume_symbol("strength"),this.strength=t.fetch_float()},t.prototype.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=null),this.m_lut&&(this.m_lut=[])},t.parcerName="filterGenerator",t}(),vi=function(t){function e(e){var r=t.call(this,e)||this;return r.m_length=0,r.m_width=0,r.m_height=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float len;                         uniform float aspect_ratio;                     "},e.prototype.shader_procession=function(){return"             float TR = 0.866025;                     float PI6 = 0.523599;                     float x = textureCoordinate.x;                     float y = textureCoordinate.y / aspect_ratio;                     int wx = int(x / 1.5 /len);                     int wy = int(y / TR / len);                     vec2 v1, v2, vn;                     if(wx / 2 * 2 == wx) {                         if(wy / 2 * 2 == wy) {                             v1 = vec2(len * 1.5 * float(wx), len * TR * float(wy));                             v2 = vec2(len * 1.5 * float(wx + 1), len * TR * float(wy + 1));                         } else {                             v1 = vec2(len * 1.5 * float(wx), len * TR * float(wy+1));                             v2 = vec2(len * 1.5 * float(wx+1), len * TR * float(wy));                         }                     } else {                         if(wy/2 * 2 == wy) {                             v1 = vec2(len * 1.5 * float(wx), len * TR * float(wy+1));                             v2 = vec2(len * 1.5 * float(wx+1), len * TR * float(wy));                         } else {                             v1 = vec2(len * 1.5 * float(wx), len * TR * float(wy));                             v2 = vec2(len * 1.5 * float(wx+1), len * TR * float(wy+1));                         }                     }                     float s1 = sqrt(pow(v1.x-x, 2.0) + pow(v1.y-y, 2.0));                     float s2 = sqrt(pow(v2.x-x, 2.0) + pow(v2.y-y, 2.0));                     if(s1 < s2)                         vn = v1;                     else                         vn = v2;                                 float a = atan((x-vn.x)/(y-vn.y));                     vec2 area1 = vec2(vn.x, vn.y-len*TR/2.0);                     vec2 area2 = vec2(vn.x+len/2.0, vn.y-len * TR / 2.0);                     vec2 area3 = vec2(vn.x+len/2.0, vn.y + len * TR / 2.0);                     vec2 area4 = vec2(vn.x, vn.y + len * TR / 2.0);                     vec2 area5 = vec2(vn.x-len/2.0, vn.y + len * TR / 2.0);                     vec2 area6 = vec2(vn.x-len/2.0, vn.y - len * TR / 2.0);                     if(a>=PI6 && a<PI6*3.0)                         vn = vec2(area1.x, area1.y * aspect_ratio);                   else if(a>=PI6*3.0 && a<PI6*5.0)                         vn = vec2(area2.x, area2.y * aspect_ratio);                   else if((a>=PI6*5.0 && a<=PI6*6.0) || (a<-PI6*5.0 && a>-PI6*6.0))                         vn = vec2(area3.x, area3.y * aspect_ratio);                   else if(a<-PI6*3.0 && a>=-PI6*5.0)                        vn = vec2(area4.x, area4.y * aspect_ratio);                   else if(a<=-PI6 && a>-PI6*3.0)                         vn = vec2(area5.x, area5.y * aspect_ratio);                   else if(a>-PI6 && a<PI6)                         vn = vec2(area6.x, area6.y * aspect_ratio);                   vec4  color = texture2D(inputImageTexture, vn);                     dst = color;                         "},e.prototype.init=function(t,e,r){t.assume_symbol("length"),this.m_length=t.fetch_float(),this.m_width=e,this.m_height=r},e.prototype.shader_setup=function(t){var e={};e.len=this.m_length,e.aspect_ratio=this.m_width/this.m_height,t.m_shader.uniforms(e)},e.parcerName="triangleMosaic",e}(ft),xi=function(t){function e(e){var r=t.call(this,e)||this;return r.m_length=0,r.m_width=0,r.m_height=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float len;                         uniform float aspect_ratio;                     "},e.prototype.shader_procession=function(){return"             float TR = 0.866025;                     float x = textureCoordinate.x;                     float y = textureCoordinate.y / aspect_ratio;                     int wx = int(x / 1.5 / len);                     int wy = int(y / TR / len);                     vec2 v1, v2, vn;                     if(wx / 2 * 2 == wx) {                         if(wy / 2 * 2 == wy) {                             v1 = vec2(len * 1.5 * float(wx), len * TR * float(wy));                             v2 = vec2(len * 1.5 * float(wx+1), len * TR * float(wy+1));                         } else {                             v1 = vec2(len * 1.5 * float(wx), len * TR * float(wy+1));                             v2 = vec2(len * 1.5 * float(wx+1), len * TR * float(wy));                         }                     } else {                         if(wy / 2 * 2 == wy) {                             v1 = vec2(len * 1.5 * float(wx), len * TR * float(wy+1));                             v2 = vec2(len * 1.5 * float(wx+1), len *TR * float(wy));                         } else {                             v1 = vec2(len * 1.5 * float(wx), len * TR * float(wy));                             v2 = vec2(len * 1.5 * float(wx+1), len * TR * float(wy+1));                         }                 }                 float s1 = sqrt(pow(v1.x-x, 2.0) + pow(v1.y-y, 2.0));                 float s2 = sqrt(pow(v2.x-x, 2.0) + pow(v2.y-y, 2.0));                 if(s1 < s2)                     vn = vec2(v1.x, v1.y * aspect_ratio);                 else                     vn = vec2(v2.x, v2.y * aspect_ratio);                 vec4 color = texture2D(inputImageTexture, vn);                 dst = color;                 "},e.prototype.init=function(t,e,r){t.assume_symbol("length"),this.m_length=t.fetch_float(),this.m_width=e,this.m_height=r},e.prototype.shader_setup=function(t){var e={};e.len=this.m_length,e.aspect_ratio=this.m_width/this.m_height,t.m_shader.uniforms(e)},e.parcerName="hexagonMosaic",e}(ft),yi=function(t){function e(e){var r=t.call(this,e)||this;return r.m_length=0,r.m_width=0,r.m_height=0,r}return s(e,t),e.create=function(t){return new e(t)},e.prototype.shader_uniform=function(){return"uniform float len_x;                         uniform float len_y;                        "},e.prototype.shader_procession=function(){return"             float block_x_idx = floor(textureCoordinate.x / len_x);                 float block_y_idx = floor(textureCoordinate.y / len_y);                 vec2 real_pos = vec2(len_x * (block_x_idx + 0.5), len_y * (block_y_idx + 0.5));             dst = texture2D(inputImageTexture, real_pos);             "},e.prototype.init=function(t,e,r){t.assume_symbol("length"),this.m_length=t.fetch_float(),this.m_width=e,this.m_height=r},e.prototype.shader_setup=function(t){var e={};e.len_x=this.m_length,e.len_y=this.m_width*this.m_length/this.m_height,t.m_shader.uniforms(e)},e.parcerName="squareMosaic",e}(ft),wi=function(){function t(t,e,r){var i,s;this.m_context=t,this.m_list=new Map;try{for(var n=a(e),_=n.next();!_.done;_=n.next()){var m=o(_.value,2),h=m[0],c=m[1];this.m_list.set(h,{loader:c,parcer:void 0})}}catch(t){i={error:t}}finally{try{_&&!_.done&&(s=n.return)&&s.call(n)}finally{if(i)throw i.error}}}return t.prototype.get_name=function(){throw new Error("Method not implemented.")},t.prototype.process=function(t,e,r){var i=this.get_item(t);i&&i.process(t,e,r)},t.prototype.destroy=function(){var t,e;try{for(var r=a(this.m_list.values()),i=r.next();!i.done;i=r.next()){var s=i.value;s.parcer&&s.parcer.destroy()}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}},t.prototype.get_item=function(t){var e=t.fetch_symbol();if(""==e)return!1;var r=this.m_list.get(e);if(!r)throw new Error("create_dispatch_parcer");r.parcer||(r.parcer=r.loader(this.m_context));var i="processing:";return i+=e,i+="\n",this.m_context.on_log(i),r.parcer},t.parcer_list=new Map([[ut.parcerName,ut.create],[pt.parcerName,pt.create],[yt.parcerName,yt.create],[wt.parcerName,wt.create],[Se.parcerName,Se.create],[Me.parcerName,Me.create],[Be.parcerName,Be.create],[je.parcerName,je.create],[ur.parcerName,ur.create],[Rr.parcerName,Rr.create],[Ar.parcerName,Ar.create],[Ir.parcerName,Ir.create],[kr.parcerName,kr.create],[qr.parcerName,qr.create],[Br.parcerName,Br.create],[Gr.parcerName,Gr.create],[jr.parcerName,jr.create],[gi.parcerName,gi.create],[Xr.parcerName,Xr.create],[Hr.parcerName,Hr.create],[Jr.parcerName,Jr.create],[fi.parcerName,fi.create],[pi.parcerName,pi.create],[di.parcerName,di.create],[vi.parcerName,vi.create],[xi.parcerName,xi.create],[yi.parcerName,yi.create]]),t.mix_log_parcer_list=new Map([[Xe.parcerName,Xe.create],[Je.parcerName,Je.create],[ir.parcerName,ir.create],[or.parcerName,or.create],[lr.parcerName,lr.create]]),t.basic_adjust_list=new Map([[Et.parcerName,Et.create],[Ct.parcerName,Ct.create],[St.parcerName,St.create],[Mt.parcerName,Mt.create],[Dt.parcerName,Dt.create],[bt.parcerName,bt.create],[Rt.parcerName,Rt.create],[At.parcerName,At.create],[It.parcerName,It.create],[kt.parcerName,kt.create],[Ft.parcerName,Ft.create],[Pt.parcerName,Pt.create],[Nt.parcerName,Nt.create],[qt.parcerName,qt.create],[Bt.parcerName,Bt.create],[Ut.parcerName,Ut.create],[Lt.parcerName,Lt.create],[Ot.parcerName,Ot.create],[zt.parcerName,zt.create],[Tt.parcerName,Tt.create],[Gt.parcerName,Gt.create],[jt.parcerName,jt.create],[Xt.parcerName,Xt.create],[Ht.parcerName,Ht.create],[Vt.parcerName,Vt.create],[Wt.parcerName,Wt.create],[Yt.parcerName,Yt.create],[Kt.parcerName,Kt.create],[Zt.parcerName,Zt.create],[$t.parcerName,$t.create],[te.parcerName,te.create],[ee.parcerName,ee.create],[re.parcerName,re.create],[ie.parcerName,ie.create],[se.parcerName,se.create],[ae.parcerName,ae.create],[oe.parcerName,oe.create],[ne.parcerName,ne.create],[_e.parcerName,_e.create],[me.parcerName,me.create],[he.parcerName,he.create],[ce.parcerName,ce.create]]),t.special_border_list=new Map([[De.parcerName,De.create],[Re.parcerName,Re.create],[Ae.parcerName,Ae.create],[Ie.parcerName,Ie.create],[ke.parcerName,ke.create],[qe.parcerName,qe.create],[Fe.parcerName,Fe.create],[Pe.parcerName,Pe.create],[Ne.parcerName,Ne.create]]),t.special_mix_color_list=new Map([[Fr.parcerName,Fr.create],[Pr.parcerName,Pr.create],[Nr.parcerName,Nr.create]]),t.border_list=new Map([[Ur.parcerName,Ur.create],[Lr.parcerName,Lr.create],[Or.parcerName,Or.create]]),t}(),bi=function(){function t(){this.serial=0,this.script="",this.processed=!1}return t.prototype.clear=function(){this.compressor&&this.compressor.destroy(),this.compressor=null,this.texture=null,this.processed=!1},t}(),zi=function(){function t(t){this.m_script="",this.m_process_serial=0,this.m_view_serial=0,this.m_image_serial=0,this.m_process=null,this.m_parcer_list=null,this.m_mix_log_parcer_list=null,this.m_view_list=new Array,this.m_context=new u(t),this.m_preParcer=new p}return t.prototype.context=function(){return this.m_context},t.prototype.get_gl=function(){return this.m_context.context()},t.prototype.create_view=function(t){var e=new bi;return e.script=t,e.serial=++this.m_view_serial,this.m_view_list[this.m_view_list.length]=e,e.serial},t.prototype.get_view_texture=function(t){var r=this.get_view_by_number(t);if(!r)return e.ViewInvalidSerial;if(!r.processed){var i=this.process_view(t);if(e.ProcessingSuccess!=i)return i}return this.load_view(r)},t.prototype.load_view=function(t,r){if(!t.processed)return e.InnerError;if(t.compressor,!t.texture)return e.InnerError;if(r){var i=this.m_process.size();return this.m_context.texture_to_texture(r,t.texture,this.get_frame_buffer(),i.width,i.height)?r:e.OpenGLError}return t.texture},t.prototype.set_image=function(t,e,r,i,s,a){void 0===i&&(i=!1),void 0===s&&(s=!1),void 0===a&&(a=!0),(!t||e<=0||r<=0)&&(e=r=0,a&&t&&(this.m_context.delete_texture(t),t=null)),this.clear_view_list(),i||(this.m_view_list.length=0),this.m_process&&(this.m_process.destroy(),this.m_process=null),t&&(++this.m_image_serial,this.m_process_serial=0,this.m_process=new l(t,e,r,!s,a,this))},t.prototype.process_view=function(t){var r=this.get_view_by_number(t);if(!r)return e.ViewInvalidSerial;if(r.processed)return e.ProcessingSuccess;this.m_script=r.script;var i=this.process_image();return e.ProcessingSuccess!=i?i:this.m_process?(r.texture=this.m_process.get_result(),r.processed=!0,r.texture?e.ProcessingSuccess:e.InnerError):e.InnerError},t.prototype.process_image=function(){if(!this.m_process)return e.LoadSourceImageFailed;this.m_context.context().getError(),this.m_context.context().disable(this.m_context.context().BLEND),this.m_context.context().bindBuffer(this.m_context.context().ARRAY_BUFFER,null);try{this.process_image_template()}catch(t){return t}return this.m_context.context().finish(),this.m_context.context().getError(),e.ProcessingSuccess},t.prototype.process_image_template=function(){if(!this.m_process)throw"process image template";var t=this.m_process.size();++this.m_process_serial;var e,r=new gt(this.m_preParcer.parce(this.m_script)),i=new xt(r,this.m_process_serial);i.log_return(),i.log("Image serial number:"),i.log(this.m_image_serial),i.log_return(),i.log("Image size:"),i.log(t.width),i.log(t.height),i.log_return();var s=["layer",0],a=["start","swap","end",0];if(i.test_symbol("view")){var o=Math.floor(i.fetch_float()+.5),n=this.get_view_by_number(o);if(!n)throw i.error("Invalid view number",[o]),new Error("Invalid view number"+o);if(n.processed||i.error("View has not been processed",[o]),n.compressor&&!m(e=this.decompress_view(n)))throw Error(e);if(!m(e=this.load_view(n,this.m_process.prepare_empty())))throw Error(e);i.assume_semicolon()}else this.m_process.prepare();for(;!i.ended();){if(0===i.lookup_symbol(s)){dt.LUV_MIX_LOG==i.m_mode&&i.error("can't use layer in mix log mode");var _=i.fetch_symbol();switch(i.lookup_symbol(a,!0)){case 0:this.m_process.new_channel(_);break;case 1:this.m_process.swap_channel(_);break;case 2:this.m_process.end_channel(_);break;default:throw Error("CGEScriptEngine::process_image_template")}}else{var h=null;if(dt.SRGB==i.m_mode?(this.m_parcer_list||(this.m_parcer_list=new wi(this.m_context,wi.parcer_list)),h=this.m_parcer_list):dt.LUV_MIX_LOG==i.m_mode&&(this.m_mix_log_parcer_list||(this.m_mix_log_parcer_list=new wi(this.m_context,wi.mix_log_parcer_list)),h=this.m_mix_log_parcer_list),!h)throw"bad status mode";var c=new d(this.get_frame_buffer(),t.width,t.height);h.process(i,this.m_process,c)}i.assume_semicolon()}dt.LUV_MIX_LOG==i.m_mode&&i.error('use "toneMapEnd;" command before script end'),i.log("process success ! \n");var l=i.get_log();this.m_context.on_log(l)},t.prototype.get_frame_buffer=function(){return this.m_frame_buffer||(this.m_frame_buffer=this.m_context.context().createFramebuffer()),this.m_frame_buffer},t.prototype.get_view_by_number=function(t){var e=this,r=null;return this.find_view(t,(function(t){r=e.m_view_list[t]})),r},t.prototype.get_max_pool_size=function(){return 3},t.prototype.create_new_texture=function(t,e,r){return this.m_context.create_new_texture(t,e,r)},t.prototype.copy_texture=function(t,e,r,i){this.m_context.copy_texture(t,e,r,i,this.get_frame_buffer())},t.prototype.set_lock_unlock_function=function(t,e){void 0===e&&(e=null),this.m_context.m_func_lock_image=t,this.m_context.m_func_unlock_image=e},t.prototype.get_src=function(){if(this.m_process)return this.m_process.get_src();throw new Error("process uninit")},t.prototype.fetch_view_texture=function(t){var r=this.get_view_by_number(t);if(!r)return e.ViewInvalidSerial;if(!r.processed){var i=this.process_view(t);return m(i)?(i=r.texture,r.clear(),i):e.ViewInvalidSerial}var s=this.load_view(r);return r.clear(),s},t.prototype.destroy_view=function(t){var e=this;this.find_view(t,(function(t){var r=e.m_view_list[t];r.texture&&(e.m_process?e.m_process.put_tmp_image(r.texture):e.m_context.context().delete_texture(1,r.texture),r.compressor&&r.compressor.decompress_image_then_release(0,0),e.m_view_list.splice(t,1))}))},t.prototype.get_image_size=function(){return this.m_process?this.m_process.size():{width:0,height:0}},t.prototype.clean=function(){this.m_parcer_list&&this.m_parcer_list.destroy(),this.m_parcer_list=null,this.m_mix_log_parcer_list&&this.m_mix_log_parcer_list.destroy(),this.m_mix_log_parcer_list=null},t.prototype.find_view=function(t,e){for(var r=0;r<this.m_view_list.length;++r)if(t==this.m_view_list[r].serial)return e(r),!0;return!1},t.prototype.decompress_view=function(t){if(t.texture||!this.m_process)return e.InnerError;t.texture=this.m_process.fetch_tmp_image();var r=t.compressor;return t.compressor=null,r.decompress_image_then_release(t.texture)?e.ProcessingSuccess:(this.m_process.put_tmp_image(t.texture),t.texture=null,t.processed=!1,e.OtherError)},t.prototype.clear_view_list=function(){var t=this;this.m_view_list.map((function(e){e.texture&&t.m_context.delete_texture(e.texture),e.compressor,e.texture=null,e.processed=!1}))},t}(),Ti=function(){function t(t){this.script=" ",this.view=0,this.engine=t}return t.prototype.destroy=function(){this.script="",this.view&&(this.engine.destroy_view(this.view),this.view=0)},t}(),Ei=function(t,e){this.m_lock=!1,this.m_name=t,this.m_image=e},Ci=function(){function t(t){this.m_model="",this.m_index=0,this.m_queue=new Array,this.m_firstStep=0,this.m_firstStepScript=new Array,this.m_wrapper=t}return t.prototype.destroy=function(){var t=this;"reshape"==this.m_model&&this.m_queue.forEach((function(e){t.m_wrapper.m_painter_engine.destroy_view(e.maskView)})),"blemish"!=this.m_model&&"redEyeRemove"!=this.m_model||this.m_firstStep&&this.m_wrapper.m_small_engine.destroy_view(this.m_firstStep),this.m_model="",this.m_index=0,this.m_queue=new Array},t.prototype.clone=function(){var e=new t(this.m_wrapper);return e.m_model=this.m_model,e.m_index=this.m_index,e.m_queue=this.m_queue.map((function(t){return Object.assign({},t)})),e},t}(),Si=function(){function t(t,e,r){void 0===e&&(e=100),this.m_small_canvas=null,this.m_clone_baisc_layer=0,this.m_resourceCache={},this.m_texture_pool=new Array,this.m_special_tex_pool=new Array,this.m_clone_history=new Array,this.m_matting_painter_view=0,this.m_magic_view=0,this.m_last_rotation_view=0,this.m_last_view=0,this.m_last_small_view=0,this.m_clone_cache=0,this.m_small=0,this.m_step=0,this.m_ratio=0,this.m_lastRenderId=0,this.m_canDrawimage=!0,this.m_painter_view={view:0,lock:!1},this.m_reshape_view=0,this.m_blemishFix_view=0,this.m_redEyeRemove_view=0,this.m_matting_blur=0,this.m_matting_crop=!1,this.m_reshapeStress=0,this.m_reshapeWidth=0,this.m_reshapeHeight=0,this.m_reshapeTrans=null,this.m_rotationWidth=0,this.m_rotationHeight=0,this.m_rotationState=new Array,this.m_last_rotation_handle="",this.m_cloneWidth=0,this.m_cloneHight=0,this.m_opacity=0,this.m_paintWidth=0,this.m_paintHight=0,this.m_bOpacity=0,this.m_paintTrans=null,this.m_polaroidWidth=0,this.m_polaroidHeight=0,this.m_polaroidCaptation=0,this.m_testwidth=0,this.m_testheight=0,this.m_test_callback=function(){},this.m_canvas=t,this.m_historyLength=e,this.m_publicPath=r,this.m_engine=new zi(this.m_canvas._.gl),this.m_small_engine=new zi(this.m_canvas._.gl),this.m_painter_engine=new zi(this.m_canvas._.gl),this.m_special_engine=new zi(this.m_canvas._.gl),this.m_handler_queue=new Ci(this),this.m_basic_layer=new Ti(this.m_engine),this.m_effect_layer=new Ti(this.m_engine)}return t.check_CRM=function(t){return m(t)},t.prototype.set_image=function(t,e,r,i,s,a,o){var n=this;void 0===i&&(i=5e3),s&&(this.m_step=s);var _,m=e||t.width,h=r||t.height,c=0,l=0,u=Math.max(m,h);u>i?u==m?l=(c=i)*(h/m):c=(l=i)*(m/h):(l=h,c=m),l=Math.floor(l+.5),c=Math.floor(c+.5),this.m_ratio=c/m,t.name&&"engineTexture"==t.name?(_=this.m_engine.create_new_texture(m,h,!0),this.m_engine.copy_texture(_,t.texture,m,h)):(this.m_texture_for_canvas=this.m_canvas.texture(t),_=this.m_texture_for_canvas._.id),this.m_engine.set_image(_,m,h),this.m_small_engine.set_image(this.m_small_engine.create_new_texture(c,l,!0),c,l),this.m_small_engine.set_lock_unlock_function((function(t,e){return n.special_lock(t)}));var f=this.m_small_engine.fetch_view_texture(this.m_small_engine.create_view("basicAdjust justDraw;"));if(this.m_small_engine.set_image(f,c,l),this.inner_clean(),a||this.apply_to_canvas(_,m,h),o){var p=this.m_engine.create_new_texture(m,h,!0);this.m_engine.copy_texture(p,_,m,h);var d=this.create_engine_texture(p,m,h,new Ci(this));this.m_texture_pool.push(d)}},t.prototype.get_small_canvas=function(t,e){if(this.m_small_canvas||(this.m_small_canvas=document.createElement("canvas"),this.m_small_canvas.width=t,this.m_small_canvas.height=e),this.m_canvas.get_small_canvas_different()){var r=this.m_small_canvas.getContext("2d");r&&(r.clearRect(0,0,this.m_small_canvas.width,this.m_small_canvas.height),r.drawImage(this.m_canvas,0,0,this.m_small_canvas.width,this.m_small_canvas.height),this.m_canvas.set_small_canvas_noDiferent())}return this.m_small_canvas},t.prototype.get_canvas_image_v2=function(){var t=this.m_engine.get_gl();t.bindFramebuffer(t.FRAMEBUFFER,null);var e=document.createElement("canvas");e.width=this.m_canvas.width,e.height=this.m_canvas.height;var r=e.getContext("2d");if(!r)return e;var i=r.createImageData(e.width,e.height),s=e.width*e.height*4,a=new Uint8Array(s);if(t.readPixels(0,0,e.width,e.height,t.RGBA,t.UNSIGNED_BYTE,a),t.getError())return e;for(var o=0,n=e.height-1;n>0;--n)for(var _=0;_<4*e.width;++_)i.data[o]=a[n*e.width*4+_],++o;return r.putImageData(i,0,0),e},t.prototype.set_canDrawImage=function(t){this.m_canDrawimage=t},t.prototype.get_canvas=function(){return this.m_canDrawimage?this.m_canvas:this.get_canvas_image_v2()},t.prototype.get_image_size=function(){return this.m_engine.get_image_size()},t.prototype.process_rule=function(t,e){this.m_last_small_view&&this.m_small_engine.destroy_view(this.m_last_small_view),this.m_last_small_view=this.m_small_engine.create_view(t);var r=this.m_small_engine.get_view_texture(this.m_last_small_view);m(r);var i=this.m_small_engine.get_image_size();e?this.apply_to_canvas(r,i.width,i.height):this.draw_to_canvas(r,i.width,i.height),this.m_interval_record&&this.m_interval_record.model,""!=t&&(this.m_interval_record={model:"rule",script:t})},t.prototype.uploadTxt=function(t,e){return function(t,e,r,i){function s(t){return t instanceof r?t:new r((function(e){e(t)}))}return new(r||(r=Promise))((function(r,a){function o(t){try{_(i.next(t))}catch(t){a(t)}}function n(t){try{_(i.throw(t))}catch(t){a(t)}}function _(t){t.done?r(t.value):s(t.value).then(o,n)}_((i=i.apply(t,e||[])).next())}))}(this,void 0,void 0,(function(){var r,i;return function(t,e){var r,i,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:n(0),throw:n(1),return:n(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function n(t){return function(e){return _([t,e])}}function _(a){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,i&&(s=2&a[0]?i.return:a[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,a[1])).done)return s;switch(i=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,i=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],i=0}finally{r=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}}(this,(function(s){switch(s.label){case 0:return r=localStorage.getItem("FOTER_FILTER_TEXT"),i=[],r&&(i=JSON.parse(r)),i.hasOwnProperty(t)?[2,i[t]]:[4,this.sendUrlGetData(t,i,e)];case 1:return[2,s.sent()]}}))}))},t.prototype.sendUrlGetData=function(t,e,i){var s=r("5110");return new Promise((function(r,a){s.get(t).then((function(s){if(s&&200===s.status){var a=i||10;e.length<a?(e=n(e,[{url:t,data:s.data}]),localStorage.setItem("FOTER_FILTER_TEXT",JSON.stringify(e))):((e=n(e,[{url:t,data:s.data}])).shift(),localStorage.setItem("FOTER_FILTER_TEXT",JSON.stringify(e))),r(s.data)}})).catch((function(t){}))}))},t.prototype.destroy_view=function(t){this.m_engine.destroy_view(t)},t.prototype.get_view_texture=function(t){return this.m_engine.get_view_texture(t)},t.prototype.clean=function(){this.inner_clean(),this.m_handler_queue.destroy(),this.m_handler_queue=new Ci(this),this.m_clone_history=[],this.m_painter_engine.clean(),this.m_painter_view={view:0,lock:!1},this.m_reshape_view=0,this.m_interval_record=null,this.m_matting_blur=0,this.m_matting_crop=!1;var t=this.m_engine.get_image_size(),e=this.m_engine.get_src();this.apply_to_canvas(e,t.width,t.height)},t.prototype.process_blemish=function(t,e,r){var i,s,a,o=this.m_small_engine.get_image_size();e?(i=t.x*o.width,s=t.y*o.height,a=t.radius*o.width):(i=Math.floor(t.x)*this.m_ratio,s=Math.floor(t.y)*this.m_ratio,a=Math.floor(t.radius)*this.m_ratio);var n=this.m_blemishFix_view,_=n?"view %1;".replace(/%1/,n.toString()):"";_+="basicAdjust blemishFix point %x %y radius %r;".replace(/%x/,i.toString()).replace(/%y/,s.toString()).replace(/%r/,a.toString()),this.m_blemishFix_view=this.m_small_engine.create_view(_);var h=this.m_small_engine.get_view_texture(this.m_blemishFix_view);this.m_small_engine.destroy_view(n),m(h),this.draw_to_canvas(h,o.width,o.height,r||function(){}),this.m_interval_record||(this.m_interval_record={model:"blemish",points:{x:i,y:s},radius:a})},t.prototype.process_redEyeRemove=function(t,e,r){var i=this.m_small_engine.get_image_size(),s=e?Math.floor(t.x*i.width):Math.floor(t.x),a=e?Math.floor(t.y*i.height):Math.floor(t.y),o=e?Math.floor(t.radius*i.width):Math.floor(t.radius),n=this.m_redEyeRemove_view,_=n?"view %1;".replace(/%1/,n.toString()):"";_+="basicAdjust redeyeRemove realPosition %x %y %r 3;".replace(/%x/,s.toString()).replace(/%y/,a.toString()).replace(/%r/,o.toString()),this.m_redEyeRemove_view=this.m_small_engine.create_view(_);var h=this.m_small_engine.get_view_texture(this.m_redEyeRemove_view);this.m_small_engine.destroy_view(n),m(h),this.draw_to_canvas(h,i.width,i.height,r||function(){}),this.m_interval_record={model:"redEyeRemove",point_obj:{x:s,y:a,radius:o}}},t.prototype.process_reshape=function(t,e,r){this.painter_size_change(),this.m_interval_record||(this.m_interval_record={model:"reshape",maskView:0,stress:0});var i=this.m_small_engine.get_image_size(),s=null,a={min:[],max:[],points:[]};if(t&&t.points.length>=2){var o=this.m_reshape_view,n=this.paint_reshape(t,a,r);s={min:a.min,max:a.max};var _=void 0;_=o?"view %1;".replace(/%1/,this.m_reshape_view.toString()):"basicAdjust dark;",_+=n,this.m_reshape_view=this.m_painter_engine.create_view(_),this.m_painter_engine.process_view(this.m_reshape_view),this.m_painter_engine.destroy_view(o)}var h=this.m_painter_engine.get_view_texture(this.m_reshape_view);return this.m_interval_record.stress=e,this.m_interval_record.maskView=this.m_reshape_view,this.m_reshape_view&&m(h)?void this.draw_reshape_to_canvas(this.m_small_engine.get_src(),h,e,i.width,i.height,s):null},t.prototype.render_source=function(t){var e,r;t?(r=this.m_small_engine.get_image_size(),e=this.m_small_engine.get_src()):(r=this.m_engine.get_image_size(),e=this.m_engine.get_src()),this.apply_to_canvas(e,r.width,r.height)},t.prototype.render_preview=function(t){var e=this.m_small_engine.get_image_size();if("basicRotate"===t&&this.m_rotationTex)this.draw_rotation_to_canvas(this.m_rotationTex,e.width,e.height);else{var r=this.m_small_engine.get_src();this.draw_to_canvas(r,e.width,e.height)}},t.prototype.texture_to_image=function(t,e){var r=this.m_engine.get_gl(),i=this.m_engine.get_frame_buffer();r.bindFramebuffer(r.FRAMEBUFFER,i),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0);var s=t.getContext("2d");if(!s)return!1;var a=s.createImageData(t.width,t.height),o=t.width*t.height*4,n=new Uint8Array(o);if(r.readPixels(0,0,t.width,t.height,r.RGBA,r.UNSIGNED_BYTE,n),r.getError())return!1;for(var _=0;_<o;_++)a.data[_]=n[_];return s.putImageData(a,0,0),t.toDataURL()},t.prototype.process_commond=function(t,e,r,i,s){void 0===s&&(s=!1);var a=[],o=[],_=t.substr(0),m=_.match(/\S+/g),h=0;if(m&&m.length)for(var c=0;c<m.length;c++)if(m[c].indexOf(".jpg")>=0||m[c].indexOf(".jpeg")>=0||m[c].indexOf(".png")>=0){if(this.m_engine.get_image_size().width<this.m_small){h=_.indexOf(m[c],h+1),a.push({index:h,small:!0}),o.push(m[c].substring(1,m[c].length-1));continue}a.push({index:h,small:!1}),o.push(m[c].substring(1,m[c].length-1))}(o=n(new Set(o))).length||this._process_effect(_,e,r,s,i),this.loadTextures(o,_,e,r,i,s,a)},t.prototype.refresh_clone=function(t){var e={x:0,y:0,dx:0,dy:0};e.x=t.x/this.m_ratio,e.y=t.y/this.m_ratio,e.dy=t.dy/this.m_ratio,e.dx=t.dx/this.m_ratio,this.m_clone_history.push({model:"refresh",points:e}),this._refresh_clone(t,"s")},t.prototype.process_clone_painter=function(t,e,r){"painter"==this.m_clone_history[this.m_clone_history.length-1].model?t&&this.m_clone_history[this.m_clone_history.length-1].point_obj?this.m_clone_history[this.m_clone_history.length-1].point_obj.points=this.m_clone_history[this.m_clone_history.length-1].point_obj.points.concat(t.points):this.m_clone_history[this.m_clone_history.length-1].opacity=e:this.m_clone_history.push({model:"painter",point_obj:t?{opacity:t.opacity,size:t.size,points:t.points,model:t.model}:null,opacity:e,relative:r}),this._process_clone_painter(t,e,r,"s")},t.prototype.redo=function(){var t=this;if(this.m_handler_queue.m_index!=this.m_handler_queue.m_queue.length){this.m_handler_queue.m_index+=1;var e=this.m_small_engine.get_image_size();if("reshape"==this.m_handler_queue.m_model){var r=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].stress,i=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].maskView;this.m_reshape_view&&this.m_painter_engine.destroy_view(this.m_reshape_view),this.m_reshape_view=this.m_painter_engine.create_view("view "+i.toString()+";"),this.m_painter_engine.process_view(this.m_reshape_view),this.draw_reshape_to_canvas(this.m_small_engine.get_src(),this.m_painter_engine.get_view_texture(i),r,e.width,e.height,null,!0)}if("blurPainter"==this.m_handler_queue.m_model){if(this.m_painter_view.view&&(this.m_painter_engine.destroy_view(this.m_painter_view.view),this.m_painter_view.view=0),!this.m_painter_view.view){this.painter_size_change();for(var s=0,a=0;a<=this.m_handler_queue.m_index-1;++a)if(this.m_handler_queue.m_queue[a].points){var o={};o.opacity=this.m_handler_queue.m_queue[a].opacity,o.size=this.m_handler_queue.m_queue[a].radius,o.points=this.m_handler_queue.m_queue[a].points,o.model=this.m_handler_queue.m_queue[a].pmodel;var n=s?"view "+s.toString()+";"+this.paint_alpha(o):"basicAdjust alphaInit intensity 0;"+this.paint_alpha(o);this.m_painter_view.view=this.m_painter_engine.create_view(n),this.m_painter_engine.process_view(this.m_painter_view.view),s&&this.m_painter_engine.destroy_view(s),s=this.m_painter_view.view}}this.m_small_engine.set_lock_unlock_function((function(e,r){if("painter"==r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}if("reshape"==r){var s=t.m_painter_engine.get_view_texture(t.m_reshape_view);if(!m(s))throw new Error("cannot find the reshape cache");return s}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){"painter"!=i?t.m_resourceCache[e].m_lock=!1:t.m_painter_view.lock=!1})),this.m_basic_layer.script!=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].basic_layer&&(this.m_basic_layer.destroy(),this.m_basic_layer.script=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].basic_layer,this.m_basic_layer.view=this.m_small_engine.create_view(this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].basic_layer),this.m_small_engine.process_view(this.m_basic_layer.view)),this.m_last_small_view&&this.m_small_engine.destroy_view(this.m_last_small_view),this.m_last_small_view=this.m_small_engine.create_view((this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].top_layer?this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].top_layer:"")+"blend view %2 opacity cache alpha %3;".replace(/%2/,this.m_basic_layer.view.toString()).replace(/%3/,this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].bOpacity));var _=this.m_small_engine.get_view_texture(this.m_last_small_view);m(_);var h=this.m_small_engine.get_image_size();this.apply_to_canvas(_,h.width,h.height)}if("magic"==this.m_handler_queue.m_model&&(this.m_magic_view&&(this.m_small_engine.destroy_view(this.m_magic_view),this.m_magic_view=0),this.m_handler_queue.m_queue[this.m_handler_queue.m_index-2]&&this.m_handler_queue.m_queue[this.m_handler_queue.m_index-2].maskView&&(this.m_magic_view=this.m_small_engine.create_view("view "+this.m_handler_queue.m_queue[this.m_handler_queue.m_index-2].maskView+";"),this.m_small_engine.process_view(this.m_magic_view)),this._process_magic_painter_rule(this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1],!1,(function(){})),this.m_interval_record=0,this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].maskView=this.m_small_engine.create_view("view "+this.m_magic_view+";"),this.m_small_engine.process_view(this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].maskView)),"blemish"==this.m_handler_queue.m_model){for(n=this.m_handler_queue.m_firstStep?"view "+this.m_handler_queue.m_firstStep.toString()+";":"",n+="basicAdjust blemishFix",a=0;a<=this.m_handler_queue.m_index-1;++a){var c=this.m_handler_queue.m_queue[a].points.x,l=this.m_handler_queue.m_queue[a].points.y,u=this.m_handler_queue.m_queue[a].radius;n+=" point %x %y radius %r".replace(/%x/,c.toString()).replace(/%y/,l.toString()).replace(/%r/,u.toString())}n+=";",this.m_small_engine.set_lock_unlock_function((function(e,r){if("painter"==r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}if("reshape"==r){var s=t.m_painter_engine.get_view_texture(t.m_reshape_view);if(!m(s))throw new Error("cannot find the reshape cache");return s}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){"painter"!=i?t.m_resourceCache[e].m_lock=!1:t.m_painter_view.lock=!1})),this.m_blemishFix_view&&this.m_small_engine.destroy_view(this.m_blemishFix_view),this.m_blemishFix_view=this.m_small_engine.create_view(n),m(_=this.m_small_engine.get_view_texture(this.m_blemishFix_view));var f=this.m_small_engine.get_image_size();this.apply_to_canvas(_,f.width,f.height)}if("redEyeRemove"==this.m_handler_queue.m_model){for(n=this.m_handler_queue.m_firstStep?"view "+this.m_handler_queue.m_firstStep.toString()+";":"",a=0;a<=this.m_handler_queue.m_index-1;++a)c=this.m_handler_queue.m_queue[a].point_obj.x,l=this.m_handler_queue.m_queue[a].point_obj.y,u=this.m_handler_queue.m_queue[a].point_obj.radius,n+="basicAdjust redeyeRemove realPosition %x %y %r 3;".replace(/%x/,c.toString()).replace(/%y/,l.toString()).replace(/%r/,u.toString());this.m_small_engine.set_lock_unlock_function((function(e,r){if("painter"==r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}if("reshape"==r){var s=t.m_painter_engine.get_view_texture(t.m_reshape_view);if(!m(s))throw new Error("cannot find the reshape cache");return s}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){"painter"!=i?t.m_resourceCache[e].m_lock=!1:t.m_painter_view.lock=!1})),this.m_redEyeRemove_view&&(this.m_small_engine.destroy_view(this.m_redEyeRemove_view),this.m_redEyeRemove_view=0),this.m_redEyeRemove_view=this.m_small_engine.create_view(n),m(_=this.m_small_engine.get_view_texture(this.m_redEyeRemove_view));var p=this.m_small_engine.get_image_size();this.apply_to_canvas(_,p.width,p.height)}if("rotation"==this.m_handler_queue.m_model){for(this.m_last_rotation_view&&(this.m_small_engine.destroy_view(this.m_last_rotation_view),this.m_last_rotation_view=0),n="",_=void 0,a=0;a<this.m_handler_queue.m_index;++a)this.m_handler_queue.m_queue[a].script.match("basicAdjust")&&(n=this.m_handler_queue.m_queue[a].script);n?(this.m_last_rotation_view=this.m_small_engine.create_view(n),_=this.m_small_engine.get_view_texture(this.m_small_engine.create_view(n))):_=this.m_small_engine.get_src(),m(_);var d=this.m_small_engine.get_image_size();this.draw_rotation_to_canvas(_,d.width,d.height)}if("rule"==this.m_handler_queue.m_model){this.m_small_engine.set_lock_unlock_function((function(e,r){if(r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){t.m_resourceCache[e].m_lock=!1,t.m_painter_view.lock=!1})),this.m_last_small_view&&this.m_small_engine.destroy_view(this.m_last_small_view),this.m_last_small_view=this.m_small_engine.create_view(this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].script),m(_=this.m_small_engine.get_view_texture(this.m_last_small_view));var g=this.m_small_engine.get_image_size();this.apply_to_canvas(_,g.width,g.height)}if("crop"==this.m_handler_queue.m_model){this.m_small_engine.set_lock_unlock_function((function(e,r){if(r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){t.m_resourceCache[e].m_lock=!1,t.m_painter_view.lock=!1}));var v=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].pos,x=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].size;this.process_crop(v,x)}}},t.prototype.undo=function(){var t=this;if(this.m_handler_queue.m_index&&(this.m_handler_queue.m_index-=1,this.m_handler_queue.m_queue.length)){var e=this.m_small_engine.get_image_size();if(this.m_handler_queue.m_index){if("reshape"==this.m_handler_queue.m_model){var r=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].stress,i=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].maskView;this.m_reshape_view&&this.m_painter_engine.destroy_view(this.m_reshape_view),this.m_reshape_view=this.m_painter_engine.create_view("view "+i.toString()+";"),this.m_painter_engine.process_view(this.m_reshape_view),this.draw_reshape_to_canvas(this.m_small_engine.get_src(),this.m_painter_engine.get_view_texture(i),r,e.width,e.height,null,!0)}if("blurPainter"==this.m_handler_queue.m_model){this.m_painter_view.view&&(this.m_painter_engine.destroy_view(this.m_painter_view.view),this.m_painter_view.view=0),this.painter_size_change();for(var s=0,a=0;a<=this.m_handler_queue.m_index-1;++a)if(this.m_handler_queue.m_queue[a].points){var o={};o.opacity=this.m_handler_queue.m_queue[a].opacity,o.size=this.m_handler_queue.m_queue[a].radius,o.points=this.m_handler_queue.m_queue[a].points,o.model=this.m_handler_queue.m_queue[a].pmodel;var n=s?"view "+s.toString()+";"+this.paint_alpha(o):"basicAdjust alphaInit intensity 0;"+this.paint_alpha(o);this.m_painter_view.view=this.m_painter_engine.create_view(n),this.m_painter_engine.process_view(this.m_painter_view.view),s&&this.m_painter_engine.destroy_view(s),s=this.m_painter_view.view}this.m_small_engine.set_lock_unlock_function((function(e,r){if("painter"==r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}if("reshape"==r){var s=t.m_painter_engine.get_view_texture(t.m_reshape_view);if(!m(s))throw new Error("cannot find the reshape cache");return s}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){"painter"!=i?t.m_resourceCache[e].m_lock=!1:t.m_painter_view.lock=!1})),this.m_basic_layer.script!=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].basic_layer&&(this.m_basic_layer.destroy(),this.m_basic_layer.script=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].basic_layer,this.m_basic_layer.view=this.m_small_engine.create_view(this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].basic_layer),this.m_small_engine.process_view(this.m_basic_layer.view)),this.m_last_small_view&&this.m_small_engine.destroy_view(this.m_last_small_view),this.m_last_small_view=this.m_small_engine.create_view((this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].top_layer?this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].top_layer:"")+"blend view %2 opacity cache alpha %3;".replace(/%2/,this.m_basic_layer.view.toString()).replace(/%3/,this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].bOpacity)),m(w=this.m_small_engine.get_view_texture(this.m_last_small_view));var _=this.m_small_engine.get_image_size();this.apply_to_canvas(w,_.width,_.height)}if("magic"==this.m_handler_queue.m_model){this.m_magic_view&&this.m_small_engine.destroy_view(this.m_magic_view),this.m_magic_view=this.m_small_engine.create_view("view "+this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].maskView+";"),this.m_small_engine.process_view(this.m_magic_view),this.m_handler_queue.m_queue[this.m_handler_queue.m_index]&&this.m_handler_queue.m_queue[this.m_handler_queue.m_index].maskView&&(this.m_small_engine.destroy_view(this.m_handler_queue.m_queue[this.m_handler_queue.m_index].maskView),this.m_handler_queue.m_queue[this.m_handler_queue.m_index].maskView=0),this.m_resourceCache.magic=new Ei("magic",this.m_small_engine.fetch_view_texture(this.m_small_engine.create_view("view "+this.m_magic_view+";"))),this.m_small_engine.set_lock_unlock_function((function(e,r){if(r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){t.m_resourceCache[e].m_lock=!1,t.m_painter_view.lock=!1})),this.m_last_view&&this.m_engine.destroy_view(this.m_last_view),this.m_last_view=this.m_engine.create_view("blend texture file 'magic' align none "+this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].blendModel+" "+this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].blendOpacity.toString()+";"),m(w=this.m_engine.fetch_view_texture(this.m_last_view));var h=this.m_engine.get_image_size();this.apply_to_canvas(w,h.width,h.height)}if("blemish"==this.m_handler_queue.m_model){for(n=this.m_handler_queue.m_firstStep?"view "+this.m_handler_queue.m_firstStep.toString()+";":"",n+="basicAdjust blemishFix",a=0;a<=this.m_handler_queue.m_index-1;++a){var c=this.m_handler_queue.m_queue[a].points.x,l=this.m_handler_queue.m_queue[a].points.y,u=this.m_handler_queue.m_queue[a].radius;n+=" point %x %y radius %r".replace(/%x/,c.toString()).replace(/%y/,l.toString()).replace(/%r/,u.toString())}n+=";",this.m_small_engine.set_lock_unlock_function((function(e,r){if("painter"==r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}if("reshape"==r){var s=t.m_painter_engine.get_view_texture(t.m_reshape_view);if(!m(s))throw new Error("cannot find the reshape cache");return s}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){"painter"!=i?t.m_resourceCache[e].m_lock=!1:t.m_painter_view.lock=!1})),this.m_blemishFix_view&&(this.m_small_engine.destroy_view(this.m_blemishFix_view),this.m_blemishFix_view=0),this.m_blemishFix_view=this.m_small_engine.create_view(n),m(w=this.m_small_engine.get_view_texture(this.m_blemishFix_view));var f=this.m_small_engine.get_image_size();this.apply_to_canvas(w,f.width,f.height)}if("redEyeRemove"==this.m_handler_queue.m_model){for(n=this.m_handler_queue.m_firstStep?"view "+this.m_handler_queue.m_firstStep.toString()+";":"",a=0;a<=this.m_handler_queue.m_index-1;++a)c=this.m_handler_queue.m_queue[a].point_obj.x,l=this.m_handler_queue.m_queue[a].point_obj.y,u=this.m_handler_queue.m_queue[a].point_obj.radius,n+="basicAdjust redeyeRemove realPosition %x %y %r 3;".replace(/%x/,c.toString()).replace(/%y/,l.toString()).replace(/%r/,u.toString());this.m_small_engine.set_lock_unlock_function((function(e,r){if("painter"==r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}if("reshape"==r){var s=t.m_painter_engine.get_view_texture(t.m_reshape_view);if(!m(s))throw new Error("cannot find the reshape cache");return s}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){"painter"!=i?t.m_resourceCache[e].m_lock=!1:t.m_painter_view.lock=!1})),this.m_redEyeRemove_view&&(this.m_small_engine.destroy_view(this.m_redEyeRemove_view),this.m_redEyeRemove_view=0),this.m_redEyeRemove_view=this.m_small_engine.create_view(n),m(w=this.m_small_engine.get_view_texture(this.m_redEyeRemove_view));var p=this.m_small_engine.get_image_size();this.apply_to_canvas(w,p.width,p.height)}if("rotation"==this.m_handler_queue.m_model){for(this.m_last_rotation_view&&(this.m_small_engine.destroy_view(this.m_last_rotation_view),this.m_last_rotation_view=0),n="",w=void 0,a=0;a<this.m_handler_queue.m_index;++a)this.m_handler_queue.m_queue[a].script.match("basicAdjust")&&(n=this.m_handler_queue.m_queue[a].script);n?(this.m_last_rotation_view=this.m_small_engine.create_view(n),w=this.m_small_engine.get_view_texture(this.m_small_engine.create_view(n))):w=this.m_small_engine.get_src(),m(w);var d=this.m_small_engine.get_image_size();this.draw_rotation_to_canvas(w,d.width,d.height)}if("effectRule"==this.m_handler_queue.m_model){this.m_small_engine.set_lock_unlock_function((function(e,r){if(r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){t.m_resourceCache[e].m_lock=!1,t.m_painter_view.lock=!1})),this.m_last_small_view&&this.m_small_engine.destroy_view(this.m_last_small_view),this.m_last_small_view=this.m_small_engine.create_view(this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].script),m(w=this.m_small_engine.get_view_texture(this.m_last_small_view));var g=this.m_small_engine.get_image_size();this.apply_to_canvas(w,g.width,g.height)}if("rule"==this.m_handler_queue.m_model){this.m_small_engine.set_lock_unlock_function((function(e,r){if(r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){t.m_resourceCache[e].m_lock=!1,t.m_painter_view.lock=!1})),this.m_last_small_view&&this.m_small_engine.destroy_view(this.m_last_small_view),this.m_last_small_view=this.m_small_engine.create_view(this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].script),m(w=this.m_small_engine.get_view_texture(this.m_last_small_view));var v=this.m_small_engine.get_image_size();this.apply_to_canvas(w,v.width,v.height)}if("crop"==this.m_handler_queue.m_model){this.m_small_engine.set_lock_unlock_function((function(e,r){if(r){var i=t.m_painter_engine.get_view_texture(t.m_painter_view.view);if(t.m_painter_view.lock=!0,!m(i))throw new Error("cannot find the painter cache");return i}return t.m_resourceCache[e].m_lock=!0,t.m_resourceCache[e].m_image}),(function(e,r,i){t.m_resourceCache[e].m_lock=!1,t.m_painter_view.lock=!1}));var x=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].pos,y=this.m_handler_queue.m_queue[this.m_handler_queue.m_index-1].size;this.process_crop(x,y)}}else if(this.m_painter_view.view&&(this.m_painter_engine.destroy_view(this.m_painter_view.view),this.m_painter_view.view=0),this.m_reshape_view&&(this.m_painter_engine.destroy_view(this.m_reshape_view),this.m_reshape_view=0),this.m_last_rotation_view&&(this.m_small_engine.destroy_view(this.m_last_rotation_view),this.m_last_rotation_view=0),this.m_blemishFix_view&&(this.m_small_engine.destroy_view(this.m_blemishFix_view),this.m_blemishFix_view=0),this.m_redEyeRemove_view&&(this.m_small_engine.destroy_view(this.m_redEyeRemove_view),this.m_redEyeRemove_view=0),this.m_magic_view&&(this.m_small_engine.destroy_view(this.m_magic_view),this.m_magic_view=0),"magic"==this.m_handler_queue.m_model&&this.m_handler_queue.m_queue[this.m_handler_queue.m_index]&&this.m_handler_queue.m_queue[this.m_handler_queue.m_index].maskView&&(this.m_small_engine.destroy_view(this.m_handler_queue.m_queue[this.m_handler_queue.m_index].maskView),this.m_handler_queue.m_queue[this.m_handler_queue.m_index].maskView=0),"crop"==this.m_handler_queue.m_model)this.apply_to_canvas(this.m_engine.get_src(),this.m_engine.get_image_size().width,this.m_engine.get_image_size().height);else if("blurPainter"==this.m_handler_queue.m_model){this.m_last_small_view&&this.m_small_engine.destroy_view(this.m_last_small_view),this.m_last_small_view=this.m_small_engine.create_view("blurSharpen amount -100 radius 0.1;");var w=this.m_small_engine.get_view_texture(this.m_last_small_view);m(w);var b=this.m_small_engine.get_image_size();this.apply_to_canvas(w,b.width,b.height)}else this.apply_to_canvas(this.m_small_engine.get_src(),e.width,e.height)}},t.prototype.destroy_texture=function(t){return"engineTexture"==t.name&&(this.m_engine.get_gl().deleteTexture(t.texture),t.texture=0,t.handlerQueue.destroy(),!0)},t.prototype.apply_history_to_original_image=function(t,e,r,i){var s=this;void 0===t&&(t=!1),void 0===e&&(e=!1);var a=this.m_handler_queue;r&&(a=r);var o=0,n={width:0,height:0};if((a.m_queue.length||this.m_clone_history.length)&&"crop"!=a.m_model||"crop"==a.m_model&&this.m_last_special_tex&&(o=this.m_last_special_tex,this.m_last_special_tex=0,n.width=a.m_queue[a.m_queue.length-1].size[0],n.height=a.m_queue[a.m_queue.length-1].size[1]),"matting"==a.m_model){this.m_engine.set_lock_unlock_function((function(t,e){if("painter"==e){var r=s.m_painter_engine.get_view_texture(s.m_painter_view.view);if(s.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}if("reshape"==e){var i=s.m_painter_engine.get_view_texture(s.m_reshape_view);if(!m(i))throw new Error("cannot find the reshape cache");return i}if("matting"==e){var a=s.m_small_engine.get_view_texture(s.m_matting_painter_view);if(!m(a))throw new Error("cannot find the matting cache");return a}return s.m_resourceCache[t].m_lock=!0,s.m_resourceCache[t].m_image}),(function(t,e,r){"painter"!=r?s.m_resourceCache[t].m_lock=!1:s.m_painter_view.lock=!1})),this.m_last_view&&this.m_engine.destroy_view(this.m_last_view);for(var _=0,h=0,c=0;c<this.m_handler_queue.m_queue.length&&(1==this.m_handler_queue.m_queue[c].model2?_=1:2==this.m_handler_queue.m_queue[c].model2&&(h=1),!_||!h);++c);_&&h?(this.m_last_view=this.m_engine.create_view("imageMatting used cache sharpenTimes 4 esp 0.007 iteration 4 alpha;"),this.m_engine.process_view(this.m_last_view),this.m_engine.destroy_view(this.m_last_view),this.m_last_view=this.m_engine.create_view("imageMatting used "+this.m_matting_painter_view.toString()+" sharpenTimes 2 esp 0.01 iteration 4 blurResult amount -70 radius "+.001*this.m_matting_blur+";")):this.m_last_view=this.m_engine.create_view(" ");var l=this.m_engine.fetch_view_texture(this.m_last_view);m(l);var u=this.m_engine.get_image_size();if(!e)if(this.m_matting_crop){var f=this.autoCrop(l,u.width,u.height,this.m_engine.get_frame_buffer());i&&i(f.trans)}else this.apply_to_canvas(l,u.width,u.height)}if("painter"==a.m_model){if(!this.m_painter_view.view){this.painter_size_change();var p=0;for(c=0;c<=a.m_index-1;++c){var d={};d.opacity=a.m_queue[c].opacity,d.size=a.m_queue[c].radius,d.points=a.m_queue[c].points,d.model=a.m_queue[c].pmodel;var g=p?"view "+p.toString()+";"+this.paint_alpha(d):"basicAdjust alphaInit ;"+this.paint_alpha(d);this.m_painter_view.view=this.m_painter_engine.create_view(g),this.m_painter_engine.process_view(this.m_painter_view.view),p&&this.m_painter_engine.destroy_view(p),p=this.m_painter_view.view}}this.m_engine.set_lock_unlock_function((function(t,e){if("painter"==e){var r=s.m_painter_engine.get_view_texture(s.m_painter_view.view);if(s.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}if("reshape"==e){var i=s.m_painter_engine.get_view_texture(s.m_reshape_view);if(!m(i))throw new Error("cannot find the reshape cache");return i}return s.m_resourceCache[t].m_lock=!0,s.m_resourceCache[t].m_image}),(function(t,e,r){"painter"!=r?s.m_resourceCache[t].m_lock=!1:s.m_painter_view.lock=!1}));var v=this.m_engine.create_view(a.m_queue[a.m_index-1].basic_layer);this.m_engine.process_view(v),this.m_last_view&&this.m_engine.destroy_view(this.m_last_view),this.m_last_view=this.m_engine.create_view((a.m_queue[a.m_index-1].top_layer?a.m_queue[a.m_index-1].top_layer:"")+"blend view %2 opacity cache ;".replace(/%2/,v.toString())),l=this.m_engine.fetch_view_texture(this.m_last_view),this.m_engine.destroy_view(v),m(l),u=this.m_engine.get_image_size(),e||this.apply_to_canvas(l,u.width,u.height),o=l,n.width=u.width,n.height=u.height}if("blurPainter"==a.m_model){if(!this.m_painter_view.view)return!1;this.m_engine.set_lock_unlock_function((function(t,e){if("painter"==e){var r=s.m_painter_engine.get_view_texture(s.m_painter_view.view);if(s.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}if("reshape"==e){var i=s.m_painter_engine.get_view_texture(s.m_reshape_view);if(!m(i))throw new Error("cannot find the reshape cache");return i}return s.m_resourceCache[t].m_lock=!0,s.m_resourceCache[t].m_image}),(function(t,e,r){"painter"!=r?s.m_resourceCache[t].m_lock=!1:s.m_painter_view.lock=!1})),v=this.m_engine.create_view(a.m_queue[a.m_index-1].basic_layer),this.m_engine.process_view(v),this.m_last_view&&this.m_engine.destroy_view(this.m_last_view),this.m_last_view=this.m_engine.create_view((a.m_queue[a.m_index-1].top_layer?a.m_queue[a.m_index-1].top_layer:"")+"blend view %2 opacity cache alpha %3;".replace(/%2/,v.toString()).replace(/%3/,a.m_queue[a.m_index-1].bOpacity)),l=this.m_engine.fetch_view_texture(this.m_last_view),this.m_engine.destroy_view(v),m(l),u=this.m_engine.get_image_size(),e||this.apply_to_canvas(l,u.width,u.height)}if("magic"==a.m_model&&(this.m_resourceCache.magic=new Ei("magic",this.m_small_engine.fetch_view_texture(this.m_small_engine.create_view("view "+this.m_magic_view+";"))),this.m_engine.set_lock_unlock_function((function(t,e){if(e){var r=s.m_painter_engine.get_view_texture(s.m_painter_view.view);if(s.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}return s.m_resourceCache[t].m_lock=!0,s.m_resourceCache[t].m_image}),(function(t,e,r){s.m_resourceCache[t].m_lock=!1,s.m_painter_view.lock=!1})),this.m_last_view&&this.m_engine.destroy_view(this.m_last_view),this.m_last_view=this.m_engine.create_view("blend texture file 'magic' align none "+a.m_queue[a.m_index-1].blendModel+ +a.m_queue[a.m_index-1].blendOpacity.toString()+";"),m(l=this.m_engine.fetch_view_texture(this.m_last_view)),u=this.m_engine.get_image_size(),e||this.apply_to_canvas(l,u.width,u.height),this.inner_clean()),"reshape"==a.m_model){if(1==this.m_ratio)return this.inner_clean(),a.destroy(),a=new Ci(this),this.m_interval_record=null,this.m_painter_engine.clean(),this.m_painter_view={view:0,lock:!1},this.m_reshape_view=0,!1;if(!this.m_reshape_view){var x=0;for(c=0;c<=a.m_index-1;++c)(d=void 0).radius=a.m_queue[c].radius,d.points=a.m_queue[c].points,g=x?"view "+x.toString()+";"+this.paint_reshape(d):"basicAdjust dark;"+this.paint_reshape(d),this.m_reshape_view=this.m_painter_engine.create_view(g),this.m_painter_engine.process_view(this.m_reshape_view),x&&this.m_painter_engine.destroy_view(x),x=this.m_painter_view.view}var y=a.m_queue[a.m_index-1].stress;return u=this.m_engine.get_image_size(),this.draw_reshape_to_canvas(this.m_engine.get_src(),this.m_painter_engine.get_view_texture(this.m_reshape_view),y,u.width,u.height,null,!0),this.inner_clean(),a.destroy(),a=new Ci(this),this.m_interval_record=null,this.m_painter_engine.clean(),this.m_painter_view={view:0,lock:!1},this.m_reshape_view=0,!1}if("effectRule"==a.m_model)if(this.m_engine.set_lock_unlock_function((function(t,e){if(e){var r=s.m_painter_engine.get_view_texture(s.m_painter_view.view);if(s.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}return s.m_resourceCache[t].m_lock=!0,s.m_resourceCache[t].m_image}),(function(t,e,r){s.m_resourceCache[t].m_lock=!1,s.m_painter_view.lock=!1})),"normal"==a.m_queue[a.m_index-1].eModel){if(1==this.m_ratio&&null==r){var w=this.m_small_engine.fetch_view_texture(this.m_last_small_view);if(m(w)&&(o=w),n.width=this.m_small_engine.get_image_size().width,n.height=this.m_small_engine.get_image_size().height,this.inner_clean(),this.m_interval_record=null,this.m_painter_engine.clean(),this.m_painter_view={view:0,lock:!1},this.m_reshape_view=0,o){var b=this.create_engine_texture(o,n.width,n.height,a);return this.m_texture_pool.push(b),t?(a.destroy(),a=new Ci(this),b):(a.destroy(),a=new Ci(this),this.destroy_texture(b),!1)}return a.destroy(),a=new Ci(this),!1}this.m_last_view&&this.m_engine.destroy_view(this.m_last_view),this.m_last_view=this.m_engine.create_view(a.m_queue[a.m_index-1].script),m(l=this.m_engine.fetch_view_texture(this.m_last_view)),u=this.m_engine.get_image_size(),e||this.apply_to_canvas(l,u.width,u.height),o=l,n.width=u.width,n.height=u.height}else{if(1==this.m_ratio&&null==r){w=this.m_last_special_tex,this.m_last_special_tex=0,m(w)&&(o=w);var z=this.m_engine.get_image_size(),T=a.m_queue[a.m_index-1].thickness*z.width,E=z.width+2*T,C=z.height+2*T;return n.width=E,n.height=C,this.inner_clean(),this.m_interval_record=null,this.m_painter_engine.clean(),this.m_painter_view={view:0,lock:!1},this.m_reshape_view=0,o?(b=this.create_engine_texture(o,n.width,n.height,a),this.m_texture_pool.push(b),t?(a.destroy(),a=new Ci(this),b):(a.destroy(),a=new Ci(this),this.destroy_texture(b),!1)):(a.destroy(),a=new Ci(this),!1)}var S=this.m_engine.get_image_size(),M=a.m_queue[a.m_index-1].thickness*S.width,D=S.width+2*M,R=S.height+2*M,A=this.m_special_engine.create_new_texture(D,R,!0);this.m_special_engine.set_image(A,D,R),this.m_special_engine.set_lock_unlock_function((function(t,e){return s.special_lock(t)}),(function(t,e){s.m_resourceCache[t].m_lock=!1}));var I=this.m_special_engine.create_view(a.m_queue[a.m_index-1].script);l=this.m_special_engine.fetch_view_texture(I),this.m_last_special_tex&&(this.clean_special_border_GLTextures(this.m_last_special_tex),this.m_last_special_tex=0),e||this.apply_to_canvas(l,D,R),o=l,n.width=D,n.height=R,this.m_special_engine.clean()}if("rule"==a.m_model){if(1==this.m_ratio&&null==r)return m(w=this.m_small_engine.fetch_view_texture(this.m_last_small_view))&&(o=w),n.width=this.m_small_engine.get_image_size().width,n.height=this.m_small_engine.get_image_size().height,this.inner_clean(),this.m_interval_record=null,this.m_painter_engine.clean(),this.m_painter_view={view:0,lock:!1},this.m_reshape_view=0,o?(b=this.create_engine_texture(o,n.width,n.height,a),this.m_texture_pool.push(b),t?(a.destroy(),a=new Ci(this),b):(a.destroy(),a=new Ci(this),this.destroy_texture(b),!1)):(a.destroy(),a=new Ci(this),!1);this.m_engine.set_lock_unlock_function((function(t,e){if(e){var r=s.m_painter_engine.get_view_texture(s.m_painter_view.view);if(s.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}return s.m_resourceCache[t].m_lock=!0,s.m_resourceCache[t].m_image}),(function(t,e,r){s.m_resourceCache[t].m_lock=!1,s.m_painter_view.lock=!1})),this.m_last_view&&this.m_engine.destroy_view(this.m_last_view),this.m_last_view=this.m_engine.create_view(a.m_queue[a.m_index-1].script),m(l=this.m_engine.fetch_view_texture(this.m_last_view)),u=this.m_engine.get_image_size(),e||this.apply_to_canvas(l,u.width,u.height),o=l,n.width=u.width,n.height=u.height}if("rotation"==a.m_model){for(this.m_last_view&&this.m_engine.destroy_view(this.m_last_view),g="",l=void 0,c=0;c<a.m_index;++c)a.m_queue[c].script.match("basicAdjust")&&(g=a.m_queue[c].script);m(l=g?this.m_engine.get_view_texture(this.m_engine.create_view(g)):this.m_engine.get_src()),u=this.m_engine.get_image_size(),this.draw_rotation_to_canvas(l,u.width,u.height)}if("blemish"==a.m_model){if(1==this.m_ratio&&null==r)return m(w=this.m_small_engine.fetch_view_texture(this.m_blemishFix_view))&&(o=w),n.width=this.m_small_engine.get_image_size().width,n.height=this.m_small_engine.get_image_size().height,this.inner_clean(),this.m_interval_record=null,this.m_painter_engine.clean(),this.m_painter_view={view:0,lock:!1},this.m_reshape_view=0,o?(b=this.create_engine_texture(o,n.width,n.height,a),this.m_texture_pool.push(b),t?(a.destroy(),a=new Ci(this),b):(a.destroy(),a=new Ci(this),this.destroy_texture(b),!1)):(a.destroy(),a=new Ci(this),!1);g="basicAdjust blemishFix";var k;for(a.m_queue.splice(a.m_index),k=a.m_firstStepScript&&a.m_firstStepScript.length?a.m_firstStepScript.concat(a.m_queue):a.m_queue,c=0;c<=k.length-1;++c){var F=k[c].points.x/this.m_ratio,P=k[c].points.y/this.m_ratio,N=k[c].radius/this.m_ratio;g+=" point %x %y radius %r".replace(/%x/,F.toString()).replace(/%y/,P.toString()).replace(/%r/,N.toString())}g+=";",this.m_engine.set_lock_unlock_function((function(t,e){if("painter"==e){var r=s.m_painter_engine.get_view_texture(s.m_painter_view.view);if(s.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}if("reshape"==e){var i=s.m_painter_engine.get_view_texture(s.m_reshape_view);if(!m(i))throw new Error("cannot find the reshape cache");return i}return s.m_resourceCache[t].m_lock=!0,s.m_resourceCache[t].m_image}),(function(t,e,r){"painter"!=r?s.m_resourceCache[t].m_lock=!1:s.m_painter_view.lock=!1})),this.m_last_view&&this.m_engine.destroy_view(this.m_last_view),this.m_last_view=this.m_engine.create_view(g),m(l=this.m_engine.fetch_view_texture(this.m_last_view)),u=this.m_engine.get_image_size(),e||this.apply_to_canvas(l,u.width,u.height),o=l,n.width=u.width,n.height=u.height}if("redEyeRemove"==a.m_model){if(1==this.m_ratio&&null==r)return m(w=this.m_small_engine.fetch_view_texture(this.m_redEyeRemove_view))&&(o=w),n.width=this.m_small_engine.get_image_size().width,n.height=this.m_small_engine.get_image_size().height,this.inner_clean(),this.m_interval_record=null,this.m_painter_engine.clean(),this.m_painter_view={view:0,lock:!1},this.m_reshape_view=0,o?(b=this.create_engine_texture(o,n.width,n.height,a),this.m_texture_pool.push(b),t?(a.destroy(),a=new Ci(this),b):(a.destroy(),a=new Ci(this),this.destroy_texture(b),!1)):(a.destroy(),a=new Ci(this),!1);g="";var q;for(a.m_queue.splice(a.m_index),q=a.m_firstStepScript&&a.m_firstStepScript.length?a.m_firstStepScript.concat(a.m_queue):a.m_queue,c=0;c<=q.length-1;++c)F=q[c].point_obj.x/this.m_ratio,P=q[c].point_obj.y/this.m_ratio,N=q[c].point_obj.radius/this.m_ratio,g+="basicAdjust redeyeRemove realPosition %x %y %r 3;".replace(/%x/,F.toString()).replace(/%y/,P.toString()).replace(/%r/,N.toString());this.m_engine.set_lock_unlock_function((function(t,e){if("painter"==e){var r=s.m_painter_engine.get_view_texture(s.m_painter_view.view);if(s.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}if("reshape"==e){var i=s.m_painter_engine.get_view_texture(s.m_reshape_view);if(!m(i))throw new Error("cannot find the reshape cache");return i}return s.m_resourceCache[t].m_lock=!0,s.m_resourceCache[t].m_image}),(function(t,e,r){"painter"!=r?s.m_resourceCache[t].m_lock=!1:s.m_painter_view.lock=!1})),this.m_last_view&&this.m_engine.destroy_view(this.m_last_view),this.m_last_view=this.m_engine.create_view(g),m(l=this.m_engine.fetch_view_texture(this.m_last_view)),u=this.m_engine.get_image_size(),e||this.apply_to_canvas(l,u.width,u.height),o=l,n.width=u.width,n.height=u.height}if("polaroid"==a.m_model&&(this.m_engine.set_lock_unlock_function((function(t,e){if(e){var r=s.m_painter_engine.get_view_texture(s.m_painter_view.view);if(s.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}return s.m_resourceCache[t].m_lock=!0,s.m_resourceCache[t].m_image}),(function(t,e,r){s.m_resourceCache[t].m_lock=!1,s.m_painter_view.lock=!1})),this.m_last_view&&this.m_engine.destroy_view(this.m_last_view),this.m_last_view=this.m_engine.create_view(a.m_queue[a.m_index-1].script),m(l=this.m_engine.get_view_texture(this.m_last_view)),(u=this.m_engine.get_image_size()).height+=a.m_queue[a.m_index-1].captation*u.width,this.draw_polaroid_to_canvas(l,u.width,u.height,a.m_queue[a.m_index-1].color,a.m_queue[a.m_index-1].captation*u.width)),this.m_clone_history.length){if(1==this.m_ratio)return void(this.m_clone_history=[]);this.m_painter_view.view&&(this.m_painter_engine.destroy_view(this.m_painter_view.view),this.m_painter_view.view=0),this.m_clone_baisc_layer&&(this.m_small_engine.destroy_view(this.m_clone_baisc_layer),this.m_clone_baisc_layer=0),this.m_clone_cache&&(this.m_small_engine.destroy_view(this.m_clone_cache),this.m_clone_cache=0),l=void 0;var B=void 0;for(c=0;c<this.m_clone_history.length;++c)null!=this.m_clone_history[c].opacity&&(B=this.m_clone_history[c].opacity),"painter"==this.m_clone_history[c].model?l=this._process_clone_painter(this.m_clone_history[c].point_obj,this.m_clone_history[c].opacity,this.m_clone_history[c].relative,"b",!0):this._refresh_clone(this.m_clone_history[c].points,"b");return u=this.m_engine.get_image_size(),this.paint_clone_to_canvas(this.m_engine.get_src(),l,u.width,u.height,B,!0),void(this.m_clone_history=[])}return this.inner_clean(),this.m_interval_record=null,this.m_painter_engine.clean(),this.m_painter_view={view:0,lock:!1},this.m_reshape_view=0,o?(b=this.create_engine_texture(o,n.width,n.height,a),this.m_texture_pool.push(b),t?(a.destroy(),a=new Ci(this),b):(a.destroy(),a=new Ci(this),this.destroy_texture(b),!1)):(a.destroy(),a=new Ci(this),!1)},t.prototype.refresh_record=function(){if(this.m_interval_record){if("painter"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("blurPainter"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("magic"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("blemish"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("rule"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("effectRule"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("reshape"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("redEyeRemove"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("polaroid"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("effectRule"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("crop"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0);if("matting"==this.m_interval_record.model)return this.push_to_handler_queue(),void(this.m_interval_record=0)}return this.m_last_rotation_handle?(this.m_interval_record={model:"rotation",script:this.m_last_rotation_handle},this.m_last_rotation_handle="",this.push_to_handler_queue(),void(this.m_interval_record=0)):null},t.prototype.auto_step=function(){if("reshape"!=this.m_handler_queue.m_model||!this.m_painter_view.view){var t=this.m_engine.get_image_size(),e=this.m_small_engine.get_image_size();this.m_step=t.width/e.width}},t.prototype.set_magic_resource=function(t,e){this.m_resourceCache[e]=new Ei(e,t)},t.prototype.process_magic_painter_rule=function(t,e,r,i){var s=this;r=r||!1;var a=t.fileName,o=function(a,o,n){var _=new Image;_.src=a,_.complete?(s.m_resourceCache[o]=new Ei(o,_),s._process_magic_painter_rule(t,r,e,i)):(_.onload=function(){s.m_resourceCache[o]=new Ei(o,_),s._process_magic_painter_rule(t,r,e,i)},_.onerror=function(){throw new Error("connot find texture:"+o)})};this.m_resourceCache[a]?this._process_magic_painter_rule(t,r,e,i):function(t){s.loadPic(t,"effect",o)}(a)},t.prototype.process_painter_rule=function(t,e,r,i,s){void 0===i&&(i=!1),void 0===s&&(s=""),i=null!=i&&i,this.painter_size_change(),!i&&e&&this.m_basic_layer.script!=e&&(this.m_basic_layer.destroy(),this.m_basic_layer.script=e,this.m_basic_layer.view=this.m_engine.create_view(e),this.m_engine.process_view(this.m_basic_layer.view)),this.m_interval_record&&"painter"==this.m_interval_record.model?"painter"==this.m_interval_record.model&&(this.m_interval_record.basic_layer,this.m_basic_layer.script):(this.m_interval_record={model:"painter",points:new Array,radius:null,opacity:null,pmodel:null,basic_layer:e,top_layer:s},t&&(this.m_interval_record.opacity=t.opacity,this.m_interval_record.radius=t.size,this.m_interval_record.pmodel=t.model));var a={points:[],max:[],min:[]};if(t&&t.points.length){if(this.m_interval_record.opacity==t.opacity&&(this.m_interval_record.radius,t.size),this.m_painter_view.lock)return;var o=this.m_painter_view.view,n=(o?"view %1;".replace(/%1/,o.toString()):"basicAdjust alphaInit ;")+this.paint_alpha(t,a,r);this.m_painter_view.view=this.m_painter_engine.create_view(n),this.m_painter_engine.process_view(this.m_painter_view.view),this.m_painter_engine.destroy_view(o)}if(this.m_interval_record.points=this.m_interval_record.points.concat(a.points),!i){var _=this.m_engine.get_image_size(),m=2==a.min.length?{min:a.min,max:a.max}:null;this.paint_to_canvas(this.m_engine.get_src(),this.m_painter_engine.get_view_texture(this.m_painter_view.view),this.m_engine.get_view_texture(this.m_basic_layer.view),_.width,_.height,m)}},t.prototype.clean_matting_painter=function(){this.m_matting_painter_view&&(this.m_small_engine.destroy_view(this.m_matting_painter_view),this.m_matting_painter_view=0),this.m_handler_queue=new Ci(this)},t.prototype.process_matting_painter=function(t,e,r,i){if(this.m_matting_painter_view||(this.m_matting_painter_view=this.m_small_engine.create_view("basicAdjust darkClear;"),this.m_small_engine.process_view(this.m_matting_painter_view)),this.m_interval_record&&"matting"==this.m_interval_record.model||(this.m_interval_record={model:"matting",model2:t,points:new Array,size:r,rel:i}),e&&e.length){this.m_interval_record.size==r&&this.m_interval_record.model2==t&&this.m_interval_record.rel;var s=this.m_matting_painter_view,a=new Array;switch(t){case 1:a=[255,0,0];break;case 2:a=[0,255,0];break;case 3:a=[0,0,0]}var o="view %1;".replace(/%1/,s.toString())+this.paint_color(e,r,a,i,t);this.m_matting_painter_view=this.m_small_engine.create_view(o),this.m_small_engine.process_view(this.m_matting_painter_view),this.m_small_engine.destroy_view(s)}this.m_interval_record.points=this.m_interval_record.points.concat(e)},t.prototype.set_matting_crop=function(t){this.m_matting_crop=t},t.prototype.process_matting=function(t,e,r){if(t){var i=this.m_small_engine.create_view("curve mixColor opacity 255 0 0 100 255;");this.m_small_engine.process_view(i);var s=this.m_small_engine.create_view("imageMatting used "+i.toString()+" sharpenTimes 1 esp 0.01 iteration 1 ;");return this.m_small_engine.process_view(s),this.m_small_engine.destroy_view(i),void this.m_small_engine.destroy_view(s)}if(!this.m_matting_painter_view)return e=null==e?0:(e+1)/1.5,void(this.m_matting_blur=e);null!=e?(e=null==e?0:(e+1)/1.5,this.m_matting_blur=e,r?this.process_rule("imageMatting used "+this.m_matting_painter_view.toString()+" sharpenTimes 2 esp 0.01 iteration 4 blurResult amount -100 radius "+.001*e+" crop ;"):this.process_rule("imageMatting used "+this.m_matting_painter_view.toString()+" sharpenTimes 2 esp 0.01 iteration 4 blurResult amount -100 radius "+.001*e+" ;")):r?this.process_rule("imageMatting used "+this.m_matting_painter_view.toString()+" sharpenTimes 2 esp 0.01 iteration 4 crop;"):this.process_rule("imageMatting used "+this.m_matting_painter_view.toString()+" sharpenTimes 2 esp 0.01 iteration 4 ;")},t.prototype.process_blur_brush_rule=function(t,e,r,i,s,a){var o=this;void 0===s&&(s=!1),void 0===a&&(a=""),this.painter_size_change(),!s&&e&&this.m_basic_layer.script!=e&&(this.m_basic_layer.destroy(),this.m_basic_layer.script=e,this.m_basic_layer.view=this.m_small_engine.create_view(e),this.m_small_engine.process_view(this.m_basic_layer.view)),this.m_interval_record&&"blurPainter"==this.m_interval_record.model||(this.m_interval_record={model:"blurPainter",points:new Array,radius:null,opacity:null,bOpacity:null,pmodel:null,basic_layer:e,top_layer:a}),t&&(this.m_interval_record.opacity=t.opacity,this.m_interval_record.radius=t.size,this.m_interval_record.pmodel=t.model),this.m_interval_record.bOpacity=r,this.m_interval_record.basic_layer=this.m_basic_layer.script;var n={points:[],max:[],min:[]};if(this.m_small_engine.set_lock_unlock_function((function(t,e){if("painter"==e){var r=o.m_painter_engine.get_view_texture(o.m_painter_view.view);if(o.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}if("reshape"==e){if(!m(r=o.m_painter_engine.get_view_texture(o.m_reshape_view)))throw new Error("cannot find the reshape cache");return r}return o.m_resourceCache[t].m_lock=!0,o.m_resourceCache[t].m_image}),(function(t,e,r){"painter"!=r?o.m_resourceCache[t].m_lock=!1:o.m_painter_view.lock=!1})),t&&t.points.length){if(this.m_interval_record.opacity==t.opacity&&(this.m_interval_record.radius,t.size),this.m_painter_view.lock)return;var _=this.m_painter_view.view,h=(_?"view %1;".replace(/%1/,_.toString()):"basicAdjust alphaInit intensity 0;")+this.paint_alpha(t,n,i,!0);this.m_painter_view.view=this.m_painter_engine.create_view(h),this.m_painter_engine.process_view(this.m_painter_view.view),this.m_painter_engine.destroy_view(_)}if(this.m_interval_record.points=this.m_interval_record.points.concat(n.points),!s){this.m_painter_view.view||(this.m_painter_view.view=this.m_painter_engine.create_view("basicAdjust alphaInit intensity 0;"),this.m_painter_engine.process_view(this.m_painter_view.view));var c=this.m_small_engine.get_image_size(),l=2==n.min.length?{min:n.min,max:n.max}:null;this.paint_to_canvas(this.m_small_engine.get_src(),this.m_painter_engine.get_view_texture(this.m_painter_view.view),this.m_small_engine.get_view_texture(this.m_basic_layer.view),c.width,c.height,l,r)}},t.prototype.process_rotation=function(t,e,r){if(void 0===e&&(e=0),"intensity"==t){var i;i=null!=r?"basicAdjust gribRotation %1 %2;".replace(/%1/,e.toString()).replace(/%2/,r.toString()):"basicAdjust rotation %1;".replace(/%1/,e.toString()),this.m_last_rotation_view&&this.m_small_engine.destroy_view(this.m_last_rotation_view),this.m_last_rotation_view=this.m_small_engine.create_view(i);var s=this.m_small_engine.get_view_texture(this.m_last_rotation_view);m(s);var a=this.m_small_engine.get_image_size();this.m_interval_record&&this.m_interval_record.model,this.m_last_rotation_handle=i;var o=Math.abs(10*e)%1800;(o/=10)>90&&(o=180-o),o=o/180*3.14159265358;var n=Math.sqrt(a.width/2*(a.width/2)+a.height/2*(a.height/2)),_=Math.min(a.width,a.height),h=Math.acos(_/2/n)-o,c=_/2/Math.cos(h)/n;return this.draw_rotation_to_canvas(s,a.width,a.height),1/c}this.m_last_rotation_handle=t,s=0,a=this.m_small_engine.get_image_size(),s=this.m_last_rotation_view?this.m_small_engine.get_view_texture(this.m_last_rotation_view):this.m_small_engine.get_src(),this.draw_rotation_to_canvas(s,a.width,a.height)},t.prototype.process_polaroid=function(t,e,r){this.m_last_small_view&&this.m_small_engine.destroy_view(this.m_last_small_view),this.m_last_small_view=this.m_small_engine.create_view(t);var i=this.m_small_engine.get_view_texture(this.m_last_small_view);m(i);var s=this.m_small_engine.get_image_size();s.height+=r*s.width,this.draw_polaroid_to_canvas(i,s.width,s.height,e,r*s.width),this.m_interval_record={model:"polaroid",script:t,color:e,captation:r}},t.prototype.process_resize=function(t,e){var r=this;this.m_special_engine.set_lock_unlock_function((function(t,e){return r.special_lock(t)})),this.m_engine.get_image_size();var i=Math.min(t,e),s=Math.max(t,e);i<1&&(t=i==t?1:1/e*t,e=i==e?1:1/t*e),s>4e3&&(t=s==t?4e3:4e3/e*t,e=s==e?4e3:4e3/t*e);var a=this.m_special_engine.create_new_texture(t,e,!0);this.m_special_engine.set_image(a,t,e);this.m_last_special_tex&&(this.clean_special_border_GLTextures(this.m_last_special_tex),this.m_last_special_tex=0),this.m_last_special_tex=this.m_special_engine.fetch_view_texture(this.m_special_engine.create_view("basicAdjust justDraw;")),this.m_special_engine.clean(),this.m_interval_record={model:"resize"},this.apply_to_canvas(this.m_last_special_tex,t,e)},t.prototype.process_crop=function(t,e,r){var i=this;this.m_special_engine.set_lock_unlock_function((function(t,e){return i.special_lock(t)}));var s=this.m_engine.get_image_size(),a=[],o=[];r?(a[0]=Math.floor(e[0]*s.width+.5),a[1]=Math.floor(e[1]*s.height+.5),o[0]=t[0]*s.width,o[1]=t[1]*s.height):(a=e,o=t);var n,_=this.m_special_engine.create_new_texture(a[0],a[1]);this.m_special_engine.set_image(_,a[0],a[1]),n="basicAdjust crop position "+o[0].toString()+" "+o[1].toString()+" srcSize "+s.width.toString()+" "+s.height.toString()+";",this.m_last_special_tex&&(this.clean_special_border_GLTextures(this.m_last_special_tex),this.m_last_special_tex=0),this.m_last_special_tex=this.m_special_engine.fetch_view_texture(this.m_special_engine.create_view(n)),this.m_special_engine.clean(),this.m_interval_record={model:"crop",pos:o,size:a},this.apply_to_canvas(this.m_last_special_tex,a[0],a[1])},t.prototype.process_outside_border=function(t,e,r,i){var s=[],a=t.substr(0),o=a.match(/\S+/g);if(o){for(var n=0;n<o.length;n++)(o[n].indexOf(".jpg")>=0||o[n].indexOf(".jpeg")>=0||o[n].indexOf(".png")>=0)&&s.push(o[n].substring(1,o[n].length-1));var _=e*this.m_small_engine.get_image_size().width;a=a.replace(/%th/,e.toString()),r&&(a=a.replace(/%r/,r[0].toString()).replace(/%g/,r[1].toString()).replace(/%b/,r[2].toString())),this.special_outside_border_loadTexture(s,a,i,_)}},t.prototype.inner_clean=function(){this.m_basic_layer.destroy(),this.m_effect_layer.destroy(),this.m_last_special_tex&&(this.clean_special_border_GLTextures(this.m_last_special_tex),this.m_last_special_tex=0),this.m_engine.clean(),this.m_special_engine.clean(),this.m_small_engine.clean(),this.m_magic_view&&(this.m_small_engine.destroy_view(this.m_magic_view),this.m_magic_view=0),this.m_last_view&&(this.m_engine.destroy_view(this.m_last_view),this.m_last_view=0),this.m_last_small_view&&(this.m_small_engine.destroy_view(this.m_last_small_view),this.m_last_small_view=0),this.m_matting_painter_view&&(this.m_small_engine.destroy_view(this.m_matting_painter_view),this.m_matting_painter_view=0),this.m_last_rotation_view&&(this.m_small_engine.destroy_view(this.m_last_rotation_view),this.m_last_rotation_view=0),this.m_last_rotation_handle="",this.m_blemishFix_view&&(this.m_small_engine.destroy_view(this.m_blemishFix_view),this.m_blemishFix_view=0),this.m_redEyeRemove_view&&(this.m_small_engine.destroy_view(this.m_redEyeRemove_view),this.m_redEyeRemove_view=0),this.m_clone_baisc_layer&&(this.m_small_engine.destroy_view(this.m_clone_baisc_layer),this.m_engine.destroy_view(this.m_clone_baisc_layer),this.m_clone_baisc_layer=0),this.m_clone_cache&&(this.m_small_engine.destroy_view(this.m_clone_cache),this.m_engine.destroy_view(this.m_clone_cache),this.m_clone_cache=0),this.m_rotationState=[],this.m_rotationTex=0},t.prototype.special_lock=function(t){if(t){var e=this.m_resourceCache[t];if(e)return e.m_lock=!0,e.m_image;throw new Error("special lock uncache url"+t)}return this.m_engine.get_src()},t.prototype.justTest=function(){this.m_canvas.update(this.m_testtex,this.m_testwidth,this.m_testheight),this.m_test_callback()},t.prototype.reshapeTest=function(){this.m_canvas.reshape(this.m_reshapeSrcTex,this.m_reshapeMapTex,this.m_reshapeStress,this.m_reshapeWidth,this.m_reshapeHeight,this.m_reshapeTrans),this.m_reshapeTrans=null},t.prototype.paintTest=function(){this.m_canvas.paint(this.m_paintSrcTex,this.m_paintAlphaTex,this.m_paintDstTex,this.m_paintWidth,this.m_paintHight,this.m_paintTrans,this.m_bOpacity),this.m_paintTrans=null},t.prototype.cloneTest=function(){this.m_canvas.paintClone(this.m_cloneSrcTex,this.m_cloneResultTex,this.m_cloneWidth,this.m_cloneHight,this.m_opacity)},t.prototype.polaroid=function(){this.m_canvas.drawPolariod(this.m_polaroidex,this.m_polaroidWidth,this.m_polaroidHeight,this.m_polaroidCaptation,this.m_polaroidColor)},t.prototype.autoCrop=function(t,e,r,i){return this.m_lastRenderId&&cancelAnimationFrame(this.m_lastRenderId),this.m_canvas.autoCrop(t,e,r,i)},t.prototype.paint_clone_to_canvas=function(t,e,r,i,s,a){var o=this;this.m_cloneSrcTex=t,this.m_cloneResultTex=e,this.m_cloneWidth=r,this.m_cloneHight=i,this.m_opacity=s,this.m_lastRenderId&&cancelAnimationFrame(this.m_lastRenderId),a?this.cloneTest():this.m_lastRenderId=requestAnimationFrame((function(){o.cloneTest()}))},t.prototype.draw_polaroid_to_canvas=function(t,e,r,i,s){this.m_polaroidex=t,this.m_polaroidWidth=e,this.m_polaroidHeight=r,this.m_polaroidColor=i,null!=s&&(this.m_polaroidCaptation=s),this.polaroid()},t.prototype.draw_reshape_to_canvas=function(t,e,r,i,s,a,o){var n=this;o&&(this.m_lastRenderId&&cancelAnimationFrame(this.m_lastRenderId),this.m_reshapeSrcTex=t,this.m_reshapeMapTex=e,this.m_reshapeMapTex=e,this.m_reshapeStress=r,this.m_reshapeWidth=i,this.m_reshapeHeight=s,this.m_reshapeTrans=a,this.reshapeTest()),this.m_reshapeSrcTex=t,this.m_reshapeMapTex=e,this.m_reshapeStress=r,this.m_reshapeWidth=i,this.m_reshapeHeight=s,a&&this.m_reshapeTrans?(this.m_reshapeTrans.max[0]<a.max[0]&&(this.m_reshapeTrans.max[0]=a.max[0]),this.m_reshapeTrans.max[1]<a.max[1]&&(this.m_reshapeTrans.max[1]=a.max[1]),this.m_reshapeTrans.min[0]>a.min[0]&&(this.m_reshapeTrans.min[0]=a.min[0]),this.m_reshapeTrans.min[1]>a.max[1]&&(this.m_reshapeTrans.min[1]=a.max[1])):this.m_reshapeTrans=a,this.m_lastRenderId&&cancelAnimationFrame(this.m_lastRenderId),this.m_lastRenderId=requestAnimationFrame((function(){n.reshapeTest()}))},t.prototype.draw_rotation_to_canvas=function(t,e,r){this.m_rotationTex=t,this.m_rotationWidth=e,this.m_rotationHeight=r,this.m_rotationState=this.m_handler_queue.m_queue.slice(0,this.m_handler_queue.m_index),this.m_last_rotation_handle&&this.m_rotationState.push({script:this.m_last_rotation_handle}),this.m_canvas.drawRotation(this.m_rotationTex,this.m_rotationWidth,this.m_rotationHeight,this.m_rotationState)},t.prototype.draw_to_canvas=function(t,e,r,i){var s=this;void 0===i&&(i=function(){}),this.m_testtex=t,this.m_testwidth=e,this.m_testheight=r,this.m_test_callback=i,this.m_lastRenderId&&cancelAnimationFrame(this.m_lastRenderId),this.m_lastRenderId=requestAnimationFrame((function(){s.justTest()}))},t.prototype.apply_to_canvas=function(t,e,r){this.m_lastRenderId&&cancelAnimationFrame(this.m_lastRenderId),this.m_canvas.update(t,e,r)},t.prototype.paint_to_canvas=function(t,e,r,i,s,a,o){var n=this;void 0===o&&(o=0),this.m_paintSrcTex=t,this.m_paintAlphaTex=e,this.m_paintDstTex=r,this.m_paintWidth=i,this.m_paintHight=s,this.m_bOpacity=o,a&&(this.m_paintTrans?(this.m_paintTrans.max[0]<a.max[0]&&(this.m_paintTrans.max[0]=a.max[0]),this.m_paintTrans.max[1]<a.max[1]&&(this.m_paintTrans.max[1]=a.max[1]),this.m_paintTrans.min[0]>a.min[0]&&(this.m_paintTrans.min[0]=a.min[0]),this.m_paintTrans.min[1]>a.max[1]&&(this.m_paintTrans.min[1]=a.max[1])):this.m_paintTrans=a),this.m_lastRenderId&&cancelAnimationFrame(this.m_lastRenderId),this.m_lastRenderId=requestAnimationFrame((function(){n.paintTest()}))},t.prototype.create_engine_texture=function(t,e,r,i){return{texture:t,name:"engineTexture",width:e,height:r,handlerQueue:i.clone()}},t.prototype.paint_magic=function(t,e,r){var i="magicPainter %1 opacity %2 pointStride %4 texSize %6 outsideRadius %7 innerRadius %8 numRatio %9 file '%10' ";i=(i=(i=(i=(i=(i=(i=(i=i.replace(/%1/,t.pModel)).replace(/%2/,t.opacity)).replace(/%4/,t.pointStride)).replace(/%6/,t.texSize)).replace(/%7/,t.outsideRadius)).replace(/%8/,t.innerRadius)).replace(/%9/,t.numRatio)).replace(/%10/,t.fileName),null!=t.angle&&(i=i+"angle "+t.angle);var s=i,a=this.m_small_engine.get_image_size(),o=this.m_painter_engine.get_image_size(),n=r?o.width*t.size:t.size/(this.m_ratio*this.m_step),_=(this.m_ratio,this.m_step,Math.max(.2*n,1));s=(s=s.replace(/%2/,n.toString())).replace(/%s/,_.toString());for(var m=[],h=0;h<t.points.length;++h){var c=void 0,l=void 0;r?(c=t.points[h].x*a.width,l=t.points[h].y*a.height):(c=t.points[h].x,l=t.points[h].y),m.push({x:c,y:l}),s+=" point "+c.toString()+" "+l.toString()}return e&&(e.points=m),s+";"},t.prototype.paint_alpha=function(t,e,r,i){void 0===i&&(i=!1);var s,a="painter %3 opacity %1 pointSize %2 pointStride %s realPixel ",o=(a=a.replace(/%3/,t.model)).replace(/%1/,t.opacity.toString()),n=this.m_small_engine.get_image_size(),_=this.m_painter_engine.get_image_size(),m=Math.max(_.width,_.height),h=r?m*t.size:t.size/(this.m_ratio*this.m_step),c=h*(this.m_ratio*this.m_step);s="lucency"==t.model?Math.max(.13*h,1):Math.max(.25*h,1),o=(o=o.replace(/%2/,h.toString())).replace(/%s/,s.toString());for(var l=new Array,u=new Array,f=[],p=0;p<t.points.length;++p){var d=void 0,g=void 0,v=void 0,x=void 0;r?(d=t.points[p].x*_.width,g=t.points[p].y*_.height,v=t.points[p].x*n.width,x=t.points[p].y*n.height):(d=t.points[p].x/(this.m_ratio*this.m_step),g=t.points[p].y/(this.m_ratio*this.m_step),v=t.points[p].x,x=t.points[p].y),i?f.push(t.points[p]):f.push({x:d,y:g}),o+=" point "+d.toString()+" "+g.toString(),l.length&&u.length?(l[0]=l[0]>v?v:l[0],l[1]=l[1]>x?x:l[1],u[0]=u[0]<v?v:u[0],u[1]=u[1]<x?x:u[1]):(l=[v,x],u=[v,x])}var y=c/2;return l[0]=Math.min(Math.max(l[0]-y,0),n.width),l[1]=Math.min(Math.max(l[1]-y,0),n.height),u[0]=Math.min(Math.max(u[0]+y,0),n.width),u[1]=Math.min(Math.max(u[1]+y,0),n.height),e&&(e.points=f,e.min=l,e.max=u),o+";"},t.prototype.paint_reshape=function(t,e,r){void 0===r&&(r=!1);var i,s="basicAdjust reshapeMap realPixel",a=this.m_small_engine.get_image_size(),o=this.m_painter_engine.get_image_size();i=r?o.width*t.radius*1.6:1.6*t.radius/(this.m_ratio*this.m_step);for(var n=null,_=null,m=new Array,h=i*(this.m_ratio*this.m_step),c=0;c<t.points.length;++c){var l=void 0,u=void 0,f=void 0,p=void 0;r?(l=t.points[c].x*o.width,u=t.points[c].y*o.height,f=t.points[c].x*a.width,p=t.points[c].y*a.height):(l=t.points[c].x/(this.m_ratio*this.m_step),u=t.points[c].y/(this.m_ratio*this.m_step),f=t.points[c].x,p=t.points[c].y),m.push({x:l,y:u}),s+=" point stress 0.2 radius "+i.toString()+" "+l.toString()+" "+u.toString(),n&&_?(n[0]=n[0]>f?f:n[0],n[1]=n[1]>p?p:n[1],_[0]=_[0]<f?f:_[0],_[1]=_[1]<p?p:_[1]):(n=[f,p],_=[f,p])}return s+=";",n=[n[0]-h-this.m_step,n[1]-h-this.m_step],_=[_[0]+h+this.m_step,_[1]+h+this.m_step],n[0]=Math.min(Math.max(0,n[0]),a.width),n[1]=Math.min(Math.max(0,n[1]),a.height),_[0]=Math.min(Math.max(0,_[0]),a.width),_[1]=Math.min(Math.max(0,_[1]),a.height),e&&(e.min=n,e.max=_,e.points=m),s},t.prototype.paint_color=function(t,e,r,i,s){var a,o="colorPainter pointSize %3 %4 pointStride %s %5 %6 %7 %p ";o=(o=o.replace(/%3/,i?"relToWidth":" ")).replace(/%4/,e.toString()),a=3!=s?Math.max(.13*e,1):Math.max(.25*e,1),o=(o=(o=(o=(o=o.replace(/%s/,a.toString())).replace(/%5/,r[0].toString())).replace(/%6/,r[1].toString())).replace(/%7/,r[2].toString())).replace(/%p/,i?"coordinate":"realPixel");for(var n=0;n<t.length;++n){var _=void 0,m=void 0;_=t[n].x,m=t[n].y,o+=" point "+_.toString()+" "+m.toString()}return o+";"},t.prototype.painter_size_change=function(){var t=this.m_painter_engine.get_image_size(),e=this.m_engine.get_image_size(),r=e.width/this.m_step,i=e.height/this.m_step;t.width==r&&t.height==i||(this.m_painter_engine.set_image(this.m_painter_engine.create_new_texture(r,i,!0),r,i),this.m_painter_view={view:0,lock:!1})},t.prototype.process_effect=function(t,e,r,i,s,a){var o=this,n=function(t,e){if(e){var r=o.m_painter_engine.get_view_texture(o.m_painter_view.view);if(o.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}if(t){var i=o.m_resourceCache[t];if(i)return i.m_lock=!0,i.m_image}},_=function(t,e,r){if(t){var i=o.m_resourceCache[t];i&&(i.m_lock=!1,o.m_painter_view.lock=!1)}};s?this.m_engine.set_lock_unlock_function(n,_):this.m_small_engine.set_lock_unlock_function(n,_),this._process_effect(e,r,i,s,a)},t.prototype._process_effect=function(t,e,r,i,s){if(i){var a=null!=r?"layer op start;"+t+"layer op swap;blend layer op opacity "+r.toString()+";":t;e(this.m_engine.create_view(a))}else{this.m_effect_layer.script!=t&&(this.m_effect_layer.destroy(),this.m_effect_layer.script=t,this.m_effect_layer.view=this.m_small_engine.create_view(t),this.m_small_engine.process_view(this.m_effect_layer.view)),this.m_interval_record||(this.m_interval_record={model:"effectRule",eModel:"",script:""});var o,n=this.m_small_engine.get_image_size();if("effect"==s){this.m_last_small_view&&this.m_small_engine.destroy_view(this.m_last_small_view);var _=null!=r?"blend view "+this.m_effect_layer.view.toString()+" opacity "+r.toString()+";":"view "+this.m_effect_layer.view.toString()+";";this.m_interval_record.script=null!=r?"layer op start;"+this.m_effect_layer.script+"layer op swap;blend layer op opacity "+r.toString()+";":this.m_effect_layer.script,this.m_interval_record.eModel="normal",this.m_last_small_view=this.m_small_engine.create_view(_),m(o=this.m_small_engine.get_view_texture(this.m_last_small_view))}else this.m_interval_record.script=this.m_effect_layer.script,this.m_interval_record.eModel="normal",m(o=this.m_small_engine.get_view_texture(this.m_effect_layer.view)),e=e||function(){};this.draw_to_canvas(o,n.width,n.height,e)}},t.prototype._process_clone_painter=function(t,e,r,i,s){var a=this;this.painter_size_change(),this.m_painter_engine.get_image_size(),this.m_engine.get_image_size();var o,n="s"==i?this.m_small_engine:this.m_engine,_="painter";if(t&&t.points.length){if(this.m_painter_view.lock)return;"eraser"==t.model&&(_="eraser",t.model="lucency");var h=this.m_painter_view.view;this.m_painter_view.view=this.m_painter_engine.create_view((h?"view %1;".replace(/%1/,h.toString()):"basicAdjust alphaInit ;")+this.paint_alpha(t,null,r)),this.m_painter_engine.process_view(this.m_painter_view.view),this.m_painter_engine.destroy_view(h)}this.m_painter_view.view||(this.m_painter_view.view=this.m_painter_engine.create_view("basicAdjust alphaInit ;"),this.m_painter_engine.process_view(this.m_painter_view.view)),n.set_lock_unlock_function((function(t,e){if("painter"==e){var r=a.m_painter_engine.get_view_texture(a.m_painter_view.view);if(a.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}if("reshape"==e){var i=a.m_painter_engine.get_view_texture(a.m_reshape_view);if(!m(i))throw new Error("cannot find the reshape cache");return i}if(t){var s=a.m_resourceCache[t];if(s)return s.m_lock=!0,s.m_image}}),(function(t,e,r){"painter"==r&&(a.m_painter_view.lock=!1)})),"s"==i?(this.m_last_small_view&&(n.destroy_view(this.m_last_small_view),this.m_last_small_view=0),this.m_last_small_view=n.create_view((this.m_clone_cache?"view %1;".replace(/%1/,this.m_clone_cache.toString()):"")+("basicAdjust cloneBlend view %2 cache '"+_+"' opacity 100 ;").replace(/%2/,this.m_clone_baisc_layer.toString())),o=n.get_view_texture(this.m_last_small_view)):(this.m_last_view&&(n.destroy_view(this.m_last_view),this.m_last_view=0),this.m_last_view=n.create_view((this.m_clone_cache?"view %1;".replace(/%1/,this.m_clone_cache.toString()):"")+("basicAdjust cloneBlend view %2 cache '"+_+"' opacity 100 ;").replace(/%2/,this.m_clone_baisc_layer.toString())),o=n.get_view_texture(this.m_last_view)),m(o);var c=n.get_image_size();if(s)return o;this.paint_clone_to_canvas(n.get_src(),o,c.width,c.height,e)},t.prototype._process_magic_painter_rule=function(t,e,r,i){var s=this;this.m_small_engine.set_lock_unlock_function((function(t,e){if(e){var r=s.m_painter_engine.get_view_texture(s.m_painter_view.view);if(s.m_painter_view.lock=!0,!m(r))throw new Error("cannot find the painter cache");return r}return s.m_resourceCache[t].m_lock=!0,s.m_resourceCache[t].m_image}),(function(t,e,r){s.m_resourceCache[t].m_lock=!1,s.m_painter_view.lock=!1})),this.m_interval_record&&"magic"==this.m_interval_record.model||(this.m_interval_record={model:"magic",pModel:"",opacity:0,pointSize:0,pointStride:0,texSize:0,outsideRadius:0,innerRadius:0,numRatio:0,fileName:"",blendModel:0,blendOpacity:0,points:new Array}),t&&(this.m_interval_record.pModel=t.pModel,this.m_interval_record.opacity=t.opacity,this.m_interval_record.pointSize=t.pointSize,this.m_interval_record.pointStride=t.pointStride,this.m_interval_record.texSize=t.texSize,this.m_interval_record.outsideRadius=t.outsideRadius,this.m_interval_record.innerRadius=t.innerRadius,this.m_interval_record.numRatio=t.numRatio,this.m_interval_record.fileName=t.fileName,this.m_interval_record.blendModel=t.blendModel,this.m_interval_record.blendOpacity=t.blendOpacity,null!=t.angle&&(this.m_interval_record.angle=t.angle));var a,o={points:[],max:[],min:[]};if(t&&t.points&&t.points.length){this.m_interval_record.opacity==t.opacity&&(this.m_interval_record.radius,t.size);var n=this.m_magic_view,_=(n?"view %1;".replace(/%1/,n.toString()):"basicAdjust darkClear ;")+this.paint_magic(t,o,e);this.m_magic_view=this.m_small_engine.create_view(_),this.m_small_engine.process_view(this.m_magic_view),this.m_small_engine.destroy_view(n)}if(this.m_interval_record.points=this.m_interval_record.points.concat(o.points),this.m_last_small_view&&this.m_small_engine.destroy_view(this.m_last_small_view),this.m_magic_view){a="blend view "+this.m_magic_view.toString()+" "+t.blendModel+" alpha ",a="opacity"==t.pModel?a+" reOpacity "+t.blendOpacity+";":a+t.blendOpacity+";",this.m_last_small_view=this.m_small_engine.create_view(a);var h=this.m_small_engine.get_view_texture(this.m_last_small_view),c=this.m_small_engine.get_image_size();this.apply_to_canvas(h,c.width,c.height),r&&r()}},t.prototype._refresh_clone=function(t,e){var r="s"==e?this.m_small_engine:this.m_engine;if(!t)return null;this.m_painter_view.view&&(this.m_painter_engine.destroy_view(this.m_painter_view.view),this.m_painter_view.view=0),"s"==e?(this.m_clone_cache&&this.m_last_small_view&&(r.destroy_view(this.m_clone_cache),this.m_clone_cache=0),this.m_last_small_view&&(this.m_clone_cache=this.m_last_small_view,this.m_last_small_view=0)):(this.m_clone_cache&&this.m_last_view&&(r.destroy_view(this.m_clone_cache),this.m_clone_cache=0),this.m_last_view&&(this.m_clone_cache=this.m_last_view,this.m_last_view=0)),this.m_clone_baisc_layer&&r.destroy_view(this.m_clone_baisc_layer);var i=(this.m_clone_cache?"view %1;".replace(/%1/,this.m_clone_cache.toString()):"")+"basicAdjust clone %x %y %dx %dy;".replace(/%x/,t.x.toString()).replace(/%y/,t.y.toString()).replace(/%dx/,t.dx.toString()).replace(/%dy/,t.dy.toString());this.m_clone_baisc_layer=r.create_view(i),r.process_view(this.m_clone_baisc_layer)},t.prototype.loadPic=function(t,e,r,i){var s;if(s=t.substring(0,t.length-4),-1!=t.indexOf(".png")){if("effect"==e)try{r(this.m_publicPath+"effect/img/cgeImg/"+s+".png",t,i)}catch(e){r(null,t,i)}else if("border"==e)try{r(this.m_publicPath+"frames/img/cgeImg/"+s+".png",t,i)}catch(e){r(null,t,i)}}else if(-1!=t.indexOf(".jpg"))if("effect"==e)try{r(this.m_publicPath+"effect/img/cgeImg/"+s+".jpg",t,i)}catch(e){r(null,t,i)}else if("border"==e)try{r(this.m_publicPath+"frames/img/cgeImg/"+s+".jpg",t,i)}catch(e){r(null,t,i)}},t.prototype.loadTextures=function(t,e,r,i,s,a,o){var n=this,_=0;if(null!=t&&0!=t.length)for(var m=function(m,l,u){if(!u.small||m){m||r(!1);var f=new Image;if(f.crossOrigin="anonymous",f.src=m,f.complete){if(_++,n.m_resourceCache[l]=new Ei(l,f),_==t.length){for(g=0;g<o.length;g++)if(o[g].small)for(e=h(e,o[g].index+1,"s_"),v=g+1;v<o.length;v++)o[v].index=o[v].index+2;n.process_effect(t,e,r,i,a,s)}}else f.onload=function(){if(_++,n.m_resourceCache[l]=new Ei(l,f),_==t.length){for(var m=0;m<o.length;m++)if(o[m].small){e=h(e,o[m].index+1,"s_");for(var c=m+1;c<o.length;c++)o[c].index=o[c].index+2}n.process_effect(t,e,r,i,a,s)}},f.onerror=function(){f.src=m.replace("s_","")}}else{u.small=!1;var p;p=l.substring(2);var d=n.m_resourceCache[l];if(d&&!d.m_lock&&++_==t.length){for(var g=0;g<o.length;g++)if(o[g].small){e=h(e,o[g].index+1,"s_");for(var v=g+1;v<o.length;v++)o[v].index=o[v].index+2}return void n.process_effect(t,e,r,i,a,s)}c(p,u)}},c=function(t,e){n.loadPic(t,s,m,e)},l=0;l<t.length;l++)if(o[l].small){var u="s_"+t[l],f=this.m_resourceCache[u];if(f){if(!f.m_lock&&++_==t.length){for(var p=0;p<o.length;p++)if(o[p].small){e=h(e,o[p].index+1,"s_");for(var d=p+1;d<o.length;d++)o[d].index=o[d].index+2}return void this.process_effect(t,e,r,i,a,s)}continue}c(u,o[l])}else{if(f=this.m_resourceCache[t[l]]){if(!f.m_lock&&++_==t.length)return void this.process_effect(t,e,r,i,a,s);continue}c(t[l],o[l])}},t.prototype.clean_special_border_GLTextures=function(t){this.m_special_engine.get_gl().deleteTexture(t)},t.prototype.push_to_handler_queue=function(){if(this.m_handler_queue.m_index!=this.m_handler_queue.m_queue.length){if(this.m_handler_queue.m_queue.length&&"reshape"==this.m_handler_queue.m_model)for(var t=this.m_handler_queue.m_index;t<this.m_handler_queue.m_queue.length;++t)this.m_painter_engine.destroy_view(this.m_handler_queue.m_queue[t].maskView);this.m_handler_queue.m_index||"redEyeRemove"!=this.m_handler_queue.m_model&&"blemish"!=this.m_handler_queue.m_model||this.m_handler_queue.m_firstStep&&(this.m_small_engine.destroy_view(this.m_handler_queue.m_firstStep),this.m_handler_queue.m_firstStep=0,this.m_handler_queue.m_firstStepScript=[]),this.m_handler_queue.m_queue.splice(this.m_handler_queue.m_index)}this.m_handler_queue.m_queue.length||(this.m_handler_queue.m_model=this.m_interval_record.model,"redEyeRemove"!=this.m_handler_queue.m_model&&"blemish"!=this.m_handler_queue.m_model||(this.m_handler_queue.m_firstStep=0,this.m_handler_queue.m_firstStepScript=[])),this.m_handler_queue.m_model,this.m_interval_record.model,this.m_handler_queue.m_queue.push(this.createHistoryObject(this.m_handler_queue.m_model)),this.m_handler_queue.m_queue.length>this.m_historyLength&&("reshape"==this.m_handler_queue.m_model&&this.m_painter_engine.destroy_view(this.m_handler_queue.m_queue[0].maskView),"redEyeRemove"!=this.m_handler_queue.m_model&&"blemish"!=this.m_handler_queue.m_model||("blemish"==this.m_handler_queue.m_model?this.merge_blemishFix_steps():this.merge_redEyeRemove_steps(),this.m_handler_queue.m_firstStepScript.push(this.m_handler_queue.m_queue[0])),this.m_handler_queue.m_queue.splice(0,1),--this.m_handler_queue.m_index),this.m_handler_queue.m_index++,this.m_interval_record=null},t.prototype.createHistoryObject=function(t){if("reshape"==t){var e;return e=0==this.m_interval_record.maskView?{model:this.m_interval_record.model,stress:this.m_interval_record.stress,maskView:this.m_painter_engine.create_view("basicAdjust dark;")}:{model:this.m_interval_record.model,stress:this.m_interval_record.stress,maskView:this.m_painter_engine.create_view("view "+this.m_interval_record.maskView.toString()+";")},this.m_painter_engine.process_view(e.maskView),e}return this.m_interval_record},t.prototype.merge_blemishFix_steps=function(){var t=this.m_handler_queue.m_firstStep?"view "+this.m_handler_queue.m_firstStep.toString()+";":"";t+="basicAdjust blemishFix point "+this.m_handler_queue.m_queue[0].points.x.toString()+" "+this.m_handler_queue.m_queue[0].points.y.toString()+" radius "+this.m_handler_queue.m_queue[0].radius.toString()+";";var e=this.m_small_engine.create_view(t);this.m_small_engine.process_view(e),this.m_handler_queue.m_firstStep&&this.m_small_engine.destroy_view(this.m_handler_queue.m_firstStep),this.m_handler_queue.m_firstStep=e},t.prototype.merge_redEyeRemove_steps=function(){var t=this.m_handler_queue.m_firstStep?"view "+this.m_handler_queue.m_firstStep.toString()+";":"";t+="basicAdjust redeyeRemove realPosition "+this.m_handler_queue.m_queue[0].point_obj.x.toString()+" "+this.m_handler_queue.m_queue[0].point_obj.y.toString()+" "+this.m_handler_queue.m_queue[0].point_obj.radius.toString()+" 3;";var e=this.m_small_engine.create_view(t);this.m_small_engine.process_view(e),this.m_handler_queue.m_firstStep&&this.m_small_engine.destroy_view(this.m_handler_queue.m_firstStep),this.m_handler_queue.m_firstStep=e},t.prototype.loadBorderTexture=function(t,e){var r;r=t.substring(0,t.length-4),-1!=t.indexOf(".png")?e(this.m_publicPath+"frames/img/cgeImg/"+r+".png"):-1!=t.indexOf(".jpg")&&e(this.m_publicPath+"frames/img/cgeImg/"+r+".jpg")},t.prototype.special_outside_border_loadTexture=function(t,e,r,i){var s=this;this.m_interval_record||(this.m_interval_record={model:"effectRule",eModel:"",script:"",thickness:0}),this.m_interval_record.eModel="special",this.m_interval_record.script=e,this.m_interval_record.thickness=i/this.m_small_engine.get_image_size().width;for(var a=0,o=function(o){s.loadBorderTexture(o,(function(n){var _=new Image;if(_.src=n,_.complete){if(a++,s.m_resourceCache[o]=new Ei(o,_),a==t.length){var m=s.m_small_engine.get_image_size(),h=m.width+2*i,c=m.height+2*i,l=s.m_special_engine.create_new_texture(h,c,!0);s.m_special_engine.set_image(l,h,c),s.m_special_engine.set_lock_unlock_function((function(t,e){return s.special_lock(t)}),(function(t,e){s.m_resourceCache[t].m_lock=!1}));var u=s.m_special_engine.create_view(e),f=s.m_special_engine.fetch_view_texture(u);u&&(s.m_last_special_tex&&(s.clean_special_border_GLTextures(s.m_last_special_tex),s.m_last_special_tex=0),s.m_last_special_tex=f,s.apply_to_canvas(s.m_last_special_tex,h,c),r&&r(h,c)),s.m_special_tex_pool.push(f),s.m_special_engine.clean()}}else _.onload=function(){if(a++,s.m_resourceCache[o]=new Ei(o,_),a==t.length){s.m_resourceCache[o]=new Ei(o,_);var n=s.m_small_engine.get_image_size(),m=n.width+2*i,h=n.height+2*i,c=s.m_special_engine.create_new_texture(m,h,!0);s.m_special_engine.set_image(c,m,h),s.m_special_engine.set_lock_unlock_function((function(t,e){return s.special_lock(t)}),(function(t,e){s.m_resourceCache[t].m_lock=!1}));var l=s.m_special_engine.create_view(e),u=s.m_special_engine.fetch_view_texture(l);l&&(s.m_last_special_tex&&(s.clean_special_border_GLTextures(s.m_last_special_tex),s.m_last_special_tex=0),s.m_last_special_tex=u,s.apply_to_canvas(s.m_last_special_tex,m,h),r&&r(m,h)),s.m_special_tex_pool.push(u),s.m_special_engine.clean()}},_.onerror=function(){}}))},n=0;n<t.length;n++)if(this.m_resourceCache[t[n]]){if(!this.m_resourceCache[t[n]].m_lock&&++a==t.length){this.m_interval_record||(this.m_interval_record={model:"effectRule",eModel:"",script:"",thickness:0}),this.m_interval_record.eModel="special",this.m_interval_record.script=e,this.m_interval_record.thickness=i/this.m_small_engine.get_image_size().width;var _=this.m_small_engine.get_image_size(),m=_.width+2*i,h=_.height+2*i,c=this.m_special_engine.create_new_texture(m,h,!0);this.m_special_engine.set_image(c,m,h),this.m_special_engine.set_lock_unlock_function((function(t,e){return s.special_lock(t)}),(function(t,e){s.m_resourceCache[t].m_lock=!1}));var l=this.m_special_engine.create_view(e),u=this.m_special_engine.fetch_view_texture(l);return l&&(r&&r(m,h),this.m_last_special_tex&&(this.clean_special_border_GLTextures(this.m_last_special_tex),this.m_last_special_tex=0),this.m_last_special_tex=u,this.apply_to_canvas(this.m_last_special_tex,m,h)),this.m_special_tex_pool.push(u),void this.m_special_engine.clean()}}else o(t[n])},t}();t.BigWrap=Si,Object.defineProperty(t,"__esModule",{value:!0})}))},a1bd:function(t,e,r){"use strict";var i=r("4894"),s=r("1345"),a=r("ec88"),o=r("2c39"),n=r("7cf1"),_=r("1c04"),m=r("4df6"),h=r("c4a5"),c=r("5dd8"),l=r("6c15");t.exports=function(t){return new Promise((function(e,r){var u,f=t.data,p=t.headers,d=t.responseType;function g(){t.cancelToken&&t.cancelToken.unsubscribe(u),t.signal&&t.signal.removeEventListener("abort",u)}i.isFormData(f)&&delete p["Content-Type"];var v=new XMLHttpRequest;if(t.auth){var x=t.auth.username||"",y=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";p.Authorization="Basic "+btoa(x+":"+y)}var w=n(t.baseURL,t.url);function b(){if(v){var i="getAllResponseHeaders"in v?_(v.getAllResponseHeaders()):null,a={data:d&&"text"!==d&&"json"!==d?v.response:v.responseText,status:v.status,statusText:v.statusText,headers:i,config:t,request:v};s((function(t){e(t),g()}),(function(t){r(t),g()}),a),v=null}}if(v.open(t.method.toUpperCase(),o(w,t.params,t.paramsSerializer),!0),v.timeout=t.timeout,"onloadend"in v?v.onloadend=b:v.onreadystatechange=function(){v&&4===v.readyState&&(0!==v.status||v.responseURL&&0===v.responseURL.indexOf("file:"))&&setTimeout(b)},v.onabort=function(){v&&(r(h("Request aborted",t,"ECONNABORTED",v)),v=null)},v.onerror=function(){r(h("Network Error",t,null,v)),v=null},v.ontimeout=function(){var e=t.timeout?"timeout of "+t.timeout+"ms exceeded":"timeout exceeded",i=t.transitional||c.transitional;t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),r(h(e,t,i.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",v)),v=null},i.isStandardBrowserEnv()){var z=(t.withCredentials||m(w))&&t.xsrfCookieName?a.read(t.xsrfCookieName):void 0;z&&(p[t.xsrfHeaderName]=z)}"setRequestHeader"in v&&i.forEach(p,(function(t,e){void 0===f&&"content-type"===e.toLowerCase()?delete p[e]:v.setRequestHeader(e,t)})),i.isUndefined(t.withCredentials)||(v.withCredentials=!!t.withCredentials),d&&"json"!==d&&(v.responseType=t.responseType),"function"==typeof t.onDownloadProgress&&v.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&v.upload&&v.upload.addEventListener("progress",t.onUploadProgress),(t.cancelToken||t.signal)&&(u=function(t){v&&(r(!t||t&&t.type?new l("canceled"):t),v.abort(),v=null)},t.cancelToken&&t.cancelToken.subscribe(u),t.signal&&(t.signal.aborted?u():t.signal.addEventListener("abort",u))),f||(f=null),v.send(f)}))}},a683:function(t,e,r){"use strict";var i=r("4894"),s=r("2c39"),a=r("cb5a7"),o=r("4f2b8"),n=r("c280"),_=r("510a"),m=_.validators;function h(t){this.defaults=t,this.interceptors={request:new a,response:new a}}h.prototype.request=function(t,e){if("string"==typeof t?(e=e||{}).url=t:e=t||{},!e.url)throw new Error("Provided config url is not valid");(e=n(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var r=e.transitional;void 0!==r&&_.assertOptions(r,{silentJSONParsing:m.transitional(m.boolean),forcedJSONParsing:m.transitional(m.boolean),clarifyTimeoutError:m.transitional(m.boolean)},!1);var i=[],s=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(s=s&&t.synchronous,i.unshift(t.fulfilled,t.rejected))}));var a,h=[];if(this.interceptors.response.forEach((function(t){h.push(t.fulfilled,t.rejected)})),!s){var c=[o,void 0];for(Array.prototype.unshift.apply(c,i),c=c.concat(h),a=Promise.resolve(e);c.length;)a=a.then(c.shift(),c.shift());return a}for(var l=e;i.length;){var u=i.shift(),f=i.shift();try{l=u(l)}catch(t){f(t);break}}try{a=o(l)}catch(t){return Promise.reject(t)}for(;h.length;)a=a.then(h.shift(),h.shift());return a},h.prototype.getUri=function(t){if(!t.url)throw new Error("Provided config url is not valid");return t=n(this.defaults,t),s(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],(function(t){h.prototype[t]=function(e,r){return this.request(n(r||{},{method:t,url:e,data:(r||{}).data}))}})),i.forEach(["post","put","patch"],(function(t){h.prototype[t]=function(e,r,i){return this.request(n(i||{},{method:t,url:e,data:r}))}})),t.exports=h},b5ce:function(t,e,r){"use strict";var i=r("4894"),s=r("5dd8");t.exports=function(t,e,r){var a=this||s;return i.forEach(r,(function(r){t=r.call(a,t,e)})),t}},b72f:function(t,e,r){"use strict";var i=r("4894");t.exports=function(t,e){i.forEach(t,(function(r,i){i!==e&&i.toUpperCase()===e.toUpperCase()&&(t[e]=r,delete t[i])}))}},ba06:function(t,e){t.exports={version:"0.25.0"}},c280:function(t,e,r){"use strict";var i=r("4894");t.exports=function(t,e){e=e||{};var r={};function s(t,e){return i.isPlainObject(t)&&i.isPlainObject(e)?i.merge(t,e):i.isPlainObject(e)?i.merge({},e):i.isArray(e)?e.slice():e}function a(r){return i.isUndefined(e[r])?i.isUndefined(t[r])?void 0:s(void 0,t[r]):s(t[r],e[r])}function o(t){if(!i.isUndefined(e[t]))return s(void 0,e[t])}function n(r){return i.isUndefined(e[r])?i.isUndefined(t[r])?void 0:s(void 0,t[r]):s(void 0,e[r])}function _(r){return r in e?s(t[r],e[r]):r in t?s(void 0,t[r]):void 0}var m={url:o,method:o,data:o,baseURL:n,transformRequest:n,transformResponse:n,paramsSerializer:n,timeout:n,timeoutMessage:n,withCredentials:n,adapter:n,responseType:n,xsrfCookieName:n,xsrfHeaderName:n,onUploadProgress:n,onDownloadProgress:n,decompress:n,maxContentLength:n,maxBodyLength:n,transport:n,httpAgent:n,httpsAgent:n,cancelToken:n,socketPath:n,responseEncoding:n,validateStatus:_};return i.forEach(Object.keys(t).concat(Object.keys(e)),(function(t){var e=m[t]||a,s=e(t);i.isUndefined(s)&&e!==_||(r[t]=s)})),r}},c4a5:function(t,e,r){"use strict";var i=r("104d");t.exports=function(t,e,r,s,a){var o=new Error(t);return i(o,e,r,s,a)}},cb5a7:function(t,e,r){"use strict";var i=r("4894");function s(){this.handlers=[]}s.prototype.use=function(t,e,r){return this.handlers.push({fulfilled:t,rejected:e,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1},s.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},s.prototype.forEach=function(t){i.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=s},d1a96:function(t,e,r){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},e1df:function(t,e,r){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},e3a9:function(t,e,r){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},ec88:function(t,e,r){"use strict";var i=r("4894");t.exports=i.isStandardBrowserEnv()?{write:function(t,e,r,s,a,o){var n=[];n.push(t+"="+encodeURIComponent(e)),i.isNumber(r)&&n.push("expires="+new Date(r).toGMTString()),i.isString(s)&&n.push("path="+s),i.isString(a)&&n.push("domain="+a),!0===o&&n.push("secure"),document.cookie=n.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},fcf5:function(t,e,r){"use strict";var i=r("4894");t.exports=function(t){return i.isObject(t)&&!0===t.isAxiosError}},ffe1:function(t,e,r){"use strict";t.exports=function(t,e){return function(){for(var r=new Array(arguments.length),i=0;i<r.length;i++)r[i]=arguments[i];return t.apply(e,r)}}}}]);